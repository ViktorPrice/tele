"""
–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –ø–∞–Ω–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏ –≤ 2 —Å—Ç—Ä–æ–∫–∏ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å—Ç—Ä–µ–ª–æ—á–∫–∞–º–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
"""
import tkinter as tk
from tkinter import ttk
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, Tuple

class CompactTimePanel(ttk.Frame):
    """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –ø–∞–Ω–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""

    def __init__(self, parent, controller=None):
        super().__init__(parent)
        self.controller = controller
        self.logger = logging.getLogger(self.__class__.__name__)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.from_time_var = tk.StringVar()
        self.to_time_var = tk.StringVar()
        self.duration_var = tk.StringVar(value="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: --")
        self.params_count_var = tk.StringVar(value="–ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: 0")
        self.changed_only_var = tk.BooleanVar()

        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞
        self._recalc_timer = None

        # –ù–û–í–´–ï –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–∏
        self.has_priority_for_changed_filter = True  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.on_time_range_changed = None  # Callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        self.on_changed_only_toggle = None  # Callback –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞

        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.quick_buttons = {}
        self.time_spinners = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–µ–ª–æ—á–µ–∫
        self.from_entry = None
        self.to_entry = None

        self._setup_compact_ui()

        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if self.controller:
            self.controller._ui_callbacks.setdefault('changed_params_filter_applied', []).append(self._on_changed_params_filter_applied)

        self.logger.info("CompactTimePanel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–æ–π")

    def _on_changed_params_filter_applied(self, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            count = data.get('count', 0)
            self.params_count_var.set(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {count}")
            self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {count}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è changed_params_filter_applied: {e}")

    def _setup_compact_ui(self):
        """–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π UI —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å—Ç—Ä–µ–ª–æ—á–∫–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        self.grid_columnconfigure(0, weight=1)

        # –°–¢–†–û–ö–ê 1: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å —Å—Ç—Ä–µ–ª–æ—á–∫–∞–º–∏
        row1_frame = ttk.Frame(self)
        row1_frame.grid(row=0, column=0, sticky="ew", pady=(0, 3))
        row1_frame.grid_columnconfigure(1, weight=1)
        row1_frame.grid_columnconfigure(3, weight=1)

        # –û—Ç: —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å—Ç—Ä–µ–ª–æ—á–∫–∞–º–∏
        ttk.Label(row1_frame, text="–û—Ç:", font=('Arial', 9)).grid(row=0, column=0, sticky="w", padx=(0, 5))
        self.from_time_frame = self._create_time_spinner_frame(row1_frame, self.from_time_var, "from")
        self.from_time_frame.grid(row=0, column=1, sticky="ew", padx=(0, 10))

        # –î–æ: —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å—Ç—Ä–µ–ª–æ—á–∫–∞–º–∏
        ttk.Label(row1_frame, text="–î–æ:", font=('Arial', 9)).grid(row=0, column=2, sticky="w", padx=(0, 5))
        self.to_time_frame = self._create_time_spinner_frame(row1_frame, self.to_time_var, "to")
        self.to_time_frame.grid(row=0, column=3, sticky="ew", padx=(0, 10))

        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        buttons_frame = ttk.Frame(row1_frame)
        buttons_frame.grid(row=0, column=4, sticky="w", padx=(10, 10))

        quick_buttons_config = [("-5—Å", -5), ("-1—Å", -1), ("+1—Å", +1), ("+5—Å", +5)]
        for i, (text, delta) in enumerate(quick_buttons_config):
            btn = ttk.Button(
                buttons_frame,
                text=text,
                width=4,
                command=lambda d=delta: self._shift_time(d),
                state=tk.DISABLED
            )
            btn.grid(row=0, column=i, padx=1)
            self.quick_buttons[text] = btn

        # –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô —á–µ–∫–±–æ–∫—Å
        changed_checkbox = ttk.Checkbutton(
            row1_frame,
            text="üî• –ò–∑–º–µ–Ω—è–µ–º—ã–µ",
            variable=self.changed_only_var,
            command=self._on_changed_only_toggle_priority
        )
        changed_checkbox.grid(row=0, column=5, sticky="w", padx=(10, 0))

        # –°–¢–†–û–ö–ê 2: –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å
        self._setup_row2()

    def _create_time_spinner_frame(self, parent, time_var, prefix):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å—Ç—Ä–µ–ª–æ—á–∫–∞–º–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏"""
        frame = ttk.Frame(parent)
        frame.grid_columnconfigure(0, weight=1)
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
        time_entry = tk.Entry(frame, textvariable=time_var, width=20, font=('Arial', 9))
        time_entry.grid(row=0, column=0, sticky="ew", padx=(0, 5))
        time_entry.bind('<FocusOut>', self._on_time_field_changed)
        time_entry.bind('<Return>', self._on_time_field_changed)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ entry
        if prefix == "from":
            self.from_entry = time_entry
        else:
            self.to_entry = time_entry
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç—Ä–µ–ª–æ—á–µ–∫
        spinners_frame = ttk.Frame(frame)
        spinners_frame.grid(row=0, column=1, sticky="w")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–µ–ª–æ—á–∫–∏ –¥–ª—è —á–∞—Å–æ–≤, –º–∏–Ω—É—Ç, —Å–µ–∫—É–Ω–¥
        self._create_time_component_spinner(spinners_frame, "–ß–∞—Å.", 0, prefix, "hours")
        self._create_time_component_spinner(spinners_frame, "–ú–∏–Ω.", 1, prefix, "minutes") 
        self._create_time_component_spinner(spinners_frame, "–°–µ–∫.", 2, prefix, "seconds")
        
        return frame

    def _create_time_component_spinner(self, parent, label, column, time_prefix, component):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–µ–ª–æ—á–µ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ (—á–∞—Å—ã/–º–∏–Ω—É—Ç—ã/—Å–µ–∫—É–Ω–¥—ã)"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        comp_frame = ttk.Frame(parent)
        comp_frame.grid(row=0, column=column, padx=2)
        
        # –ü–æ–¥–ø–∏—Å—å (H/M/S)
        ttk.Label(comp_frame, text=label, font=('Arial', 8)).grid(row=0, column=0, columnspan=2)
        
        # –°—Ç—Ä–µ–ª–æ—á–∫–∞ –≤–≤–µ—Ä—Ö
        up_btn = ttk.Button(
            comp_frame,
            text="‚ñ≤",
            width=2,
            command=lambda: self._increment_time_component(time_prefix, component, 1)
        )
        up_btn.grid(row=1, column=0, sticky="ew")
        
        # –°—Ç—Ä–µ–ª–æ—á–∫–∞ –≤–Ω–∏–∑
        down_btn = ttk.Button(
            comp_frame,
            text="‚ñº", 
            width=2,
            command=lambda: self._increment_time_component(time_prefix, component, -1)
        )
        down_btn.grid(row=1, column=1, sticky="ew")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        spinner_key = f"{time_prefix}_{component}"
        self.time_spinners[spinner_key] = {'up': up_btn, 'down': down_btn}

    def _increment_time_component(self, time_prefix, component, delta):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            if time_prefix == "from":
                current_time_str = self.from_time_var.get()
                time_var = self.from_time_var
            else:
                current_time_str = self.to_time_var.get()
                time_var = self.to_time_var
            
            if not current_time_str:
                return
            
            # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            current_time = datetime.strptime(current_time_str, '%Y-%m-%d %H:%M:%S')
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            if component == "hours":
                new_time = current_time + timedelta(hours=delta)
            elif component == "minutes":
                new_time = current_time + timedelta(minutes=delta)
            elif component == "seconds":
                new_time = current_time + timedelta(seconds=delta)
            else:
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            time_var.set(new_time.strftime('%Y-%m-%d %H:%M:%S'))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            self._update_duration()
            
            # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º
            if self.changed_only_var.get() and self.controller:
                root = self.winfo_toplevel()
                if hasattr(self, '_recalc_timer') and self._recalc_timer:
                    root.after_cancel(self._recalc_timer)
                self._recalc_timer = root.after(300, self._auto_recalculate)
            
            # –í—ã–∑—ã–≤–∞–µ–º callback
            if self.on_time_range_changed:
                from_time = self.from_time_var.get()
                to_time = self.to_time_var.get()
                self.on_time_range_changed(from_time, to_time)
                
            self.logger.debug(f"–ò–∑–º–µ–Ω–µ–Ω {component} –Ω–∞ {delta} –¥–ª—è {time_prefix}: {new_time.strftime('%Y-%m-%d %H:%M:%S')}")
            
        except ValueError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ {component}: {e}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")

    def _setup_row2(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏"""
        row2_frame = ttk.Frame(self)
        row2_frame.grid(row=1, column=0, sticky="ew")
        row2_frame.grid_columnconfigure(0, weight=1)

        info_frame = ttk.Frame(row2_frame)
        info_frame.grid(row=0, column=0, sticky="w")

        # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        duration_label = ttk.Label(info_frame, textvariable=self.duration_var, font=('Arial', 9))
        duration_label.grid(row=0, column=0, sticky="w", padx=(0, 20))

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params_label = ttk.Label(info_frame, textvariable=self.params_count_var, font=('Arial', 9))
        params_label.grid(row=0, column=1, sticky="w", padx=(0, 20))

        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        priority_label = ttk.Label(info_frame, text="‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", font=('Arial', 8), foreground='red')
        priority_label.grid(row=0, column=2, sticky="w", padx=(0, 20))

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        controls_frame = ttk.Frame(row2_frame)
        controls_frame.grid(row=0, column=1, sticky="e")

        ttk.Button(controls_frame, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å", command=self._apply_filters_priority, width=10).grid(row=0, column=0, padx=(0, 5))
        ttk.Button(controls_frame, text="–°–±—Ä–æ—Å", command=self._reset_time, width=8).grid(row=0, column=1)

    def _on_changed_only_toggle_priority(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢–ù–û–ï –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å—Ç—Ä–µ–ª–æ—á–∫–∞–º–∏"""
        is_enabled = self.changed_only_var.get()
        
        self.logger.info(f"üî• –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô —Ñ–∏–ª—å—Ç—Ä –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {is_enabled}")
        
        # –í–∫–ª—é—á–∞–µ–º/–æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        state = tk.NORMAL if is_enabled else tk.DISABLED
        for btn in self.quick_buttons.values():
            btn.config(state=state)
        
        # –í–∫–ª—é—á–∞–µ–º/–æ—Ç–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–µ–ª–æ—á–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        for spinner_data in self.time_spinners.values():
            spinner_data['up'].config(state=state)
            spinner_data['down'].config(state=state)

        # –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if self.on_changed_only_toggle:
            self.on_changed_only_toggle(is_enabled)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        if self.controller:
            if hasattr(self.controller, 'apply_changed_parameters_filter') and is_enabled:
                self.controller.apply_changed_parameters_filter()
            else:
                self.controller.apply_filters(changed_only=is_enabled)

    def on_changed_only_toggled(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ '—Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ'"""
        try:
            is_enabled = self.changed_only_var.get()
            self.logger.info(f"üîÑ –ß–µ–∫–±–æ–∫—Å '—Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ' –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω: {is_enabled}")
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å SmartFilterPanel
            if self.controller:
                filter_panel = self.controller.get_ui_component('filter_panel')
                if filter_panel:
                    if hasattr(filter_panel, 'set_changed_only_mode'):
                        filter_panel.set_changed_only_mode(is_enabled)
                    elif hasattr(filter_panel, 'sync_changed_only_state'):
                        filter_panel.sync_changed_only_state(is_enabled)
            
            # –ï—Å–ª–∏ —á–µ–∫–±–æ–∫—Å –≤–∫–ª—é—á–µ–Ω, –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            if is_enabled and self.controller:
                self.controller.apply_changed_parameters_filter(auto_recalc=False)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è '—Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ': {e}")

    def is_changed_only_enabled(self) -> bool:
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ '—Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ'"""
        try:
            return self.changed_only_var.get() if hasattr(self, 'changed_only_var') else False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è '—Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ': {e}")
            return False

    def _on_time_field_changed(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            self._update_duration()
            
            # –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if self.on_time_range_changed:
                from_time = self.from_time_var.get()
                to_time = self.to_time_var.get()
                self.on_time_range_changed(from_time, to_time)
            
            # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º –≤—ã–∑–æ–≤–æ–º
            if self.changed_only_var.get() and self.controller:
                root = self.winfo_toplevel()
                if hasattr(self, '_recalc_timer') and self._recalc_timer:
                    root.after_cancel(self._recalc_timer)
                self._recalc_timer = root.after(500, self._auto_recalculate)
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")

    def _shift_time(self, delta_seconds: int):
        """–°–º–µ—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥"""
        try:
            if not self.changed_only_var.get():
                return

            from_str = self.from_time_var.get()
            to_str = self.to_time_var.get()

            if not from_str or not to_str:
                return

            from_time = datetime.strptime(from_str, '%Y-%m-%d %H:%M:%S')
            to_time = datetime.strptime(to_str, '%Y-%m-%d %H:%M:%S')

            delta = timedelta(seconds=delta_seconds)
            new_from_time = from_time + delta
            new_to_time = to_time + delta

            self.from_time_var.set(new_from_time.strftime('%Y-%m-%d %H:%M:%S'))
            self.to_time_var.set(new_to_time.strftime('%Y-%m-%d %H:%M:%S'))

            self._update_duration()

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
            if self.controller:
                if hasattr(self.controller, 'apply_changed_parameters_filter'):
                    self.controller.apply_changed_parameters_filter()

        except ValueError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")

    def _apply_filters_priority(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢–ù–û–ï –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            if self.controller:
                if self.changed_only_var.get():
                    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º
                    if hasattr(self.controller, 'apply_changed_parameters_filter'):
                        self.controller.apply_changed_parameters_filter()
                    else:
                        self.controller.apply_filters(changed_only=True)
                else:
                    # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
                    self.controller.apply_filters(changed_only=False)
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")

    def _reset_time(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Å–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –∫ –¥–∞–Ω–Ω—ã–º –∏–∑ CSV"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
            if self.controller and hasattr(self.controller, 'model'):
                model = self.controller.model
                if hasattr(model, 'get_time_range_fields'):
                    time_fields = model.get_time_range_fields()
                    if time_fields:
                        self.from_time_var.set(time_fields['from_time'])
                        self.to_time_var.set(time_fields['to_time'])
                        
                        if time_fields.get('duration'):
                            self.duration_var.set(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {time_fields['duration']}")
                        else:
                            self._update_duration()
                        
                        self.params_count_var.set(f"–ó–∞–ø–∏—Å–µ–π: {time_fields.get('total_records', 0)}")
                        self.changed_only_var.set(False)
                        
                        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ —Å—Ç—Ä–µ–ª–æ—á–∫–∏
                        for btn in self.quick_buttons.values():
                            btn.config(state=tk.DISABLED)
                        for spinner_data in self.time_spinners.values():
                            spinner_data['up'].config(state=tk.DISABLED)
                            spinner_data['down'].config(state=tk.DISABLED)
                        
                        self.logger.info("–í—Ä–µ–º—è —Å–±—Ä–æ—à–µ–Ω–æ –∫ –¥–∞–Ω–Ω—ã–º CSV")
                        return

            # Fallback
            self.from_time_var.set("")
            self.to_time_var.set("")
            self.duration_var.set("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: --")
            self.params_count_var.set("–ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: 0")
            self.changed_only_var.set(False)
            
            for btn in self.quick_buttons.values():
                btn.config(state=tk.DISABLED)
            for spinner_data in self.time_spinners.values():
                spinner_data['up'].config(state=tk.DISABLED)
                spinner_data['down'].config(state=tk.DISABLED)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")

    def _update_duration(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            from_str = self.from_time_var.get()
            to_str = self.to_time_var.get()

            if from_str and to_str:
                from_time = datetime.strptime(from_str, '%Y-%m-%d %H:%M:%S')
                to_time = datetime.strptime(to_str, '%Y-%m-%d %H:%M:%S')
                
                duration = to_time - from_time
                days = duration.days
                hours, remainder = divmod(duration.seconds, 3600)
                minutes, seconds = divmod(remainder, 60)
                
                if days > 0:
                    duration_str = f"{days} –¥–Ω. {hours:02d}:{minutes:02d}:{seconds:02d}"
                else:
                    duration_str = f"{hours:02d}:{minutes:02d}:{seconds:02d}"
                
                self.duration_var.set(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}")
        except ValueError:
            self.duration_var.set("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –û—à–∏–±–∫–∞")

    def update_time_fields(self, from_time: str, to_time: str, duration: str = "", total_records: int = 0):
        """–û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            self.logger.info(f"CompactTimePanel.update_time_fields: {from_time} - {to_time}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            def format_time(t):
                if not t:
                    return ""
                if isinstance(t, str):
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É
                        dt = datetime.strptime(t, '%Y-%m-%d %H:%M:%S')
                        return dt.strftime('%Y-%m-%d %H:%M:%S')
                    except ValueError:
                        self.logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {t}")
                        return t
                return str(t)

            formatted_from = format_time(from_time)
            formatted_to = format_time(to_time)

            self.from_time_var.set(formatted_from)
            self.to_time_var.set(formatted_to)

            if duration:
                self.duration_var.set(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}")
            else:
                self._update_duration()

            if total_records > 0:
                self.params_count_var.set(f"–ó–∞–ø–∏—Å–µ–π: {total_records}")

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
            self.update_idletasks()

            self.logger.info("‚úÖ CompactTimePanel –ø–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –≤—Ä–µ–º–µ–Ω–∏ –≤ CompactTimePanel: {e}")

    def get_time_range(self) -> Tuple[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
        return self.from_time_var.get(), self.to_time_var.get()

    def set_loading_state(self, loading: bool):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–∫–ª—é—á–∞—è —Å—Ç—Ä–µ–ª–æ—á–∫–∏"""
        state = tk.DISABLED if loading else tk.NORMAL
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
        if self.from_entry:
            self.from_entry.config(state=state)
        if self.to_entry:
            self.to_entry.config(state=state)
        
        # –°—Ç—Ä–µ–ª–æ—á–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        for spinner_data in self.time_spinners.values():
            spinner_data['up'].config(state=state)
            spinner_data['down'].config(state=state)
        
        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        for btn in self.quick_buttons.values():
            if self.changed_only_var.get():
                btn.config(state=state)

    # === –ù–û–í–´–ï –ú–ï–¢–û–î–´ –ü–†–ò–û–†–ò–¢–ï–¢–ù–û–ô –õ–û–ì–ò–ö–ò ===

    def set_changed_params_priority(self, has_priority: bool):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        self.has_priority_for_changed_filter = has_priority
        if has_priority:
            self.logger.info("üî• CompactTimePanel –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å—Ç—Ä–µ–ª–æ—á–µ–∫
        if hasattr(self, 'quick_buttons'):
            state = tk.NORMAL if self.changed_only_var.get() else tk.DISABLED
            for btn in self.quick_buttons.values():
                btn.config(state=state)
            for spinner_data in self.time_spinners.values():
                spinner_data['up'].config(state=state)
                spinner_data['down'].config(state=state)

    def get_filter_settings(self) -> Dict[str, Any]:
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        return {
            'changed_only': self.changed_only_var.get() if self.changed_only_var else False,
            'has_priority': getattr(self, 'has_priority_for_changed_filter', True),
            'source_panel': 'compact_time_panel',
            'time_range': {
                'from_time': self.from_time_var.get(),
                'to_time': self.to_time_var.get()
            }
        }

    def disable_changed_only_checkbox(self):
        """–£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î: –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        self.logger.warning("–ú–µ—Ç–æ–¥ disable_changed_only_checkbox —É—Å—Ç–∞—Ä–µ–ª - CompactTimePanel –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")

    def _sync_with_time_panel(self):
        """–£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î: CompactTimePanel —Å–∞–º —è–≤–ª—è–µ—Ç—Å—è time_panel"""
        pass

    def enable_priority_mode(self):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –í–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            self.changed_only_var.set(True)
            self._on_changed_only_toggle_priority()
            self.logger.info("üî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω –≤ CompactTimePanel")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")

    def disable_priority_mode(self):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            self.changed_only_var.set(False)
            self._on_changed_only_toggle_priority()
            self.logger.info("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω –≤ CompactTimePanel")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")

    def is_priority_mode_active(self) -> bool:
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        return self.changed_only_var.get() and self.has_priority_for_changed_filter

    def set_controller(self, controller):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        self.controller = controller
        self.logger.info("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ CompactTimePanel")

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            self.controller = None
            self.on_time_range_changed = None
            self.on_changed_only_toggle = None
            self.logger.info("CompactTimePanel –æ—á–∏—â–µ–Ω")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ CompactTimePanel: {e}")

    def __str__(self):
        return f"CompactTimePanel(priority={self.has_priority_for_changed_filter}, active={self.is_priority_mode_active()})"

    def __repr__(self):
        return self.__str__()

    def _auto_recalculate(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            if self.controller and hasattr(self.controller, 'apply_changed_parameters_filter'):
                self.controller.apply_changed_parameters_filter(auto_recalc=True)
                self.logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞: {e}")
