# src/ui/components/filter_panel.py - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
–ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
"""
import tkinter as tk
from tkinter import ttk
import logging
from typing import Dict, Any, List, Optional


class FilterPanel(ttk.Frame):
    """–ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å TimePanel –¥–ª—è –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""

    def __init__(self, parent, controller=None):
        super().__init__(parent)
        self.controller = controller
        self.logger = logging.getLogger(self.__class__.__name__)
        self.logger.info("FilterPanel: __init__ –≤—ã–∑–≤–∞–Ω")

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.signal_vars = {}
        self.line_vars = {}
        self.wagon_vars = {}
        self.component_vars = {}
        self.hardware_vars = {}

        # –£–ë–†–ê–ù–û: changed_only_var - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –≤ TimePanel
        # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º—Å—è —Å TimePanel
        self.time_panel_sync = None

        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.line_scrollable_frame = None

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_updating = False
        self.has_priority_for_changed_filter = False  # TimePanel –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç

        self._setup_ui()
        self.logger.info("FilterPanel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è")

    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        self.logger.info("FilterPanel: —Å–æ–∑–¥–∞–Ω–∏–µ UI –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
        try:
            self.grid_columnconfigure(0, weight=1)

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title_frame = ttk.Frame(self)
            title_frame.grid(row=0, column=0, sticky="ew", padx=5, pady=5)
            title_frame.grid_columnconfigure(1, weight=1)

            # –ò–∫–æ–Ω–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
            icon_label = ttk.Label(title_frame, text="üîç", font=('Arial', 12))
            icon_label.grid(row=0, column=0, padx=(0, 5))

            title_label = ttk.Label(title_frame, text="–§–∏–ª—å—Ç—Ä—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", 
                                   font=('Arial', 10, 'bold'))
            title_label.grid(row=0, column=1, sticky="w")

            # –£–ë–†–ê–ù–û: –°–µ–∫—Ü–∏—è "–¢–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã" - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –≤ TimePanel
            # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ
            priority_info_frame = ttk.LabelFrame(self, text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
            priority_info_frame.grid(row=1, column=0, sticky="ew", padx=5, pady=2)

            info_text = ("üí° –§–∏–ª—å—Ç—Ä '–¢–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–Ω–µ–ª–∏ –≤—Ä–µ–º–µ–Ω–∏\n"
                        "–∏ –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ –≤—Å–µ–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏")
            info_label = ttk.Label(priority_info_frame, text=info_text, 
                                  font=('Arial', 8), foreground='blue')
            info_label.grid(row=0, column=0, sticky="w", padx=5, pady=5)

            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã (—Å–æ–∑–¥–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö)
            self.dynamic_row_start = 2

            # –§–∏–ª—å—Ç—Ä—ã –ª–∏–Ω–∏–π
            self._create_line_filters()

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            self._create_control_buttons()

            self.logger.info("FilterPanel: UI —Å–æ–∑–¥–∞–Ω –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è")

        except Exception as e:
            self.logger.error(f"FilterPanel: –æ—à–∏–±–∫–∞ –≤ _setup_ui: {e}")

    def _create_line_filters(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ª–∏–Ω–∏–π"""
        try:
            line_frame = ttk.LabelFrame(self, text="üì° –õ–∏–Ω–∏–∏ —Å–≤—è–∑–∏", padding="5")
            line_frame.grid(row=self.dynamic_row_start + 1, column=0, sticky="ew", padx=5, pady=2)

            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–æ–ª–∏—Ä—É–µ–º—ã–π —Ñ—Ä–µ–π–º –¥–ª—è –ª–∏–Ω–∏–π
            canvas = tk.Canvas(line_frame, height=100)
            scrollbar = ttk.Scrollbar(line_frame, orient="vertical", command=canvas.yview)
            scrollable_frame = ttk.Frame(canvas)

            canvas.configure(yscrollcommand=scrollbar.set)
            canvas.bind('<Configure>', lambda e: canvas.configure(
                scrollregion=canvas.bbox("all")))
            canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")

            canvas.pack(side="left", fill="both", expand=True)
            scrollbar.pack(side="right", fill="y")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ scrollable_frame –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.line_scrollable_frame = scrollable_frame

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ª–∏–Ω–∏–π: {e}")

    def _create_control_buttons(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        try:
            button_frame = ttk.Frame(self)
            button_frame.grid(row=self.dynamic_row_start + 6, column=0, sticky="ew", padx=5, pady=5)

            # –ö–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
            select_all_btn = ttk.Button(
                button_frame,
                text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ",
                command=self._select_all_filters
            )
            select_all_btn.pack(side=tk.LEFT, padx=2)

            # –ö–Ω–æ–ø–∫–∞ "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ"
            clear_all_btn = ttk.Button(
                button_frame,
                text="‚ùå –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ",
                command=self._clear_all_filters
            )
            clear_all_btn.pack(side=tk.LEFT, padx=2)

            # –ö–Ω–æ–ø–∫–∞ "–°–±—Ä–æ—Å"
            reset_btn = ttk.Button(
                button_frame,
                text="üîÑ –°–±—Ä–æ—Å",
                command=self.reset_filters
            )
            reset_btn.pack(side=tk.LEFT, padx=2)

            # –ö–Ω–æ–ø–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å TimePanel
            sync_btn = ttk.Button(
                button_frame,
                text="üîó –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è",
                command=self._sync_with_time_panel
            )
            sync_btn.pack(side=tk.LEFT, padx=2)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")

    def update_signal_type_checkboxes(self, signal_types: List[str]):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤ —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            if not hasattr(self, 'signal_type_frame'):
                self.signal_type_frame = ttk.LabelFrame(self, text="üìä –¢–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤", padding="5")
                self.signal_type_frame.grid(row=self.dynamic_row_start, column=0, sticky="ew", padx=5, pady=2)
            
            frame = self.signal_type_frame
            
            # –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —á–µ–∫–±–æ–∫—Å—ã
            for widget in frame.winfo_children():
                widget.destroy()
            self.signal_vars.clear()
            
            # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ —á–µ–∫–±–æ–∫—Å—ã —Ç–æ–ª—å–∫–æ –ø–æ —Ä–µ–∞–ª—å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Ç–∏–ø–∞–º
            for i, signal_type in enumerate(sorted(signal_types)):
                var = tk.BooleanVar()
                var.set(True)
                self.signal_vars[signal_type] = var
                
                checkbox = ttk.Checkbutton(
                    frame,
                    text=signal_type,
                    variable=var,
                    command=self._on_filter_changed
                )
                checkbox.grid(row=i//3, column=i % 3, sticky="w", padx=5, pady=2)
            
            self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ–∫–±–æ–∫—Å—ã —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signal_types)} —Ç–∏–ø–æ–≤")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤ —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

    def update_line_checkboxes(self, lines: List[str]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤ –ª–∏–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not self.line_scrollable_frame:
                self.logger.error("line_scrollable_frame –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return

            # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —á–µ–∫–±–æ–∫—Å—ã –ª–∏–Ω–∏–π
            for widget in self.line_scrollable_frame.winfo_children():
                widget.destroy()

            self.line_vars.clear()

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —á–µ–∫–±–æ–∫—Å—ã
            for i, line in enumerate(sorted(lines)):
                var = tk.BooleanVar()
                var.set(True)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –≤–∫–ª—é—á–µ–Ω—ã
                self.line_vars[line] = var

                checkbox = ttk.Checkbutton(
                    self.line_scrollable_frame,
                    text=line,
                    variable=var,
                    command=self._on_filter_changed
                )
                checkbox.grid(row=i, column=0, sticky="w", padx=5, pady=1)

            self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ–∫–±–æ–∫—Å—ã –ª–∏–Ω–∏–π: {len(lines)} –ª–∏–Ω–∏–π")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤ –ª–∏–Ω–∏–π: {e}")

    def update_wagon_checkboxes(self, wagons: List[str]):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤ –≤–∞–≥–æ–Ω–æ–≤"""
        try:
            if not hasattr(self, 'wagon_frame'):
                self.wagon_frame = ttk.LabelFrame(self, text="üöÉ –ù–æ–º–µ—Ä–∞ –≤–∞–≥–æ–Ω–æ–≤", padding="5")
                self.wagon_frame.grid(row=self.dynamic_row_start + 2, column=0, sticky="ew", padx=5, pady=2)
            
            frame = self.wagon_frame
            for widget in frame.winfo_children():
                widget.destroy()
            self.wagon_vars.clear()
            
            for i, wagon in enumerate(sorted(wagons, key=lambda x: int(x) if x.isdigit() else x)):
                var = tk.BooleanVar()
                var.set(True)
                self.wagon_vars[wagon] = var
                
                checkbox = ttk.Checkbutton(
                    frame,
                    text=wagon,
                    variable=var,
                    command=self._on_filter_changed
                )
                checkbox.grid(row=i//8, column=i % 8, sticky="w", padx=3, pady=1)
            
            self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ–∫–±–æ–∫—Å—ã –≤–∞–≥–æ–Ω–æ–≤: {len(wagons)} –≤–∞–≥–æ–Ω–æ–≤")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤ –≤–∞–≥–æ–Ω–æ–≤: {e}")

    def update_component_checkboxes(self, components: List[str]):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            if not hasattr(self, 'component_frame'):
                self.component_frame = ttk.LabelFrame(self, text="‚öôÔ∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", padding="5")
                self.component_frame.grid(row=self.dynamic_row_start + 3, column=0, sticky="ew", padx=5, pady=2)
            
            frame = self.component_frame
            for widget in frame.winfo_children():
                widget.destroy()
            self.component_vars.clear()
            
            for i, component in enumerate(sorted(components)):
                var = tk.BooleanVar()
                var.set(True)
                self.component_vars[component] = var
                
                checkbox = ttk.Checkbutton(
                    frame,
                    text=component,
                    variable=var,
                    command=self._on_filter_changed
                )
                checkbox.grid(row=i//3, column=i % 3, sticky="w", padx=5, pady=2)
            
            self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ–∫–±–æ–∫—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(components)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")

    def _on_filter_changed(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ TimePanel"""
        try:
            if self.is_updating:
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç TimePanel
            if self._is_time_panel_priority_active():
                self.logger.info("‚ö†Ô∏è TimePanel –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –æ–±—ã—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã")
                return

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            if self.controller and hasattr(self.controller, 'apply_filters'):
                self.controller.apply_filters(changed_only=False)
                self.logger.debug("–ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞: {e}")

    def _is_time_panel_priority_active(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤ TimePanel"""
        try:
            if not self.controller:
                return False

            time_panel = self.controller.get_ui_component('time_panel')
            if time_panel and hasattr(time_panel, 'get_filter_settings'):
                settings = time_panel.get_filter_settings()
                return settings.get('changed_only', False) and settings.get('has_priority', False)

            return False

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ TimePanel: {e}")
            return False

    def _sync_with_time_panel(self):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å TimePanel"""
        try:
            if not self.controller:
                self.logger.warning("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                return

            time_panel = self.controller.get_ui_component('time_panel')
            if time_panel and hasattr(time_panel, 'get_filter_settings'):
                settings = time_panel.get_filter_settings()
                
                if settings.get('changed_only', False):
                    # TimePanel –≤ —Ä–µ–∂–∏–º–µ –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –æ—Ç–∫–ª—é—á–∞–µ–º –Ω–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã
                    self._disable_all_filters()
                    self.logger.info("üîó –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –æ—Ç–∫–ª—é—á–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç TimePanel)")
                else:
                    # TimePanel –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ - –≤–∫–ª—é—á–∞–µ–º –Ω–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã
                    self._enable_all_filters()
                    self.logger.info("üîó –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –≤–∫–ª—é—á–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã")
            else:
                self.logger.warning("TimePanel –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å TimePanel: {e}")

    def _disable_all_filters(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–∫–æ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç TimePanel)"""
        try:
            # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã
            for frame_name in ['signal_type_frame', 'wagon_frame', 'component_frame']:
                if hasattr(self, frame_name):
                    frame = getattr(self, frame_name)
                    for widget in frame.winfo_children():
                        if isinstance(widget, ttk.Checkbutton):
                            widget.config(state='disabled')

            # –û—Ç–∫–ª—é—á–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –ª–∏–Ω–∏–π
            if self.line_scrollable_frame:
                for widget in self.line_scrollable_frame.winfo_children():
                    if isinstance(widget, ttk.Checkbutton):
                        widget.config(state='disabled')

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")

    def _enable_all_filters(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã
            for frame_name in ['signal_type_frame', 'wagon_frame', 'component_frame']:
                if hasattr(self, frame_name):
                    frame = getattr(self, frame_name)
                    for widget in frame.winfo_children():
                        if isinstance(widget, ttk.Checkbutton):
                            widget.config(state='normal')

            # –í–∫–ª—é—á–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –ª–∏–Ω–∏–π
            if self.line_scrollable_frame:
                for widget in self.line_scrollable_frame.winfo_children():
                    if isinstance(widget, ttk.Checkbutton):
                        widget.config(state='normal')

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")

    def get_selected_filters(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –±–µ–∑ –ø–æ–ª—è changed_only"""
        try:
            filters = {}
            
            if self.signal_vars:
                filters['signal_types'] = [k for k, v in self.signal_vars.items() if v.get()]
            if self.line_vars:
                filters['lines'] = [k for k, v in self.line_vars.items() if v.get()]
            if self.wagon_vars:
                filters['wagons'] = [k for k, v in self.wagon_vars.items() if v.get()]
            if self.component_vars:
                filters['components'] = [k for k, v in self.component_vars.items() if v.get()]
            if self.hardware_vars:
                filters['hardware'] = [k for k, v in self.hardware_vars.items() if v.get()]
            
            # –£–ë–†–ê–ù–û: changed_only - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –≤ TimePanel
            # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç TimePanel
            filters['time_panel_priority'] = self._is_time_panel_priority_active()
            
            return filters
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
            return {'time_panel_priority': False}

    def set_filter_settings(self, settings: Dict[str, Any]):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            self.is_updating = True

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
            if 'signal_types' in settings and self.signal_vars:
                selected_types = settings['signal_types']
                for signal_type, var in self.signal_vars.items():
                    var.set(signal_type in selected_types)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ª–∏–Ω–∏–π
            if 'lines' in settings and self.line_vars:
                selected_lines = settings['lines']
                for line, var in self.line_vars.items():
                    var.set(line in selected_lines)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤–∞–≥–æ–Ω–æ–≤
            if 'wagons' in settings and self.wagon_vars:
                selected_wagons = settings['wagons']
                for wagon, var in self.wagon_vars.items():
                    var.set(wagon in selected_wagons)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if 'components' in settings and self.component_vars:
                selected_components = settings['components']
                for component, var in self.component_vars.items():
                    var.set(component in selected_components)

            self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        finally:
            self.is_updating = False

    def _select_all_filters(self):
        """–í—ã–±–æ—Ä –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            if self._is_time_panel_priority_active():
                self.logger.warning("‚ö†Ô∏è –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ TimePanel")
                return

            for var in self.signal_vars.values():
                var.set(True)
            for var in self.line_vars.values():
                var.set(True)
            for var in self.wagon_vars.values():
                var.set(True)
            for var in self.component_vars.values():
                var.set(True)

            self.logger.info("–í—ã–±—Ä–∞–Ω—ã –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã")
            self._on_filter_changed()

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")

    def _clear_all_filters(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            if self._is_time_panel_priority_active():
                self.logger.warning("‚ö†Ô∏è –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ TimePanel")
                return

            for var in self.signal_vars.values():
                var.set(False)
            for var in self.line_vars.values():
                var.set(False)
            for var in self.wagon_vars.values():
                var.set(False)
            for var in self.component_vars.values():
                var.set(False)

            self.logger.info("–û—á–∏—â–µ–Ω—ã –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã")
            self._on_filter_changed()

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")

    def reset_filters(self):
        """–°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤–∫–ª—é—á–µ–Ω—ã)
            for var in self.signal_vars.values():
                var.set(True)
            for var in self.line_vars.values():
                var.set(True)
            for var in self.wagon_vars.values():
                var.set(True)
            for var in self.component_vars.values():
                var.set(True)
            for var in self.hardware_vars.values():
                var.set(True)

            self.logger.info("–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ TimePanel
            if not self._is_time_panel_priority_active():
                if self.controller and hasattr(self.controller, 'apply_filters'):
                    self.controller.apply_filters(changed_only=False)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")

    def disable_changed_only_checkbox(self):
        """–£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î: –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        self.logger.warning("–ú–µ—Ç–æ–¥ disable_changed_only_checkbox —É—Å—Ç–∞—Ä–µ–ª - —á–µ–∫–±–æ–∫—Å —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –≤ TimePanel")

    def enable_changed_only_checkbox(self):
        """–£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î: –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        self.logger.warning("–ú–µ—Ç–æ–¥ enable_changed_only_checkbox —É—Å—Ç–∞—Ä–µ–ª - —á–µ–∫–±–æ–∫—Å —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –≤ TimePanel")

    def set_controller(self, controller):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        self.controller = controller
        self.logger.info("‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ FilterPanel")

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        if controller:
            self._sync_with_time_panel()

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            self.controller = None
            self.time_panel_sync = None
            self.logger.info("FilterPanel –æ—á–∏—â–µ–Ω")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ FilterPanel: {e}")

    def get_status_info(self) -> Dict[str, Any]:
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏"""
        try:
            return {
                'has_priority': self.has_priority_for_changed_filter,
                'time_panel_priority_active': self._is_time_panel_priority_active(),
                'total_signal_types': len(self.signal_vars),
                'total_lines': len(self.line_vars),
                'total_wagons': len(self.wagon_vars),
                'total_components': len(self.component_vars),
                'selected_signal_types': len([v for v in self.signal_vars.values() if v.get()]),
                'selected_lines': len([v for v in self.line_vars.values() if v.get()]),
                'selected_wagons': len([v for v in self.wagon_vars.values() if v.get()]),
                'selected_components': len([v for v in self.component_vars.values() if v.get()])
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {e}")
            return {}

    def __str__(self):
        return f"FilterPanel(priority={self.has_priority_for_changed_filter}, time_panel_priority={self._is_time_panel_priority_active()})"

    def __repr__(self):
        return self.__str__()
