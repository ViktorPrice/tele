# src/ui/components/horizontal_action_panel.py - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
"""
import tkinter as tk
from tkinter import ttk
import logging
from typing import Optional

class HorizontalActionPanel(ttk.Frame):
    """–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏"""

    def __init__(self, parent, controller=None):
        super().__init__(parent)
        self.controller = controller
        self.logger = logging.getLogger(self.__class__.__name__)
        
        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.buttons = {}
        
        self._setup_horizontal_ui()
        self.logger.info("HorizontalActionPanel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _setup_horizontal_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ UI –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏
            for i in range(4):
                self.grid_columnconfigure(i, weight=1)

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
            buttons_config = [
                ("üìä –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", self._build_plot, "–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"),
                ("üìÑ –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç", self._generate_report, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –¥–∞–Ω–Ω—ã–º"),
                ("üìã –°–æ–∑–¥–∞—Ç—å SOP", self._generate_sop, "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã"),
                ("üß™ –¢–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö", self._load_test_data, "–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            ]

            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
            for i, (text, command, tooltip) in enumerate(buttons_config):
                btn = ttk.Button(
                    self, 
                    text=text, 
                    command=command, 
                    width=18
                )
                btn.grid(row=0, column=i, padx=3, pady=5, sticky="ew")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É
                action_key = text.split()[1].lower()  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
                self.buttons[action_key] = btn
                
                # –î–æ–±–∞–≤–ª—è–µ–º tooltip (–ø–æ–¥—Å–∫–∞–∑–∫—É)
                self._create_tooltip(btn, tooltip)

            self.logger.info("UI –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å–æ–∑–¥–∞–Ω")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è UI –ø–∞–Ω–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏–π: {e}")

    def _create_tooltip(self, widget, text):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞"""
        def on_enter(event):
            try:
                # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è tooltip
                tooltip = tk.Toplevel()
                tooltip.wm_overrideredirect(True)
                tooltip.wm_geometry(f"+{event.x_root+10}+{event.y_root+10}")
                
                label = tk.Label(
                    tooltip, 
                    text=text, 
                    background="lightyellow",
                    relief="solid",
                    borderwidth=1,
                    font=("Arial", 8)
                )
                label.pack()
                
                widget.tooltip = tooltip
            except Exception:
                pass

        def on_leave(event):
            try:
                if hasattr(widget, 'tooltip'):
                    widget.tooltip.destroy()
                    delattr(widget, 'tooltip')
            except Exception:
                pass

        widget.bind("<Enter>", on_enter)
        widget.bind("<Leave>", on_leave)

    def _build_plot(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏"""
        try:
            if self.controller and hasattr(self.controller, 'build_plot'):
                self.controller.build_plot()
                self.logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É")
            else:
                self.logger.warning("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤")
                self._show_not_implemented("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

    def _generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏"""
        try:
            if self.controller and hasattr(self.controller, 'generate_report'):
                self.controller.generate_report()
                self.logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É")
            else:
                self.logger.warning("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤")
                self._show_not_implemented("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

    def _generate_sop(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ SOP –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏"""
        try:
            if self.controller and hasattr(self.controller, 'generate_sop'):
                self.controller.generate_sop()
                self.logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ SOP –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É")
            else:
                self.logger.warning("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ SOP")
                self._show_not_implemented("–°–æ–∑–¥–∞–Ω–∏–µ SOP")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SOP: {e}")

    def _load_test_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏"""
        try:
            if self.controller and hasattr(self.controller, 'load_test_data'):
                self.controller.load_test_data()
                self.logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É")
            else:
                self.logger.warning("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                self._show_not_implemented("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

    def _show_not_implemented(self, feature_name: str):
        """–ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        try:
            import tkinter.messagebox as msgbox
            msgbox.showinfo(
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
                f"{feature_name} –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.\n–ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö."
            )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def set_button_state(self, button_key: str, state: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏"""
        try:
            if button_key in self.buttons:
                self.buttons[button_key].config(state=state)
                self.logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '{button_key}' –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{state}'")
            else:
                self.logger.warning(f"–ö–Ω–æ–ø–∫–∞ '{button_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏: {e}")

    def enable_all_buttons(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫"""
        try:
            for button in self.buttons.values():
                button.config(state='normal')
            self.logger.info("–í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫: {e}")

    def disable_all_buttons(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫"""
        try:
            for button in self.buttons.values():
                button.config(state='disabled')
            self.logger.info("–í—Å–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫: {e}")

    def set_controller(self, controller):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        self.controller = controller
        self.logger.info("‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ HorizontalActionPanel")

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            self.controller = None
            self.buttons.clear()
            self.logger.info("HorizontalActionPanel –æ—á–∏—â–µ–Ω")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ HorizontalActionPanel: {e}")

    def get_status_info(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏"""
        try:
            return {
                'total_buttons': len(self.buttons),
                'enabled_buttons': len([b for b in self.buttons.values() if str(b['state']) == 'normal']),
                'controller_available': self.controller is not None,
                'buttons': list(self.buttons.keys())
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {e}")
            return {}

    def __str__(self):
        return f"HorizontalActionPanel(buttons={len(self.buttons)}, controller={'set' if self.controller else 'none'})"

    def __repr__(self):
        return self.__str__()
