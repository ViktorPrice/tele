# src/ui/components/action_panel.py - –ü–û–õ–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø
"""
–ü–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
"""
import tkinter as tk
from tkinter import ttk
import logging
from typing import Optional


class ActionPanel(ttk.Frame):
    """–ü–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏"""

    def __init__(self, parent, controller=None):
        super().__init__(parent)
        self.controller = controller
        self.logger = logging.getLogger(self.__class__.__name__)
        self.logger.info("ActionPanel: __init__ –≤—ã–∑–≤–∞–Ω")

        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.load_btn: Optional[ttk.Button] = None
        self.plot_btn: Optional[ttk.Button] = None
        self.report_btn: Optional[ttk.Button] = None
        self.sop_btn: Optional[ttk.Button] = None
        self.status_label: Optional[ttk.Label] = None

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.has_parameters_selected = False
        self.is_loading = False

        self._setup_ui()
        self.logger.info("ActionPanel: _setup_ui –∑–∞–≤–µ—Ä—à—ë–Ω")
        self.logger.info("ActionPanel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _setup_ui(self):
        self.logger.info("ActionPanel: _setup_ui –≤—ã–∑–≤–∞–Ω")
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        self.grid_columnconfigure(0, weight=1)

        # 1. –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        self._create_load_section()

        # 2. –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        self._create_action_buttons()

        # 3. –°—Ç–∞—Ç—É—Å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self._create_status_section()

        self.logger.info("ActionPanel: _setup_ui –∑–∞–≤–µ—Ä—à—ë–Ω")

    def _create_load_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏"""
        load_frame = ttk.LabelFrame(self, text="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", padding="10")
        load_frame.grid(row=0, column=0, sticky="ew", pady=(0, 10))
        load_frame.grid_columnconfigure(0, weight=1)

        self.load_btn = ttk.Button(
            load_frame,
            text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª",
            command=self._on_load_csv,
            style="Accent.TButton"
        )
        self.load_btn.grid(row=0, column=0, sticky="ew")

    def _create_action_buttons(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π"""
        actions_frame = ttk.LabelFrame(
            self, text="–î–µ–π—Å—Ç–≤–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏", padding="10")
        actions_frame.grid(row=1, column=0, sticky="ew", pady=(0, 10))
        actions_frame.grid_columnconfigure(0, weight=1)

        # –ö–Ω–æ–ø–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        self.plot_btn = ttk.Button(
            actions_frame,
            text="üìä –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫",
            command=self._on_build_plot,
            state=tk.DISABLED
        )
        self.plot_btn.grid(row=0, column=0, sticky="ew", pady=(0, 5))

        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
        self.report_btn = ttk.Button(
            actions_frame,
            text="üìÑ –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç",
            command=self._on_generate_report,
            state=tk.DISABLED
        )
        self.report_btn.grid(row=1, column=0, sticky="ew", pady=(0, 5))

        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SOP
        self.sop_btn = ttk.Button(
            actions_frame,
            text="‚öôÔ∏è –°–æ–∑–¥–∞—Ç—å SOP",
            command=self._on_generate_sop,
            state=tk.DISABLED
        )
        self.sop_btn.grid(row=2, column=0, sticky="ew")

        # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_btn = ttk.Button(
            actions_frame,
            text="üß™ –¢–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö",
            command=self._on_load_test_data,
            style="Warning.TButton"
        )
        test_btn.grid(row=3, column=0, sticky="ew", pady=(0, 5))

    def _create_status_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        status_frame = ttk.Frame(self)
        status_frame.grid(row=2, column=0, sticky="ew")
        status_frame.grid_columnconfigure(0, weight=1)

        self.status_label = ttk.Label(
            status_frame,
            text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            font=('Arial', 8),
            foreground='gray'
        )
        self.status_label.grid(row=0, column=0, sticky="ew")

    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ===

    def _on_load_csv(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª–∞"""
        try:
            if self.controller:
                self.controller.upload_csv()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV: {e}")

    def _on_build_plot(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞"""
        try:
            if self.controller:
                self.controller.build_plot()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

    def _on_generate_report(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"""
        try:
            if self.controller:
                self.controller.generate_report()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

    def _on_generate_sop(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SOP"""
        try:
            if self.controller:
                self.controller.generate_sop()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SOP: {e}")

    # === –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ ===

    def update_action_buttons_state(self, has_parameters: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π"""
        try:
            self.has_parameters_selected = has_parameters
            state = tk.NORMAL if (
                has_parameters and not self.is_loading) else tk.DISABLED

            action_buttons = [self.plot_btn, self.report_btn, self.sop_btn]
            for btn in action_buttons:
                if btn:
                    btn.config(state=state)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫: {e}")

    def update_status(self, message: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if self.status_label:
                self.status_label.config(text=message)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

    def set_loading_state(self, loading: bool):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏"""
        try:
            self.is_loading = loading

            # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
            load_state = tk.DISABLED if loading else tk.NORMAL
            if self.load_btn:
                self.load_btn.config(state=load_state)

            # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
            self.update_action_buttons_state(self.has_parameters_selected)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

    def enable(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏"""
        self.set_loading_state(False)

    def disable(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏"""
        self.set_loading_state(True)

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            self.controller = None
            self.logger.info("ActionPanel –æ—á–∏—â–µ–Ω")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ ActionPanel: {e}")

    def _on_load_test_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if self.controller and hasattr(self.controller, 'load_test_data'):
                self.controller.load_test_data()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
