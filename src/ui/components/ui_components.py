"""
–ò–µ—Ä–∞—Ä—Ö–∏—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –±–∞–∑–æ–≤—ã–º –∫–ª–∞—Å—Å–æ–º –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞–º–∏
–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π SmartFilterPanel
"""
import tkinter as tk
from tkinter import ttk
import logging
from typing import Dict, Any, Optional, List, Callable
from datetime import datetime
import time
from abc import ABC, abstractmethod

class UIComponentsBase(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""

    def __init__(self, root: tk.Tk, controller):
        self.root = root
        self.controller = controller
        self.logger = logging.getLogger(self.__class__.__name__)

        # –û–±—â–∏–µ UI –ø–∞–Ω–µ–ª–∏
        self.time_panel: Optional[Any] = None
        self.filter_panel: Optional[Any] = None
        self.parameter_panel: Optional[Any] = None
        self.action_panel: Optional[Any] = None
        self.plot_panel: Optional[Any] = None
        self.diagnostic_panel: Optional[Any] = None

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        self.main_content_frame: Optional[ttk.Frame] = None
        self.left_panel_frame: Optional[ttk.Frame] = None
        self.right_panel_frame: Optional[ttk.Frame] = None

        # –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI
        self.is_initialized = False
        self.is_loading = False

        # –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self._ui_cache = {}
        self._last_update_time = 0

        # Callbacks –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏
        self._event_callbacks: Dict[str, List[Callable]] = {}

    @abstractmethod
    def _setup_main_layout(self):
        """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–∞–∫–µ—Ç–∞"""
        pass

    @abstractmethod
    def _create_ui_panels(self):
        """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è UI –ø–∞–Ω–µ–ª–µ–π"""
        pass

    def _setup_bindings(self):
        """–û–±—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
        try:
            # –°–≤—è–∑—å –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            if self.time_panel and hasattr(self.time_panel, 'on_time_range_changed'):
                self.time_panel.on_time_range_changed = self._on_time_range_changed

            # –°–≤—è–∑—å –º–µ–∂–¥—É —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            if self.filter_panel and self.parameter_panel:
                if hasattr(self.filter_panel, 'observer'):
                    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ Observer
                    self.filter_panel.observer.subscribe(self._on_filters_changed)

            # –°–≤—è–∑—å –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            if self.parameter_panel and self.action_panel:
                if hasattr(self.parameter_panel, 'on_selection_changed'):
                    self.parameter_panel.on_selection_changed = self._on_parameter_selection_changed

            # –°–≤—è–∑—å —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–Ω–µ–ª—å—é
            if self.diagnostic_panel and hasattr(self.diagnostic_panel, 'on_diagnostic_filter_changed'):
                self.diagnostic_panel.on_diagnostic_filter_changed = self._on_diagnostic_filters_changed

            self.logger.info("–°–≤—è–∑–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≤—è–∑–µ–π: {e}")

    def _setup_event_system(self):
        """–û–±—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å–æ–±—ã—Ç–∏–π"""
        try:
            event_types = [
                'parameter_updated', 'filter_changed', 'time_changed',
                'selection_changed', 'data_loaded', 'plot_created',
                'diagnostic_filter_changed'
            ]

            for event_type in event_types:
                self._event_callbacks[event_type] = []

            self.logger.info("–°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Å–æ–±—ã—Ç–∏–π: {e}")

    # === –û–ë–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ===

    def _on_filters_changed(self, filter_state):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ SmartFilterPanel"""
        try:
            if self.controller:
                # SmartFilterPanel —É–∂–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ —Å–≤–æ–π observer
                pass
            self.emit_event('filter_changed', filter_state.to_dict())
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")

    def _on_time_range_changed(self, from_time: str, to_time: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
        try:
            self.logger.info(f"–í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑–º–µ–Ω–µ–Ω: {from_time} - {to_time}")
            self.emit_event('time_changed', {'from_time': from_time, 'to_time': to_time})
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")

    def _on_parameter_selection_changed(self, selected_count: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            if self.action_panel and hasattr(self.action_panel, 'update_action_buttons_state'):
                self.action_panel.update_action_buttons_state(selected_count > 0)

            self.emit_event('selection_changed', {'count': selected_count})
            self.logger.debug(f"–í—ã–±—Ä–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {selected_count}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞: {e}")

    def _on_diagnostic_filters_changed(self, diagnostic_filters: Dict[str, List[str]]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            self.logger.info(f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑–º–µ–Ω–µ–Ω—ã: {diagnostic_filters}")
            
            if self.controller and hasattr(self.controller, 'apply_diagnostic_filters'):
                self.controller.apply_diagnostic_filters(diagnostic_filters)
            
            self.emit_event('diagnostic_filter_changed', {'filters': diagnostic_filters})
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")

    # === –û–ë–©–ò–ï –ú–ï–¢–û–î–´ –°–û–ë–´–¢–ò–ô ===

    def emit_event(self, event_type: str, data: Any = None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è"""
        try:
            if event_type in self._event_callbacks:
                callback_count = len(self._event_callbacks[event_type])
                if callback_count > 0:
                    self.logger.debug(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è '{event_type}' –¥–ª—è {callback_count} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
                
                for callback in self._event_callbacks[event_type]:
                    try:
                        callback(data)
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –≤ callback {callback}: {e}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è {event_type}: {e}")

    def register_event_callback(self, event_type: str, callback: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –¥–ª—è —Å–æ–±—ã—Ç–∏—è"""
        try:
            if event_type not in self._event_callbacks:
                self._event_callbacks[event_type] = []
            
            self._event_callbacks[event_type].append(callback)
            self.logger.debug(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω callback –¥–ª—è —Å–æ–±—ã—Ç–∏—è '{event_type}'")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ callback: {e}")

    # === –û–ë–©–ò–ï –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ ===

    def set_controller(self, controller):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –≤–æ –≤—Å–µ—Ö –ø–∞–Ω–µ–ª—è—Ö"""
        try:
            self.controller = controller

            panels_order = [
                ('time_panel', self.time_panel),
                ('filter_panel', self.filter_panel),
                ('parameter_panel', self.parameter_panel),
                ('action_panel', self.action_panel),
                ('diagnostic_panel', self.diagnostic_panel)
            ]

            for panel_name, panel in panels_order:
                if panel and hasattr(panel, 'set_controller'):
                    panel.set_controller(controller)
                    self.logger.debug(f"–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {panel_name}")

            self.logger.info("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –≤–æ –≤—Å–µ—Ö –ø–∞–Ω–µ–ª—è—Ö")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞: {e}")

    def update_parameters(self, parameters: List[Dict[str, Any]]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–æ –≤—Å–µ—Ö –ø–∞–Ω–µ–ª—è—Ö"""
        try:
            self.logger.info(f"üìä UIComponents.update_parameters –≤—ã–∑–≤–∞–Ω —Å {len(parameters)} –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")

            if not self.parameter_panel:
                self.logger.error("‚ùå parameter_panel –Ω–µ —Å–æ–∑–¥–∞–Ω!")
                return

            if not hasattr(self.parameter_panel, 'update_parameters'):
                self.logger.error("‚ùå parameter_panel –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ update_parameters!")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            self.parameter_panel.update_parameters(parameters)
            self.logger.info("‚úÖ parameter_panel.update_parameters –≤—ã–ø–æ–ª–Ω–µ–Ω")

            # –û–±–Ω–æ–≤–ª—è–µ–º SmartFilterPanel
            if self.filter_panel:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤
                signal_types = list(set(p.get('signal_type', '') for p in parameters if p.get('signal_type')))
                if hasattr(self.filter_panel, 'update_signal_type_checkboxes'):
                    self.filter_panel.update_signal_type_checkboxes(signal_types)
                    self.logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã —Ç–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signal_types)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
                lines = list(set(p.get('line', '') for p in parameters if p.get('line')))
                if hasattr(self.filter_panel, 'update_line_checkboxes'):
                    self.filter_panel.update_line_checkboxes(lines)
                    self.logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –ª–∏–Ω–∏–∏: {len(lines)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä–∞ –≤–∞–≥–æ–Ω–æ–≤
                wagons = list(set(str(p.get('wagon', '')) for p in parameters if p.get('wagon')))
                if hasattr(self.filter_panel, 'update_wagon_checkboxes'):
                    self.filter_panel.update_wagon_checkboxes(wagons)
                    self.logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –≤–∞–≥–æ–Ω—ã: {len(wagons)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –ø–∞–Ω–µ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–∞—è)
            if self.diagnostic_panel and hasattr(self.diagnostic_panel, 'update_parameters'):
                self.diagnostic_panel.update_parameters(parameters)
                self.logger.debug("–û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            self.emit_event('parameter_updated', {'count': len(parameters)})

            self.logger.info(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ UI: {len(parameters)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            import traceback
            traceback.print_exc()

    def get_selected_parameters(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            if self.parameter_panel and hasattr(self.parameter_panel, 'get_selected_parameters'):
                return self.parameter_panel.get_selected_parameters()
            return []
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            return []

    def start_processing(self, message: str = "–û–±—Ä–∞–±–æ—Ç–∫–∞..."):
        """–ò–Ω–¥–∏–∫–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            self.is_loading = True
            
            panels = [self.time_panel, self.filter_panel, self.action_panel]
            for panel in panels:
                if panel and hasattr(panel, 'disable'):
                    panel.disable()

            if hasattr(self.root, 'config'):
                self.root.config(cursor="wait")

            self.logger.debug(f"–ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞: {message}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

    def stop_processing(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            self.is_loading = False
            
            panels = [self.time_panel, self.filter_panel, self.action_panel]
            for panel in panels:
                if panel and hasattr(panel, 'enable'):
                    panel.enable()

            if hasattr(self.root, 'config'):
                self.root.config(cursor="")

            self.logger.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

    def get_component(self, component_name: str):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º"""
        try:
            component_mapping = {
                'time_panel': self.time_panel,
                'filter_panel': self.filter_panel,
                'parameter_panel': self.parameter_panel,
                'action_panel': self.action_panel,
                'plot_panel': self.plot_panel,
                'diagnostic_panel': self.diagnostic_panel
            }
            
            return component_mapping.get(component_name)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ {component_name}: {e}")
            return None

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            self.logger.info("–ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ UIComponents")

            self.stop_processing()

            panels = [
                ('diagnostic_panel', self.diagnostic_panel),
                ('plot_panel', self.plot_panel),
                ('action_panel', self.action_panel),
                ('parameter_panel', self.parameter_panel),
                ('filter_panel', self.filter_panel),
                ('time_panel', self.time_panel)
            ]

            for panel_name, panel in panels:
                if panel and hasattr(panel, 'cleanup'):
                    try:
                        panel.cleanup()
                        self.logger.debug(f"–û—á–∏—â–µ–Ω {panel_name}")
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {panel_name}: {e}")

            self._ui_cache.clear()
            self._event_callbacks.clear()

            # –û–±–Ω—É–ª—è–µ–º —Å—Å—ã–ª–∫–∏
            self.time_panel = None
            self.filter_panel = None
            self.parameter_panel = None
            self.action_panel = None
            self.plot_panel = None
            self.diagnostic_panel = None
            self.controller = None

            self.is_initialized = False

            self.logger.info("UIComponents –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω—ã")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ UIComponents: {e}")

    # === –û–ë–©–ò–ï FALLBACK –ú–ï–¢–û–î–´ ===

    def _create_fallback_time_panel(self, parent):
        """Fallback —Å–æ–∑–¥–∞–Ω–∏–µ TimePanel"""
        try:
            from .time_panel import TimePanel
            self.time_panel = TimePanel(parent, self.controller)
            self.time_panel.grid(row=0, column=0, sticky="ew")
            self.logger.info("‚úÖ TimePanel —Å–æ–∑–¥–∞–Ω (fallback)")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è TimePanel: {e}")

    def _create_fallback_filter_panel(self, parent):
        """Fallback —Å–æ–∑–¥–∞–Ω–∏–µ FilterPanel"""
        try:
            # –£–¥–∞–ª–µ–Ω fallback –∏–º–ø–æ—Ä—Ç —Å—Ç–∞—Ä–æ–π –ø–∞–Ω–µ–ª–∏ filter_panel, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
            self.logger.warning("Fallback FilterPanel –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ SmartFilterPanel")
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è FilterPanel: {e}")

    def _create_fallback_parameter_panel(self, parent):
        """Fallback —Å–æ–∑–¥–∞–Ω–∏–µ ParameterPanel"""
        try:
            from .parameter_panel import ParameterPanel
            self.parameter_panel = ParameterPanel(parent, self.controller)
            self.parameter_panel.grid(row=0, column=0, sticky="nsew")
            self.logger.info("‚úÖ ParameterPanel —Å–æ–∑–¥–∞–Ω (fallback)")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ParameterPanel: {e}")
            import traceback
            traceback.print_exc()

    def _create_fallback_action_panel(self, parent):
        """Fallback —Å–æ–∑–¥–∞–Ω–∏–µ ActionPanel"""
        try:
            from .action_panel import ActionPanel
            self.action_panel = ActionPanel(parent, self.controller)
            self.action_panel.grid(row=0, column=0, sticky="ew")
            self.logger.info("‚úÖ ActionPanel —Å–æ–∑–¥–∞–Ω (fallback)")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ActionPanel: {e}")

class UIComponentsCompact(UIComponentsBase):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º UI —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π SmartFilterPanel"""

    def __init__(self, root: tk.Tk, controller):
        super().__init__(root, controller)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        self._setup_main_layout()
        self._create_ui_panels()
        self._setup_bindings()
        self._setup_event_system()

        self.is_initialized = True
        self.logger.info("UIComponentsCompact –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å SmartFilterPanel")

    def _setup_main_layout(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –º–∞–∫–µ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º PanedWindow –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            self.main_content_frame = ttk.PanedWindow(
                self.root, orient=tk.HORIZONTAL)
            self.main_content_frame.grid(
                row=1, column=0, sticky="nsew", padx=3, pady=3)
            self.root.grid_rowconfigure(1, weight=1)
            self.root.grid_columnconfigure(0, weight=1)

            # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è)
            self.left_panel_frame = ttk.Frame(self.main_content_frame)
            self.left_panel_frame.grid_columnconfigure(0, weight=1)

            # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤)
            self.right_panel_frame = ttk.Frame(self.main_content_frame)
            self.right_panel_frame.grid_rowconfigure(0, weight=1)
            self.right_panel_frame.grid_columnconfigure(0, weight=1)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª–∏ –≤ PanedWindow
            self.main_content_frame.add(self.left_panel_frame, weight=1)
            self.main_content_frame.add(self.right_panel_frame, weight=3)

            self.logger.info("–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –º–∞–∫–µ—Ç —Å–æ–∑–¥–∞–Ω")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –º–∞–∫–µ—Ç–∞: {e}")
            raise

    def _create_ui_panels(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ UI –ø–∞–Ω–µ–ª–µ–π —Å SmartFilterPanel"""
        try:
            self.logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π —Å SmartFilterPanel")
            
            # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–µ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            self.left_panel_frame.grid_rowconfigure(0, weight=0)  # time_panel
            self.left_panel_frame.grid_rowconfigure(1, weight=0)  # smart_filter_panel
            self.left_panel_frame.grid_rowconfigure(2, weight=1)  # parameter_panel ‚úÖ
            self.left_panel_frame.grid_rowconfigure(3, weight=0)  # action_panel

            # 1. –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –ø–∞–Ω–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏ (—Å—Ç—Ä–æ–∫–∞ 0)
            self._create_compact_time_panel()

            # 2. –ù–û–í–ê–Ø SmartFilterPanel (—Å—Ç—Ä–æ–∫–∞ 1) - –∑–∞–º–µ–Ω—è–µ—Ç 3 —Å—Ç–∞—Ä—ã–µ –ø–∞–Ω–µ–ª–∏
            self._create_smart_filter_panel()

            # 3. –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Å—Ç—Ä–æ–∫–∞ 2) - –ò–°–ü–†–ê–í–õ–ï–ù–ê
            self._create_horizontal_parameter_panel()

            # 4. –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π (—Å—Ç—Ä–æ–∫–∞ 3)
            self._create_horizontal_action_panel()

            # 5. –ü–∞–Ω–µ–ª—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
            self._create_plot_visualization_panel()

            self.logger.info("–í—Å–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —Å SmartFilterPanel")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–∫—Ç–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π: {e}")
            raise

    def _create_compact_time_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            time_frame = ttk.LabelFrame(
                self.left_panel_frame,
                text="‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω",
                padding="3"
            )
            time_frame.grid(row=0, column=0, sticky="ew", pady=(0, 3))
            time_frame.grid_columnconfigure(0, weight=1)

            try:
                from .compact_time_panel import CompactTimePanel
                self.time_panel = CompactTimePanel(time_frame, self.controller)
                self.time_panel.grid(row=0, column=0, sticky="ew")
                self.logger.info("‚úÖ CompactTimePanel —Å–æ–∑–¥–∞–Ω")
            except ImportError:
                self._create_fallback_time_panel(time_frame)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")

    def _create_smart_filter_panel(self):
        """–ù–û–í–û–ï: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π SmartFilterPanel"""
        try:
            filter_frame = ttk.LabelFrame(
                self.left_panel_frame,
                text="üîç –£–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã",
                padding="3"
            )
            filter_frame.grid(row=1, column=0, sticky="ew", pady=(0, 3))
            filter_frame.grid_columnconfigure(0, weight=1)

            try:
                from .smart_filter_panel import SmartFilterPanel
                self.filter_panel = SmartFilterPanel(filter_frame, self.controller)
                self.filter_panel.grid(row=0, column=0, sticky="ew")
                self.logger.info("‚úÖ SmartFilterPanel —Å–æ–∑–¥–∞–Ω - –∑–∞–º–µ–Ω–∏–ª 3 —Å—Ç–∞—Ä—ã–µ –ø–∞–Ω–µ–ª–∏")
            except ImportError as e:
                self.logger.warning(f"SmartFilterPanel –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                # Fallback –∫ CompactFilterPanel
                try:
                    from .compact_filter_panel import CompactFilterPanel
                    self.filter_panel = CompactFilterPanel(filter_frame, self.controller)
                    self.filter_panel.grid(row=0, column=0, sticky="ew")
                    self.logger.info("‚úÖ CompactFilterPanel —Å–æ–∑–¥–∞–Ω (fallback)")
                except ImportError:
                    self._create_fallback_filter_panel(filter_frame)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SmartFilterPanel: {e}")

    def _create_horizontal_parameter_panel(self):
        """–ö–†–ò–¢–ò–ß–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            parameter_frame = ttk.LabelFrame(
                self.left_panel_frame,
                text="üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏",
                padding="3"
            )
            parameter_frame.grid(row=2, column=0, sticky="nsew", pady=(0, 3))
            parameter_frame.grid_columnconfigure(0, weight=1)
            parameter_frame.grid_rowconfigure(0, weight=1)

            # –ö–†–ò–¢–ò–ß–ù–û: –≠—Ç–æ—Ç –≤–µ—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—ã—à–µ –≤ _create_ui_panels()
            # self.left_panel_frame.grid_rowconfigure(2, weight=1)

            try:
                from .horizontal_parameter_panel import HorizontalParameterPanel
                self.parameter_panel = HorizontalParameterPanel(parameter_frame, self.controller)
                self.parameter_panel.grid(row=0, column=0, sticky="nsew")
                self.logger.info("‚úÖ HorizontalParameterPanel —Å–æ–∑–¥–∞–Ω")
            except ImportError:
                self._create_fallback_parameter_panel(parameter_frame)

            # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏
            parameter_frame.update_idletasks()
            self.left_panel_frame.update_idletasks()

            self.logger.info("‚úÖ –ü–∞–Ω–µ–ª—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")

    def _create_horizontal_action_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        try:
            action_frame = ttk.LabelFrame(
                self.left_panel_frame,
                text="üöÄ –î–µ–π—Å—Ç–≤–∏—è",
                padding="3"
            )
            action_frame.grid(row=3, column=0, sticky="ew", pady=(0, 3))
            action_frame.grid_columnconfigure(0, weight=1)

            try:
                from .horizontal_action_panel import HorizontalActionPanel
                self.action_panel = HorizontalActionPanel(action_frame, self.controller)
                self.action_panel.grid(row=0, column=0, sticky="ew")
                self.logger.info("‚úÖ HorizontalActionPanel —Å–æ–∑–¥–∞–Ω")
            except ImportError:
                self._create_fallback_action_panel(action_frame)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏–π: {e}")

    def _create_plot_visualization_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
            plot_label = ttk.Label(
                self.right_panel_frame,
                text="üìä –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è",
                font=('Arial', 10, 'bold')
            )
            plot_label.grid(row=0, column=0, sticky="ew", pady=(0, 5))

            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            plot_container = ttk.Frame(self.right_panel_frame)
            plot_container.grid(row=1, column=0, sticky="nsew")
            plot_container.grid_rowconfigure(0, weight=1)
            plot_container.grid_columnconfigure(0, weight=1)

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–∞ –¥–ª—è –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
            self.right_panel_frame.grid_rowconfigure(1, weight=1)

            try:
                from .plot_visualization_panel import PlotVisualizationPanel
                self.plot_panel = PlotVisualizationPanel(plot_container, self.controller)
                self.plot_panel.grid(row=0, column=0, sticky="nsew")
                self.logger.info("‚úÖ –ü–∞–Ω–µ–ª—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–∞")
            except ImportError:
                self._create_plot_panel_placeholder(plot_container)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

    def _create_plot_panel_placeholder(self, container):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ –ø–∞–Ω–µ–ª–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        placeholder_frame = ttk.Frame(container)
        placeholder_frame.grid(row=0, column=0, sticky="nsew")
        placeholder_frame.grid_rowconfigure(0, weight=1)
        placeholder_frame.grid_columnconfigure(0, weight=1)

        info_text = """üìä –ü–ê–ù–ï–õ–¨ –ì–†–ê–§–ò–ö–û–í
        
–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è:
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
‚Ä¢ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
‚Ä¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö

–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–µ–≤–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ
"–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫" –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"""

        info_label = tk.Label(
            placeholder_frame,
            text=info_text,
            font=('Arial', 11),
            justify=tk.CENTER,
            fg='#666666',
            bg='#f8f9fa'
        )
        info_label.grid(row=0, column=0, padx=20, pady=20)

    def __str__(self):
        return f"UIComponentsCompact(initialized={self.is_initialized}, smart_filter=True)"


# –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
class UIComponents(UIComponentsCompact):
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ - –Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å SmartFilterPanel"""
    
    def __init__(self, root: tk.Tk, controller):
        super().__init__(root, controller)
        self.logger.info("UIComponents –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å SmartFilterPanel (—Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)")

    def __str__(self):
        return f"UIComponents(mode=smart_compact, initialized={self.is_initialized})"
