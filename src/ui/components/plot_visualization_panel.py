"""
–ü–∞–Ω–µ–ª—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Use Cases –∏ Clean Architecture
"""
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import logging
from typing import Dict, Any, Optional, List, Tuple
from datetime import datetime
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
from ...core.application.use_cases.filter_parameters_use_case import (
    FilterParametersUseCase, FilterParametersRequest, FilterParametersResponse
)
from ...core.application.use_cases.plot_generation_use_case import (
    PlotGenerationUseCase, PlotGenerationRequest
)
from ...infrastructure.plotting.adapters.tkinter_plot_adapter import TkinterPlotAdapter
from ...infrastructure.plotting.core.plot_builder import PlotBuilder


class PlotVisualizationPanel(ttk.Frame):
    """–ü–∞–Ω–µ–ª—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""

    def __init__(self, parent, controller=None):
        super().__init__(parent)
        self.controller = controller
        self.logger = logging.getLogger(self.__class__.__name__)

        # Use Cases
        self.filter_use_case: Optional[FilterParametersUseCase] = None
        self.plot_use_case: Optional[PlotGenerationUseCase] = None

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        self.plot_adapter = TkinterPlotAdapter()
        self.plot_builder: Optional[PlotBuilder] = None

        # UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.notebook: Optional[ttk.Notebook] = None
        self.control_frame: Optional[ttk.Frame] = None
        self.plot_tabs: Dict[str, Dict[str, Any]] = {}

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.current_session_id: Optional[str] = None
        self.is_building_plots = False

        self._setup_ui()
        self._setup_use_cases()

        self.logger.info("PlotVisualizationPanel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        self.grid_rowconfigure(1, weight=1)
        self.grid_columnconfigure(0, weight=1)

        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self._create_control_panel()

        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self._create_plot_area()

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self._create_context_menu()

    def _create_control_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
        self.control_frame = ttk.LabelFrame(
            self, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏", padding="10")
        self.control_frame.grid(row=0, column=0, sticky="ew", padx=5, pady=5)
        self.control_frame.grid_columnconfigure(1, weight=1)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ttk.Frame(self.control_frame)
        buttons_frame.grid(row=0, column=0, columnspan=3,
                           sticky="ew", pady=(0, 10))

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        ttk.Button(
            buttons_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏",
            command=self._refresh_all_plots
        ).pack(side=tk.LEFT, padx=(0, 5))

        ttk.Button(
            buttons_frame,
            text="üìä –ê–≤—Ç–æ-–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞",
            command=self._auto_group_plots
        ).pack(side=tk.LEFT, padx=(0, 5))

        ttk.Button(
            buttons_frame,
            text="üíæ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö",
            command=self._export_all_plots
        ).pack(side=tk.LEFT, padx=(0, 5))

        ttk.Button(
            buttons_frame,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ",
            command=self._clear_all_plots
        ).pack(side=tk.LEFT, padx=(0, 5))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        settings_frame = ttk.Frame(self.control_frame)
        settings_frame.grid(row=1, column=0, columnspan=3, sticky="ew")
        settings_frame.grid_columnconfigure(1, weight=1)

        # –¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞
        ttk.Label(settings_frame, text="–¢–∏–ø:").grid(
            row=0, column=0, sticky="w")
        self.plot_type_var = tk.StringVar(value="step")
        plot_type_combo = ttk.Combobox(
            settings_frame,
            textvariable=self.plot_type_var,
            values=["line", "step", "scatter"],
            state="readonly",
            width=10
        )
        plot_type_combo.grid(row=0, column=1, sticky="w", padx=(5, 0))

        # –ú–∞–∫—Å–∏–º—É–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
        ttk.Label(settings_frame, text="–ú–∞–∫—Å. –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:").grid(
            row=0, column=2, sticky="w", padx=(20, 0))
        self.max_params_var = tk.IntVar(value=10)
        max_params_spin = tk.Spinbox(
            settings_frame,
            from_=1, to=50,
            textvariable=self.max_params_var,
            width=5
        )
        max_params_spin.grid(row=0, column=3, sticky="w", padx=(5, 0))

        # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.auto_update_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(
            settings_frame,
            text="–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
            variable=self.auto_update_var
        ).grid(row=0, column=4, sticky="w", padx=(20, 0))

    def _create_plot_area(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        # Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(self)
        self.notebook.grid(row=1, column=0, sticky="nsew", padx=5, pady=5)

        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.notebook.bind("<Button-3>", self._on_tab_right_click)
        self.notebook.bind("<<NotebookTabChanged>>", self._on_tab_changed)

        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
        self._create_welcome_tab()

    def _create_welcome_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏"""
        welcome_frame = ttk.Frame(self.notebook)
        self.notebook.add(welcome_frame, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å")

        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        content_frame = ttk.Frame(welcome_frame)
        content_frame.pack(expand=True, fill=tk.BOTH)
        content_frame.grid_rowconfigure(0, weight=1)
        content_frame.grid_columnconfigure(0, weight=1)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        info_text = """
        üéØ –ê–ù–ê–õ–ò–ó–ê–¢–û–† –¢–ï–õ–ï–ú–ï–¢–†–ò–ò TRAMM
        
        üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        üîß –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        üìà –ù–∞–∂–º–∏—Ç–µ "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        
        ‚ö° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
        ‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
        ‚Ä¢ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ
        ‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —Ç–∏–ø–∞–º
        ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        ‚Ä¢ –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        
        üöÄ –ù–∞—á–Ω–∏—Ç–µ —Å –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª–∞!
        –ù–µ –∑–∞–±—É–¥—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ csv –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        W_BUIK_TRAIN_NUM - –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –∏ –ª–∏–Ω–∏–∏ –ú–¶–î
        DW_CURRENT_ID_WAGON - –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ–¥—É—â–µ–π –≥–æ–ª–æ–≤—ã –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∞–≥–æ–Ω–æ–≤
        W_TIMESTAMP_YEAR_
        BY_TIMESTAMP_DAY_
        BY_TIMESTAMP_MONTH_
        BY_TIMESTAMP_MINUTE_
        BY_TIMESTAMP_HOUR_
        BY_TIMESTAMP_SMALLSECOND_
        BY_TIMESTAMP_SECOND_
        –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        """

        info_label = tk.Label(
            content_frame,
            text=info_text,
            font=('Arial', 11),
            justify=tk.CENTER,
            fg='#555555',
            bg='white'
        )
        info_label.grid(row=0, column=0, padx=20, pady=20)

    def _create_context_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –≤–∫–ª–∞–¥–æ–∫"""
        self.context_menu = tk.Menu(self, tearoff=0)
        self.context_menu.add_command(
            label="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=self._refresh_current_plot)
        self.context_menu.add_command(
            label="üíæ –≠–∫—Å–ø–æ—Ä—Ç", command=self._export_current_plot)
        self.context_menu.add_separator()
        self.context_menu.add_command(
            label="üìã –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å", command=self._duplicate_current_plot)
        self.context_menu.add_command(
            label="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", command=self._configure_current_plot)
        self.context_menu.add_separator()
        self.context_menu.add_command(
            label="‚ùå –ó–∞–∫—Ä—ã—Ç—å", command=self._close_current_plot)

    def _setup_use_cases(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Use Cases"""
        try:
            if self.controller and hasattr(self.controller, 'model'):
                model = self.controller.model

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Use Cases
                if hasattr(model, 'parameter_repository') and hasattr(model, 'filtering_service'):
                    self.filter_use_case = FilterParametersUseCase(
                        model.parameter_repository,
                        model.filtering_service
                    )

                if hasattr(model, 'data_loader'):
                    self.plot_builder = PlotBuilder(model.data_loader)

                self.logger.info("Use Cases –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            else:
                self.logger.warning(
                    "–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Use Cases")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Use Cases: {e}")

    # === –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –ü–û–°–¢–†–û–ï–ù–ò–Ø –ì–†–ê–§–ò–ö–û–í ===

    def build_plots_for_parameters(self, parameters: List[Dict[str, Any]],
                                   start_time: datetime, end_time: datetime):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            if self.is_building_plots:
                self.logger.warning("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
                return

            if not parameters:
                self._show_warning(
                    "–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
                return

            self.is_building_plots = True
            self._show_building_progress(True)

            # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
            self.logger.info(
                f"–ù–∞—á–∞–ª–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è {len(parameters)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            self.logger.info(f"–í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {start_time} - {end_time}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º PlotBuilder
            if not self.plot_builder:
                self.logger.error("PlotBuilder –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                self._show_error("PlotBuilder –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º data_loader
            if not hasattr(self.plot_builder, 'data_loader') or not self.plot_builder.data_loader:
                self.logger.error("DataLoader –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PlotBuilder")
                self._show_error("DataLoader –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
            has_data = self.plot_builder._has_data()
            self.logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {has_data}")

            if not has_data:
                # –ü—ã—Ç–∞–µ–º—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É
                data_loader = self.plot_builder.data_loader
                self.logger.info(f"DataLoader —Ç–∏–ø: {type(data_loader)}")
                self.logger.info(
                    f"DataLoader –∞—Ç—Ä–∏–±—É—Ç—ã: {[attr for attr in dir(data_loader) if not attr.startswith('_')]}")

                if hasattr(data_loader, 'data'):
                    self.logger.info(
                        f"data_loader.data: {type(data_loader.data)}")
                    if hasattr(data_loader.data, 'shape'):
                        self.logger.info(
                            f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {data_loader.data.shape}")

                if hasattr(data_loader, 'parameters'):
                    self.logger.info(
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {len(data_loader.parameters) if data_loader.parameters else 0}")

            # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
            self._remove_welcome_tab()

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            plot_groups = self._group_parameters_for_plots(parameters)
            self.logger.info(f"–°–æ–∑–¥–∞–Ω–æ –≥—Ä—É–ø–ø –≥—Ä–∞—Ñ–∏–∫–æ–≤: {len(plot_groups)}")

            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
            success_count = 0
            for group_name, group_params in plot_groups.items():
                try:
                    self._create_plot_tab(
                        group_name, group_params, start_time, end_time)
                    success_count += 1
                except Exception as e:
                    self.logger.error(
                        f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ '{group_name}': {e}")
                    continue

            if success_count > 0:
                self.logger.info(
                    f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {success_count} –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏–∑ {len(plot_groups)}")
            else:
                self._show_error(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ª–æ–≥–∏.")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
            import traceback
            traceback.print_exc()
            self._show_error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
        finally:
            self.is_building_plots = False
            self._show_building_progress(False)

    def _group_parameters_for_plots(self, parameters: List[Dict[str, Any]]) -> Dict[str, List[Dict[str, Any]]]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        try:
            max_params = self.max_params_var.get()
            groups = {}

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø—É –¥–∞–Ω–Ω—ã—Ö
            type_groups = {}
            for param in parameters:
                signal_type = param.get('signal_type', 'Unknown')
                if signal_type not in type_groups:
                    type_groups[signal_type] = []
                type_groups[signal_type].append(param)

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
            for signal_type, type_params in type_groups.items():
                if len(type_params) <= max_params:
                    # –ì—Ä—É–ø–ø–∞ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–∏–Ω –≥—Ä–∞—Ñ–∏–∫
                    groups[f"{signal_type} —Å–∏–≥–Ω–∞–ª—ã"] = type_params
                else:
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã
                    for i in range(0, len(type_params), max_params):
                        subgroup = type_params[i:i + max_params]
                        group_num = (i // max_params) + 1
                        groups[f"{signal_type} —Å–∏–≥–Ω–∞–ª—ã (—á–∞—Å—Ç—å {group_num})"] = subgroup

            return groups

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            # Fallback - –æ–¥–∏–Ω –≥—Ä–∞—Ñ–∏–∫ —Å–æ –≤—Å–µ–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            return {"–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã": parameters[:self.max_params_var.get()]}

    def _create_plot_tab(self, tab_name: str, parameters: List[Dict[str, Any]],
                         start_time: datetime, end_time: datetime):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º"""
        try:
            if not self.plot_builder:
                self.logger.error("PlotBuilder –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return

            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ PlotBuilder
            figure, ax = self.plot_builder.build_plot(
                parameters, start_time, end_time,
                title=tab_name, strategy=self.plot_type_var.get()
            )

            # –°–æ–∑–¥–∞–Ω–∏–µ UI –≤–∏–¥–∂–µ—Ç–∞ —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä
            canvas, info_panel = self.plot_adapter.create_plot_widget(
                self.notebook, figure, tab_name, parameters
            )

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è canvas
            plot_container = canvas.get_tk_widget().master

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –≤ notebook
            self.notebook.add(plot_container, text=tab_name)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∫–ª–∞–¥–∫–µ
            self.plot_tabs[tab_name] = {
                'parameters': parameters,
                'start_time': start_time,
                'end_time': end_time,
                'figure': figure,
                'canvas': canvas,
                'info_panel': info_panel,
                'container': plot_container
            }

            # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
            self.notebook.select(plot_container)

            self.logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞: {tab_name}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

    def _remove_welcome_tab(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏"""
        try:
            for i, tab_id in enumerate(self.notebook.tabs()):
                tab_text = self.notebook.tab(tab_id, "text")
                if tab_text == "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å":
                    self.notebook.forget(i)
                    break
        except Exception as e:
            self.logger.debug(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏: {e}")

    # === –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ì–†–ê–§–ò–ö–ê–ú–ò ===

    def _refresh_all_plots(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        try:
            if not self.plot_tabs:
                return

            for tab_name, tab_info in self.plot_tabs.items():
                self._refresh_plot(tab_name, tab_info)

            self.logger.info("–í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")

    def _refresh_plot(self, tab_name: str, tab_info: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞"""
        try:
            if not self.plot_builder:
                return

            # –ü–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            figure, ax = self.plot_builder.build_plot(
                tab_info['parameters'],
                tab_info['start_time'],
                tab_info['end_time'],
                title=tab_name,
                strategy=self.plot_type_var.get()
            )

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä
            self.plot_adapter.update_plot(tab_name, figure)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            tab_info['figure'] = figure

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ {tab_name}: {e}")

    def _auto_group_plots(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        try:
            if not self.controller:
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            selected_params = self._get_selected_parameters()
            if not selected_params:
                self._show_warning("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
            start_time, end_time = self._get_time_range()
            if not start_time or not end_time:
                self._show_warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω")
                return

            # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏
            self._clear_all_plots()

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
            self.build_plots_for_parameters(
                selected_params, start_time, end_time)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: {e}")

    def _export_all_plots(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        try:
            if not self.plot_tabs:
                self._show_warning("–ù–µ—Ç –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return

            # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            folder_path = filedialog.askdirectory(
                title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            if not folder_path:
                return

            # –≠–∫—Å–ø–æ—Ä—Ç –∫–∞–∂–¥–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
            exported_count = 0
            for tab_name, tab_info in self.plot_tabs.items():
                try:
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                    safe_name = "".join(
                        c for c in tab_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
                    file_path = f"{folder_path}/{safe_name}.png"

                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
                    tab_info['figure'].savefig(
                        file_path, dpi=300, bbox_inches='tight')
                    exported_count += 1

                except Exception as e:
                    self.logger.error(
                        f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–∞ {tab_name}: {e}")
                    continue

            self._show_info(
                f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {exported_count} –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ {folder_path}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")

    def _clear_all_plots(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏ –∫—Ä–æ–º–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π
            tabs_to_remove = []
            for i, tab_id in enumerate(self.notebook.tabs()):
                tab_text = self.notebook.tab(tab_id, "text")
                if tab_text != "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å":
                    tabs_to_remove.append(i)

            # –£–¥–∞–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            for i in reversed(tabs_to_remove):
                self.notebook.forget(i)

            # –û—á–∏—â–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
            self.plot_adapter.cleanup_all()

            # –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∫–ª–∞–¥–∫–∞—Ö
            self.plot_tabs.clear()

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not self.notebook.tabs():
                self._create_welcome_tab()

            self.logger.info("–í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –æ—á–∏—â–µ–Ω—ã")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")

    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ===

    def _on_tab_right_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ –≤–∫–ª–∞–¥–∫–µ"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
            tab_index = self.notebook.index("@%d,%d" % (event.x, event.y))
            if tab_index >= 0:
                self.notebook.select(tab_index)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
                self.context_menu.post(event.x_root, event.y_root)

        except Exception as e:
            self.logger.debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞: {e}")

    def _on_tab_changed(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏"""
        try:
            if self.auto_update_var.get():
                # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
                current_tab = self.notebook.select()
                if current_tab:
                    tab_text = self.notebook.tab(current_tab, "text")
                    if tab_text in self.plot_tabs:
                        self._refresh_plot(tab_text, self.plot_tabs[tab_text])
        except Exception as e:
            self.logger.debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–º–µ–Ω—ã –≤–∫–ª–∞–¥–∫–∏: {e}")

    # === –ú–ï–¢–û–î–´ –ö–û–ù–¢–ï–ö–°–¢–ù–û–ì–û –ú–ï–ù–Æ ===

    def _refresh_current_plot(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞"""
        try:
            current_tab = self.notebook.select()
            if current_tab:
                tab_text = self.notebook.tab(current_tab, "text")
                if tab_text in self.plot_tabs:
                    self._refresh_plot(tab_text, self.plot_tabs[tab_text])
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

    def _export_current_plot(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞"""
        try:
            current_tab = self.notebook.select()
            if not current_tab:
                return

            tab_text = self.notebook.tab(current_tab, "text")
            if tab_text not in self.plot_tabs:
                return

            # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            file_path = filedialog.asksaveasfilename(
                defaultextension=".png",
                filetypes=[
                    ("PNG files", "*.png"),
                    ("PDF files", "*.pdf"),
                    ("SVG files", "*.svg"),
                    ("EPS files", "*.eps")
                ],
                title=f"–≠–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∏–∫–∞: {tab_text}"
            )

            if file_path:
                tab_info = self.plot_tabs[tab_text]
                tab_info['figure'].savefig(
                    file_path, dpi=300, bbox_inches='tight')
                self._show_info(f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

    def _duplicate_current_plot(self):
        """–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞"""
        try:
            current_tab = self.notebook.select()
            if not current_tab:
                return

            tab_text = self.notebook.tab(current_tab, "text")
            if tab_text not in self.plot_tabs:
                return

            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–∏
            tab_info = self.plot_tabs[tab_text]
            new_name = f"{tab_text} (–∫–æ–ø–∏—è)"

            self._create_plot_tab(
                new_name,
                tab_info['parameters'],
                tab_info['start_time'],
                tab_info['end_time']
            )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

    def _configure_current_plot(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞"""
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        self._show_info(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")

    def _close_current_plot(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞"""
        try:
            current_tab = self.notebook.select()
            if not current_tab:
                return

            tab_text = self.notebook.tab(current_tab, "text")

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è
            if messagebox.askyesno("–ó–∞–∫—Ä—ã—Ç–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞", f"–ó–∞–∫—Ä—ã—Ç—å –≥—Ä–∞—Ñ–∏–∫ '{tab_text}'?"):
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–¥–∞–ø—Ç–µ—Ä–∞
                self.plot_adapter.remove_plot(tab_text)

                # –£–¥–∞–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É
                self.notebook.forget(current_tab)

                # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                if tab_text in self.plot_tabs:
                    del self.plot_tabs[tab_text]

                # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤–∫–ª–∞–¥–æ–∫, —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é
                if not self.notebook.tabs():
                    self._create_welcome_tab()

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

    def _get_selected_parameters(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä"""
        try:
            # –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±: —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            if self.controller and hasattr(self.controller, 'get_selected_parameters'):
                selected = self.controller.get_selected_parameters()
                self.logger.debug(
                    f"–ü–æ–ª—É—á–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä: {len(selected)}")
                return selected

            # Fallback: –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
            if self.controller and hasattr(self.controller, 'view'):
                view = self.controller.view

                # –ß–µ—Ä–µ–∑ ui_components
                if (hasattr(view, 'ui_components') and
                    view.ui_components and
                        hasattr(view.ui_components, 'parameter_panel')):

                    parameter_panel = view.ui_components.parameter_panel
                    if hasattr(parameter_panel, 'get_selected_parameters'):
                        selected = parameter_panel.get_selected_parameters()
                        self.logger.debug(
                            f"–ü–æ–ª—É—á–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ fallback: {len(selected)}")
                        return selected

            self.logger.warning(
                "–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –Ω—É–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤")
            return []

        except Exception as e:
            self.logger.error(
                f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ PlotVisualizationPanel: {e}")
            return []

    def _get_time_range(self) -> Tuple[Optional[datetime], Optional[datetime]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
        try:
            if self.controller and hasattr(self.controller, 'view'):
                ui_components = self.controller.view.get_component(
                    'ui_components')
                if ui_components:
                    from_str, to_str = ui_components.get_time_range()
                    if from_str and to_str:
                        from_time = datetime.strptime(
                            from_str, '%Y-%m-%d %H:%M:%S')
                        to_time = datetime.strptime(
                            to_str, '%Y-%m-%d %H:%M:%S')
                        return from_time, to_time
            return None, None
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {e}")
            return None, None

    def _show_building_progress(self, show: bool):
        """–ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        try:
            if show:
                self.control_frame.config(
                    text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ - –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ...")
            else:
                self.control_frame.config(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏")
        except Exception:
            pass

    def _show_info(self, message: str):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", message)

    def _show_warning(self, message: str):
        """–ü–æ–∫–∞–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", message)

    def _show_error(self, message: str):
        """–ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏"""
        messagebox.showerror("–û—à–∏–±–∫–∞", message)

    # === –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ ===

    def reset_all_zoom(self):
        """–°–±—Ä–æ—Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        self.plot_adapter.reset_zoom_all()

    def clear_all_annotations(self):
        """–û—á–∏—Å—Ç–∫–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –¥–ª—è –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        self.plot_adapter.clear_annotations_all()

    def export_all_plots(self):
        """–ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        self._export_all_plots()

    def set_session(self, session_id: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
        self.current_session_id = session_id
        self.logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è: {session_id}")

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            self.plot_adapter.cleanup_all()
            self.plot_tabs.clear()
            self.controller = None
            self.filter_use_case = None
            self.plot_use_case = None

            self.logger.info("PlotVisualizationPanel –æ—á–∏—â–µ–Ω")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ PlotVisualizationPanel: {e}")
