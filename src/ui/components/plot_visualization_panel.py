"""
–ü–∞–Ω–µ–ª—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Use Cases –∏ Clean Architecture
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import logging
from typing import Dict, Any, Optional, List, Tuple
from datetime import datetime
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
from ...core.application.use_cases.filter_parameters_use_case import (
    FilterParametersUseCase,
    FilterParametersRequest,
    FilterParametersResponse,
)
from ...core.application.use_cases.plot_generation_use_case import (
    PlotGenerationUseCase,
    PlotGenerationRequest,
)
from ...infrastructure.plotting.adapters.tkinter_plot_adapter import TkinterPlotAdapter
from ...infrastructure.plotting.core.plot_builder import PlotBuilder
from ...infrastructure.plotting.interactions.base_interaction import ZoomInteraction

class PlotVisualizationPanel(ttk.Frame):
    """–ü–∞–Ω–µ–ª—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""

    class TimeAxisZoomInteraction:
        def __init__(self, canvas, figure):
            self.canvas = canvas
            self.figure = figure
            self._scroll_cid = None
            self.logger = logging.getLogger(self.__class__.__name__)

        def setup_handlers(self):
            self._scroll_cid = self.canvas.mpl_connect('scroll_event', self._on_scroll)

        def _on_scroll(self, event):
            try:
                if event.inaxes is None:
                    return

                ax = event.inaxes

                # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                self.logger.debug(f"Scroll event: step={event.step}, x={event.x}, y={event.y}")
                self.logger.debug(f"Event inaxes: {event.inaxes}")
                self.logger.debug(f"Event xdata: {event.xdata}")
                self.logger.debug(f"Current xlim: {ax.get_xlim()}")

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
                zoom_factor = 1.2 if event.step < 0 else 1 / 1.2

                xdata = event.xdata
                if xdata is None:
                    return

                xlim = ax.get_xlim()
                x_center = xdata
                x_range = xlim[1] - xlim[0]

                new_x_range = x_range * zoom_factor
                new_xlim = (x_center - new_x_range / 2, x_center + new_x_range / 2)

                ax.set_xlim(new_xlim)
                self.canvas.draw_idle()
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏: {e}")

        def cleanup(self):
            if self._scroll_cid:
                self.canvas.mpl_disconnect(self._scroll_cid)

    def __init__(self, parent, controller=None):
        super().__init__(parent)
        self.controller = controller
        self.logger = logging.getLogger(self.__class__.__name__)

        # Use Cases
        self.filter_use_case: Optional[FilterParametersUseCase] = None
        self.plot_use_case: Optional[PlotGenerationUseCase] = None

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        self.plot_adapter = TkinterPlotAdapter()
        self.plot_builder: Optional[PlotBuilder] = None

        # UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.notebook: Optional[ttk.Notebook] = None
        self.control_frame: Optional[ttk.Frame] = None
        self.plot_tabs: Dict[str, Dict[str, Any]] = {}

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.current_session_id: Optional[str] = None
        self.is_building_plots = False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è max_params_var –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ª–∏—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞
        self.max_params_var = tk.IntVar(value=10)
        self.plot_type_var = tk.StringVar(value="step")

        self._setup_ui()
        self._setup_use_cases()

        self.logger.info("PlotVisualizationPanel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        self.grid_rowconfigure(1, weight=1)
        self.grid_columnconfigure(0, weight=1)

        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self._create_control_panel()

        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self._create_plot_area()

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self._create_context_menu()

    def _create_control_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
        self.control_frame = ttk.LabelFrame(
            self, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏", padding="10"
        )
        self.control_frame.grid(row=0, column=0, sticky="ew", padx=5, pady=5)
        self.control_frame.grid_columnconfigure(1, weight=1)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ttk.Frame(self.control_frame)
        buttons_frame.grid(row=0, column=0, columnspan=4, sticky="ew", pady=(0, 10))

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        ttk.Button(
            buttons_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏", command=self._refresh_all_plots
        ).pack(side=tk.LEFT, padx=(0, 5))

        ttk.Button(
            buttons_frame, text="üìä –ê–≤—Ç–æ-–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞", command=self._auto_group_plots
        ).pack(side=tk.LEFT, padx=(0, 5))

        ttk.Button(
            buttons_frame, text="üíæ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö", command=self._export_all_plots
        ).pack(side=tk.LEFT, padx=(0, 5))

        ttk.Button(
            buttons_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", command=self._clear_all_plots
        ).pack(side=tk.LEFT, padx=(0, 5))

        ttk.Button(
            buttons_frame, text="üîç –°–±—Ä–æ—Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è", command=self._reset_zoom_current_plot
        ).pack(side=tk.LEFT, padx=(0, 5))

    def _reset_zoom_current_plot(self):
        """–°–±—Ä–æ—Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞"""
        try:
            current_tab = self.notebook.select()
            if not current_tab:
                return
            tab_text = self.notebook.tab(current_tab, "text")
            if tab_text in self.plot_tabs and "time_zoom_interaction" in self.plot_tabs[tab_text]:
                tab_info = self.plot_tabs[tab_text]
                figure = tab_info.get("figure")
                if figure and figure.axes:
                    ax = figure.axes[0]
                    ax.autoscale()
                    figure.canvas.draw_idle()
                self.logger.info(f"–°–±—Ä–æ—Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ '{tab_text}' –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        settings_frame = ttk.Frame(self.control_frame)
        settings_frame.grid(row=1, column=0, columnspan=4, sticky="ew")
        settings_frame.grid_columnconfigure(1, weight=1)

        # –¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞
        ttk.Label(settings_frame, text="–¢–∏–ø:").grid(row=0, column=0, sticky="w")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è plot_type_var –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞
        if not hasattr(self, 'plot_type_var') or self.plot_type_var is None:
            self.plot_type_var = tk.StringVar(value="step")
        plot_type_combo = ttk.Combobox(
            settings_frame,
            textvariable=self.plot_type_var,
            values=["line", "step", "scatter"],
            state="readonly",
            width=10,
        )
        plot_type_combo.grid(row=0, column=1, sticky="w", padx=(5, 0))

        # –ú–∞–∫—Å–∏–º—É–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
        ttk.Label(settings_frame, text="–ú–∞–∫—Å. –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:").grid(
            row=0, column=2, sticky="w", padx=(20, 0)
        )
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è max_params_var –æ–¥–∏–Ω —Ä–∞–∑
        if not hasattr(self, 'max_params_var') or self.max_params_var is None:
            self.max_params_var = tk.IntVar(value=10)
        max_params_spin = tk.Spinbox(
            settings_frame, from_=1, to=50, textvariable=self.max_params_var, width=5
        )
        max_params_spin.grid(row=0, column=3, sticky="w", padx=(5, 0))

        # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.auto_update_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(
            settings_frame, text="–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", variable=self.auto_update_var
        ).grid(row=0, column=4, sticky="w", padx=(20, 0))

    def _create_plot_area(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        # Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(self)
        self.notebook.grid(row=1, column=0, sticky="nsew", padx=5, pady=5)

        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.notebook.bind("<Button-3>", self._on_tab_right_click)
        self.notebook.bind("<<NotebookTabChanged>>", self._on_tab_changed)

        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
        self._create_welcome_tab()

    def _create_welcome_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏"""
        welcome_frame = ttk.Frame(self.notebook)
        self.notebook.add(welcome_frame, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å")

        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        content_frame = ttk.Frame(welcome_frame)
        content_frame.pack(expand=True, fill=tk.BOTH)
        content_frame.grid_rowconfigure(0, weight=1)
        content_frame.grid_columnconfigure(0, weight=1)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        info_text = """
        üéØ –ê–ù–ê–õ–ò–ó–ê–¢–û–† –¢–ï–õ–ï–ú–ï–¢–†–ò–ò TRAMM
        
        üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        üîß –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        üìà –ù–∞–∂–º–∏—Ç–µ "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        
        ‚ö° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
        ‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
        ‚Ä¢ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ
        ‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —Ç–∏–ø–∞–º
        ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        ‚Ä¢ –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        
        üöÄ –ù–∞—á–Ω–∏—Ç–µ —Å –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª–∞!
        –ù–µ –∑–∞–±—É–¥—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ csv –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        W_BUIK_TRAIN_NUM - –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –∏ –ª–∏–Ω–∏–∏ –ú–¶–î
        DW_CURRENT_ID_WAGON - –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ–¥—É—â–µ–π –≥–æ–ª–æ–≤—ã –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∞–≥–æ–Ω–æ–≤
        W_TIMESTAMP_YEAR_
        BY_TIMESTAMP_DAY_
        BY_TIMESTAMP_MONTH_
        BY_TIMESTAMP_MINUTE_
        BY_TIMESTAMP_HOUR_
        BY_TIMESTAMP_SMALLSECOND_
        BY_TIMESTAMP_SECOND_
        –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        """

        info_label = tk.Label(
            content_frame,
            text=info_text,
            font=("Arial", 11),
            justify=tk.CENTER,
            fg="#555555",
            bg="white",
        )
        info_label.grid(row=0, column=0, padx=20, pady=20)

    def _create_context_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –≤–∫–ª–∞–¥–æ–∫"""
        self.context_menu = tk.Menu(self, tearoff=0)
        self.context_menu.add_command(
            label="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=self._refresh_current_plot
        )
        self.context_menu.add_command(
            label="üíæ –≠–∫—Å–ø–æ—Ä—Ç", command=self._export_current_plot
        )
        self.context_menu.add_separator()
        self.context_menu.add_command(
            label="üìã –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å", command=self._duplicate_current_plot
        )
        self.context_menu.add_command(
            label="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", command=self._configure_current_plot
        )
        self.context_menu.add_separator()
        self.context_menu.add_command(
            label="‚ùå –ó–∞–∫—Ä—ã—Ç—å", command=self._close_current_plot
        )

    def _setup_use_cases(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Use Cases"""
        try:
            if self.controller and hasattr(self.controller, "model"):
                model = self.controller.model

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Use Cases
                if hasattr(model, "parameter_repository") and hasattr(
                    model, "filtering_service"
                ):
                    self.filter_use_case = FilterParametersUseCase(
                        model.parameter_repository, model.filtering_service
                    )

                if hasattr(model, "data_loader"):
                    self.plot_builder = PlotBuilder(model.data_loader)

                self.logger.info("Use Cases –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            else:
                self.logger.warning(
                    "–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Use Cases"
                )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Use Cases: {e}")

    # === –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –ü–û–°–¢–†–û–ï–ù–ò–Ø –ì–†–ê–§–ò–ö–û–í ===

    def build_plots_for_parameters(
        self, parameters: List[Dict[str, Any]], start_time: datetime, end_time: datetime
    ):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            if self.is_building_plots:
                self.logger.warning("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
                return

            if not parameters:
                self._show_warning("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
                return

            self.is_building_plots = True
            self._show_building_progress(True)

            # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
            self.logger.info(
                f"–ù–∞—á–∞–ª–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è {len(parameters)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
            )
            self.logger.info(f"–í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {start_time} - {end_time}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º PlotBuilder
            if not self.plot_builder:
                self.logger.error("PlotBuilder –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                self._show_error("PlotBuilder –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º data_loader
            if (
                not hasattr(self.plot_builder, "data_loader")
                or not self.plot_builder.data_loader
            ):
                self.logger.error("DataLoader –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PlotBuilder")
                self._show_error("DataLoader –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
            has_data = self.plot_builder._has_data()
            self.logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {has_data}")

            if not has_data:
                # –ü—ã—Ç–∞–µ–º—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É
                data_loader = self.plot_builder.data_loader
                self.logger.info(f"DataLoader —Ç–∏–ø: {type(data_loader)}")
                self.logger.info(
                    f"DataLoader –∞—Ç—Ä–∏–±—É—Ç—ã: {[attr for attr in dir(data_loader) if not attr.startswith('_')]}"
                )
                if hasattr(data_loader, "data"):
                    self.logger.info(f"data_loader.data: {type(data_loader.data)}")
                    if hasattr(data_loader.data, "shape"):
                        self.logger.info(f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {data_loader.data.shape}")

                if hasattr(data_loader, "parameters"):
                    self.logger.info(
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {len(data_loader.parameters) if data_loader.parameters else 0}"
                    )
                self._show_error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
                return

            # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
            self._remove_welcome_tab()

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            plot_groups = self._group_parameters_for_plots(parameters)
            self.logger.info(f"–°–æ–∑–¥–∞–Ω–æ –≥—Ä—É–ø–ø –≥—Ä–∞—Ñ–∏–∫–æ–≤: {len(plot_groups)}")

            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
            success_count = 0
            for group_name, group_params in plot_groups.items():
                try:
                    self._create_plot_tab(
                        group_name, group_params, start_time, end_time
                    )
                    success_count += 1
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ '{group_name}': {e}")
                    continue

            if success_count > 0:
                self.logger.info(
                    f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {success_count} –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏–∑ {len(plot_groups)}"
                )
            else:
                self._show_error(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ª–æ–≥–∏."
                )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
            import traceback

            traceback.print_exc()
            self._show_error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
        finally:
            self.is_building_plots = False
            self._show_building_progress(False)

    def _group_parameters_for_plots(
        self, parameters: List[Dict[str, Any]]
    ) -> Dict[str, List[Dict[str, Any]]]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        try:
            max_params = self.max_params_var.get()
            groups = {}

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø—É –¥–∞–Ω–Ω—ã—Ö
            type_groups = {}
            for param in parameters:
                signal_type = param.get("signal_type", "Unknown")
                if signal_type not in type_groups:
                    type_groups[signal_type] = []
                type_groups[signal_type].append(param)

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
            for signal_type, type_params in type_groups.items():
                if len(type_params) <= max_params:
                    # –ì—Ä—É–ø–ø–∞ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–∏–Ω –≥—Ä–∞—Ñ–∏–∫
                    groups[f"{signal_type} —Å–∏–≥–Ω–∞–ª—ã"] = type_params
                else:
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã
                    for i in range(0, len(type_params), max_params):
                        subgroup = type_params[i : i + max_params]
                        group_num = (i // max_params) + 1
                        groups[f"{signal_type} —Å–∏–≥–Ω–∞–ª—ã (—á–∞—Å—Ç—å {group_num})"] = subgroup

            return groups

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            # Fallback - –æ–¥–∏–Ω –≥—Ä–∞—Ñ–∏–∫ —Å–æ –≤—Å–µ–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            return {"–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã": parameters[: self.max_params_var.get()]}

    def _create_plot_tab(
        self,
        tab_name: str,
        parameters: List[Dict[str, Any]],
        start_time: datetime,
        end_time: datetime,
    ):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º"""
        try:
            if not self.plot_builder:
                self.logger.error("PlotBuilder –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º plot_type_var, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            if not hasattr(self, 'plot_type_var') or self.plot_type_var is None:
                self.plot_type_var = tk.StringVar(value="step")

            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ PlotBuilder
            figure, ax = self.plot_builder.build_plot(
                parameters,
                start_time,
                end_time,
                title=tab_name,
                strategy=self.plot_type_var.get() if self.plot_type_var and self.plot_type_var.get() else "step",
            )

            # –°–æ–∑–¥–∞–Ω–∏–µ UI –≤–∏–¥–∂–µ—Ç–∞ —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä
            canvas, info_panel = self.plot_adapter.create_plot_widget(
                self.notebook, figure, tab_name, parameters
            )

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è canvas
            plot_container = canvas.get_tk_widget().master

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –≤ notebook
            self.notebook.add(plot_container, text=tab_name)

            # –°–æ–∑–¥–∞–µ–º TimeAxisZoomInteraction –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –æ—Å–∏ –≤—Ä–µ–º–µ–Ω–∏
            time_zoom = self.TimeAxisZoomInteraction(canvas, figure)
            time_zoom.setup_handlers()

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∫–ª–∞–¥–∫–µ
            self.plot_tabs[tab_name] = {
                "parameters": parameters,
                "start_time": start_time,
                "end_time": end_time,
                "figure": figure,
                "canvas": canvas,
                "info_panel": info_panel,
                "container": plot_container,
                "time_zoom_interaction": time_zoom,
            }

            # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
            self.notebook.select(plot_container)

            self.logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞: {tab_name}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

    def _remove_welcome_tab(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏"""
        try:
            for i, tab_id in enumerate(self.notebook.tabs()):
                tab_text = self.notebook.tab(tab_id, "text")
                if tab_text == "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å":
                    self.notebook.forget(i)
                    break
        except Exception as e:
            self.logger.debug(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏: {e}")

    # === –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ì–†–ê–§–ò–ö–ê–ú–ò ===

    def _refresh_all_plots(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        try:
            if not self.plot_tabs:
                return

            for tab_name, tab_info in self.plot_tabs.items():
                self._refresh_plot(tab_name, tab_info)

            self.logger.info("–í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")

    def _refresh_plot(self, tab_name: str, tab_info: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞"""
        try:
            if not self.plot_builder:
                return

            # –ü–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            figure, ax = self.plot_builder.build_plot(
                tab_info["parameters"],
                tab_info["start_time"],
                tab_info["end_time"],
                title=tab_name,
                strategy=self.plot_type_var.get(),
            )

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä
            self.plot_adapter.update_plot(tab_name, figure)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            tab_info["figure"] = figure

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ {tab_name}: {e}")

    def _auto_group_plots(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        try:
            if not self.controller:
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            selected_params = self._get_selected_parameters()
            if not selected_params:
                self._show_warning("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
            start_time, end_time = self._get_time_range()
            if not start_time or not end_time:
                self._show_warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω")
                return

            # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏
            self._clear_all_plots()

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
            self.build_plots_for_parameters(selected_params, start_time, end_time)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: {e}")

    def _export_current_plot(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞"""
        try:
            current_tab = self.notebook.select()
            if not current_tab:
                return

            tab_text = self.notebook.tab(current_tab, "text")
            if tab_text not in self.plot_tabs:
                return

            # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            file_path = filedialog.asksaveasfilename(
                defaultextension=".png",
                filetypes=[
                    ("PNG files", "*.png"),
                    ("PDF files", "*.pdf"),
                    ("SVG files", "*.svg"),
                    ("EPS files", "*.eps"),
                ],
                title=f"–≠–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∏–∫–∞: {tab_text}",
            )

            if file_path:
                tab_info = self.plot_tabs[tab_text]
                tab_info["figure"].savefig(file_path, dpi=300, bbox_inches="tight")
                self._show_info(f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            self._show_error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
            
    def _export_current_plot(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞"""
        try:
            current_tab = self.notebook.select()
            if not current_tab:
                return

            tab_text = self.notebook.tab(current_tab, "text")
            if tab_text not in self.plot_tabs:
                return

            # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            file_path = filedialog.asksaveasfilename(
                defaultextension=".png",
                filetypes=[
                    ("PNG files", "*.png"),
                    ("PDF files", "*.pdf"),
                    ("SVG files", "*.svg"),
                    ("EPS files", "*.eps"),
                ],
                title=f"–≠–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∏–∫–∞: {tab_text}",
            )

            if file_path:
                tab_info = self.plot_tabs[tab_text]
                tab_info["figure"].savefig(file_path, dpi=300, bbox_inches="tight")
                self._show_info(f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            self._show_error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")            