# src/ui/components/horizontal_parameter_panel.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –∫–æ–º–ø–æ–Ω–æ–≤–∫–æ–π 50/50 –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
"""
import tkinter as tk
from tkinter import ttk
import logging
from typing import List, Dict, Any, Optional, Callable

class HorizontalParameterPanel(ttk.Frame):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –∫–æ–º–ø–æ–Ω–æ–≤–∫–æ–π 50/50"""

    def __init__(self, parent, controller=None):
        super().__init__(parent)
        self.controller = controller
        self.logger = logging.getLogger(self.__class__.__name__)

        # –î–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.all_parameters: List[Dict[str, Any]] = []
        self.selected_parameters: List[Dict[str, Any]] = []
        self.filtered_parameters: List[Dict[str, Any]] = []

        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.tree_all = None
        self.tree_selected = None
        self.selection_info = None
        self.filtered_count_label = None
        
        # –ù–û–í–û–ï: –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏ 50/50
        self.paned_window = None
        self.left_frame = None
        self.right_frame = None
        self.control_frame = None

        # Callbacks
        self.on_selection_changed: Optional[Callable] = None

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–µ–∑–¥–µ –∏–∑ –ø–∞–Ω–µ–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self._setup_horizontal_ui()
        self.logger.info("HorizontalParameterPanel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _setup_horizontal_ui(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ UI —Å –∫–æ–º–ø–æ–Ω–æ–≤–∫–æ–π 50/50"""
        try:
            # –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
            self.grid_rowconfigure(0, weight=1)
            self.grid_columnconfigure(0, weight=1)

            # –ù–û–í–û–ï: –°–æ–∑–¥–∞–µ–º PanedWindow –¥–ª—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏ 50/50
            self.paned_window = ttk.PanedWindow(self, orient=tk.HORIZONTAL)
            self.paned_window.grid(row=0, column=0, sticky="nsew", padx=2, pady=2)

            # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (50%)
            self.left_frame = ttk.Frame(self.paned_window)
            self.left_frame.grid_rowconfigure(0, weight=1)
            self.left_frame.grid_columnconfigure(0, weight=1)

            # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (50%)
            self.right_frame = ttk.Frame(self.paned_window)
            self.right_frame.grid_rowconfigure(0, weight=1)
            self.right_frame.grid_columnconfigure(0, weight=1)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª–∏ –≤ PanedWindow —Å —Ä–∞–≤–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏
            self.paned_window.add(self.left_frame, weight=1)
            self.paned_window.add(self.right_frame, weight=1)

            # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏–∏
            self._create_all_parameters_section()
            self._create_selected_parameters_section()
            self._create_control_buttons()

            # –ù–û–í–û–ï: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∫–æ–º–ø–æ–Ω–æ–≤–∫—É 50/50
            self.after(100, self._configure_initial_split)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI: {e}")

    def _configure_initial_split(self):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏ 50/50"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —à–∏—Ä–∏–Ω—É
            total_width = self.paned_window.winfo_width()
            if total_width > 100:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–∂–µ—Ç –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω
                split_position = total_width // 2
                self.paned_window.sashpos(0, split_position)
                self.logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞ 50/50: {split_position}px")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏: {e}")

    def configure_split_layout(self, split_ratio: float = 0.5):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø–∞–Ω–µ–ª–µ–π"""
        try:
            if not 0.1 <= split_ratio <= 0.9:
                split_ratio = 0.5
                
            total_width = self.paned_window.winfo_width()
            if total_width > 100:
                split_position = int(total_width * split_ratio)
                self.paned_window.sashpos(0, split_position)
                self.logger.info(f"–ö–æ–º–ø–æ–Ω–æ–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {int(split_ratio*100)}/{int((1-split_ratio)*100)}")
            else:
                # –ï—Å–ª–∏ –≤–∏–¥–∂–µ—Ç –µ—â–µ –Ω–µ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –ø–æ—Ç–æ–º
                self.after(100, lambda: self.configure_split_layout(split_ratio))
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏: {e}")

    def _create_all_parameters_section(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            all_container = ttk.Frame(self.left_frame)
            all_container.grid(row=0, column=0, sticky="nsew", padx=(0, 2))
            all_container.grid_rowconfigure(1, weight=1)
            all_container.grid_columnconfigure(0, weight=1)

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Å—á–µ—Ç—á–∏–∫–æ–º
            header_frame = ttk.Frame(all_container)
            header_frame.grid(row=0, column=0, sticky="ew", pady=(0, 3))
            header_frame.grid_columnconfigure(0, weight=1)

            ttk.Label(
                header_frame, 
                text="üìã –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", 
                font=('Arial', 10, 'bold')
            ).grid(row=0, column=0, sticky="w")

            self.filtered_count_label = ttk.Label(
                header_frame,
                text="(0 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)",
                font=('Arial', 9),
                foreground='gray'
            )
            self.filtered_count_label.grid(row=0, column=1, sticky="e")

            # –§—Ä–µ–π–º –¥–ª—è –¥–µ—Ä–µ–≤–∞ –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞
            tree_frame = ttk.Frame(all_container)
            tree_frame.grid(row=1, column=0, sticky="nsew")
            tree_frame.grid_rowconfigure(0, weight=1)
            tree_frame.grid_columnconfigure(0, weight=1)

            # –î–µ—Ä–µ–≤–æ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            self.tree_all = ttk.Treeview(
                tree_frame,
                columns=("description", "line", "wagon"),
                show="tree headings",
                height=12
            )
            self.tree_all.heading("#0", text="–ö–æ–¥", anchor=tk.W)
            self.tree_all.heading("description", text="–û–ø–∏—Å–∞–Ω–∏–µ", anchor=tk.W)
            self.tree_all.heading("line", text="–õ–∏–Ω–∏—è", anchor=tk.W)
            self.tree_all.heading("wagon", text="–í–∞–≥–æ–Ω", anchor=tk.W)
            self.tree_all.column("#0", width=100, minwidth=80)
            self.tree_all.column("description", width=250, minwidth=150)
            self.tree_all.column("line", width=80, minwidth=60)
            self.tree_all.column("wagon", width=60, minwidth=50)

            # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            scrollbar_all = ttk.Scrollbar(tree_frame, orient="vertical", command=self.tree_all.yview)
            self.tree_all.configure(yscrollcommand=scrollbar_all.set)

            self.tree_all.grid(row=0, column=0, sticky="nsew")
            scrollbar_all.grid(row=0, column=1, sticky="ns")

            # –°–æ–±—ã—Ç–∏—è
            self.tree_all.bind("<Double-1>", self._on_all_double_click)
            self.tree_all.bind("<Button-3>", self._on_all_right_click)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∫—Ü–∏–∏ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")

    def _create_selected_parameters_section(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            selected_container = ttk.Frame(self.right_frame)
            selected_container.grid(row=0, column=0, sticky="nsew", padx=(2, 0))
            selected_container.grid_rowconfigure(1, weight=1)
            selected_container.grid_columnconfigure(0, weight=1)

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Å—á–µ—Ç—á–∏–∫–æ–º
            header_frame = ttk.Frame(selected_container)
            header_frame.grid(row=0, column=0, sticky="ew", pady=(0, 3))
            header_frame.grid_columnconfigure(0, weight=1)

            ttk.Label(
                header_frame, 
                text="‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", 
                font=('Arial', 10, 'bold')
            ).grid(row=0, column=0, sticky="w")

            self.selection_info = ttk.Label(
                header_frame,
                text="(0 –≤—ã–±—Ä–∞–Ω–æ)",
                font=('Arial', 9),
                foreground='green'
            )
            self.selection_info.grid(row=0, column=1, sticky="e")

            # –§—Ä–µ–π–º –¥–ª—è –¥–µ—Ä–µ–≤–∞ –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞
            tree_frame = ttk.Frame(selected_container)
            tree_frame.grid(row=1, column=0, sticky="nsew")
            tree_frame.grid_rowconfigure(0, weight=1)
            tree_frame.grid_columnconfigure(0, weight=1)

            # –î–µ—Ä–µ–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            self.tree_selected = ttk.Treeview(
                tree_frame,
                columns=("code", "description", "line", "wagon"),
                show="tree headings",
                height=12
            )
            self.tree_selected.heading("#0", text="‚Ññ", anchor=tk.W)
            self.tree_selected.heading("code", text="–ö–æ–¥", anchor=tk.W)
            self.tree_selected.heading("description", text="–û–ø–∏—Å–∞–Ω–∏–µ", anchor=tk.W)
            self.tree_selected.heading("line", text="–õ–∏–Ω–∏—è", anchor=tk.W)
            self.tree_selected.heading("wagon", text="–í–∞–≥–æ–Ω", anchor=tk.W)
            self.tree_selected.column("#0", width=30, minwidth=30)
            self.tree_selected.column("code", width=80, minwidth=60)
            self.tree_selected.column("description", width=200, minwidth=150)
            self.tree_selected.column("line", width=80, minwidth=60)
            self.tree_selected.column("wagon", width=60, minwidth=50)

            # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            scrollbar_selected = ttk.Scrollbar(tree_frame, orient="vertical", command=self.tree_selected.yview)
            self.tree_selected.configure(yscrollcommand=scrollbar_selected.set)

            self.tree_selected.grid(row=0, column=0, sticky="nsew")
            scrollbar_selected.grid(row=0, column=1, sticky="ns")

            # –°–æ–±—ã—Ç–∏—è
            self.tree_selected.bind("<Double-1>", self._on_selected_double_click)
            self.tree_selected.bind("<Button-3>", self._on_selected_right_click)
            self.tree_selected.bind("<<TreeviewSelect>>", self._on_selection_changed_event)
            self.tree_selected.bind("<Delete>", self._on_delete_key)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∫—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")

    def _create_control_buttons(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏"""
        try:
            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏
            control_container = ttk.Frame(self.left_frame)
            control_container.grid(row=1, column=0, sticky="ew", padx=(0, 2), pady=(3, 0))
            control_container.grid_columnconfigure(0, weight=1)
            control_container.grid_columnconfigure(1, weight=1)
            control_container.grid_columnconfigure(2, weight=1)
            control_container.grid_columnconfigure(3, weight=1)

            # –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            add_btn = ttk.Button(
                control_container,
                text="‚û§ –î–æ–±–∞–≤–∏—Ç—å",
                command=self._add_selected_parameters
            )
            add_btn.grid(row=0, column=0, padx=2, pady=2, sticky="ew")

            add_all_btn = ttk.Button(
                control_container,
                text="‚û§‚û§ –í—Å–µ",
                command=self._add_all_parameters
            )
            add_all_btn.grid(row=0, column=1, padx=2, pady=2, sticky="ew")

            # –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
            remove_container = ttk.Frame(self.right_frame)
            remove_container.grid(row=1, column=0, sticky="ew", padx=(2, 0), pady=(3, 0))
            remove_container.grid_columnconfigure(0, weight=1)
            remove_container.grid_columnconfigure(1, weight=1)
            remove_container.grid_columnconfigure(2, weight=1)
            remove_container.grid_columnconfigure(3, weight=1)

            remove_btn = ttk.Button(
                remove_container,
                text="‚úñ –£–¥–∞–ª–∏—Ç—å",
                command=self._remove_selected_parameters
            )
            remove_btn.grid(row=0, column=0, padx=2, pady=2, sticky="ew")

            remove_all_btn = ttk.Button(
                remove_container,
                text="üóë –û—á–∏—Å—Ç–∏—Ç—å",
                command=self._remove_all_parameters
            )
            remove_all_btn.grid(row=0, column=1, padx=2, pady=2, sticky="ew")

            # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            sort_up_btn = ttk.Button(
                remove_container,
                text="‚¨Ü –í–≤–µ—Ä—Ö",
                command=self._move_parameter_up
            )
            sort_up_btn.grid(row=0, column=2, padx=2, pady=2, sticky="ew")

            sort_down_btn = ttk.Button(
                remove_container,
                text="‚¨á –í–Ω–∏–∑",
                command=self._move_parameter_down
            )
            sort_down_btn.grid(row=0, column=3, padx=2, pady=2, sticky="ew")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")

    def _add_selected_parameters(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            selection = self.tree_all.selection()
            if not selection:
                self.logger.warning("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
                return

            added_count = 0
            for item in selection:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä, –∞ –Ω–µ –≥—Ä—É–ø–ø–∞
                signal_code = self.tree_all.item(item, 'text')
                if signal_code and not self.tree_all.get_children(item):  # –õ–∏—Å—Ç–æ–≤–æ–π —É–∑–µ–ª
                    param_data = self._find_parameter_by_code(signal_code)
                    if param_data and self._add_param_to_selected(param_data):
                        added_count += 1

            if added_count > 0:
                self._populate_selected_tree()
                self._update_selection_info()
                self._notify_selection_changed()
                self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            else:
                self.logger.warning("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")

    def _add_all_parameters(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–¥–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            added_count = 0
            current_params = self.filtered_parameters if self.filtered_parameters else self.all_parameters

            for param in current_params:
                if self._add_param_to_selected(param):
                    added_count += 1

            if added_count > 0:
                self._populate_selected_tree()
                self._update_selection_info()
                self._notify_selection_changed()
                self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {added_count}")
            else:
                self.logger.info("–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")

    def _remove_selected_parameters(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            selection = self.tree_selected.selection()
            if not selection:
                self.logger.warning("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return

            indices_to_remove = []
            for item in selection:
                index = self.tree_selected.index(item)
                indices_to_remove.append(index)

            # –£–¥–∞–ª—è–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            removed_count = 0
            for index in sorted(indices_to_remove, reverse=True):
                if 0 <= index < len(self.selected_parameters):
                    removed_param = self.selected_parameters.pop(index)
                    removed_count += 1
                    self.logger.debug(f"–£–¥–∞–ª–µ–Ω: {removed_param.get('signal_code', 'Unknown')}")

            if removed_count > 0:
                self._populate_selected_tree()
                self._update_selection_info()
                self._notify_selection_changed()
                self.logger.info(f"–£–¥–∞–ª–µ–Ω–æ {removed_count} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")

    def _remove_all_parameters(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            if not self.selected_parameters:
                self.logger.info("–ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
                return

            count = len(self.selected_parameters)
            self.selected_parameters.clear()
            self._populate_selected_tree()
            self._update_selection_info()
            self._notify_selection_changed()
            self.logger.info(f"–û—á–∏—â–µ–Ω–æ {count} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")

    def _move_parameter_up(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤–≤–µ—Ä—Ö"""
        try:
            selection = self.tree_selected.selection()
            if not selection:
                self.logger.warning("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è")
                return

            index = self.tree_selected.index(selection[0])
            if index > 0:
                # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏
                self.selected_parameters[index], self.selected_parameters[index-1] = \
                    self.selected_parameters[index-1], self.selected_parameters[index]

                self._populate_selected_tree()
                self._notify_selection_changed()

                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±–æ—Ä
                new_item = self.tree_selected.get_children()[index-1]
                self.tree_selected.selection_set(new_item)
                self.tree_selected.focus(new_item)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤–≤–µ—Ä—Ö: {e}")

    def _move_parameter_down(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤–Ω–∏–∑"""
        try:
            selection = self.tree_selected.selection()
            if not selection:
                self.logger.warning("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è")
                return

            index = self.tree_selected.index(selection[0])
            if index < len(self.selected_parameters) - 1:
                # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏
                self.selected_parameters[index], self.selected_parameters[index+1] = \
                    self.selected_parameters[index+1], self.selected_parameters[index]

                self._populate_selected_tree()
                self._notify_selection_changed()

                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±–æ—Ä
                new_item = self.tree_selected.get_children()[index+1]
                self.tree_selected.selection_set(new_item)
                self.tree_selected.focus(new_item)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤–Ω–∏–∑: {e}")

    def _find_parameter_by_code(self, signal_code: str) -> Optional[Dict[str, Any]]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–æ–∏—Å–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–æ –∫–æ–¥—É"""
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        search_list = self.filtered_parameters if self.filtered_parameters else self.all_parameters
        
        for param in search_list:
            if param.get('signal_code') == signal_code:
                return param
        return None

    def _add_param_to_selected(self, param_data: Dict[str, Any]) -> bool:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)"""
        signal_code = param_data.get('signal_code', '')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        for existing in self.selected_parameters:
            if existing.get('signal_code') == signal_code:
                return False

        self.selected_parameters.append(param_data.copy())
        return True

    def _update_selection_info(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±–æ—Ä–µ"""
        try:
            count = len(self.selected_parameters)
            if self.selection_info:
                self.selection_info.config(text=f"({count} –≤—ã–±—Ä–∞–Ω–æ)")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")

    def _notify_selection_changed(self):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞"""
        try:
            count = len(self.selected_parameters)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ callback
            if self.on_selection_changed:
                self.on_selection_changed(count)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            if self.controller and hasattr(self.controller, '_on_parameter_selection_changed'):
                self.controller._on_parameter_selection_changed(count)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏: {e}")

    def _on_selection_changed_event(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤ –¥–µ—Ä–µ–≤–µ"""
        self._update_selection_info()

    def _on_all_double_click(self, event):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ - –¥–æ–±–∞–≤–∏—Ç—å –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ"""
        try:
            selection = self.tree_all.selection()
            if selection:
                item = selection[0]
                signal_code = self.tree_all.item(item, 'text')

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä, –∞ –Ω–µ –≥—Ä—É–ø–ø–∞
                if signal_code and not self.tree_all.get_children(item):
                    param_data = self._find_parameter_by_code(signal_code)
                    if param_data and self._add_param_to_selected(param_data):
                        self._populate_selected_tree()
                        self._update_selection_info()
                        self._notify_selection_changed()
                        self.logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä: {signal_code}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞: {e}")

    def _on_selected_double_click(self, event):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ - —É–¥–∞–ª–∏—Ç—å –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö"""
        try:
            selection = self.tree_selected.selection()
            if selection:
                item = selection[0]
                index = self.tree_selected.index(item)
                
                if 0 <= index < len(self.selected_parameters):
                    removed_param = self.selected_parameters.pop(index)
                    self._populate_selected_tree()
                    self._update_selection_info()
                    self._notify_selection_changed()
                    self.logger.debug(f"–£–¥–∞–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä: {removed_param.get('signal_code', 'Unknown')}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º: {e}")

    def _on_delete_key(self, event):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ Delete"""
        self._remove_selected_parameters()

    def _on_all_right_click(self, event):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
            item = self.tree_all.identify_row(event.y)
            if item:
                self.tree_all.selection_set(item)
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
                context_menu = tk.Menu(self, tearoff=0)
                context_menu.add_command(label="‚û§ –î–æ–±–∞–≤–∏—Ç—å", command=self._add_selected_parameters)
                context_menu.add_command(label="‚û§‚û§ –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ", command=self._add_all_parameters)
                
                context_menu.tk_popup(event.x_root, event.y_root)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é: {e}")

    def _on_selected_right_click(self, event):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
            item = self.tree_selected.identify_row(event.y)
            if item:
                self.tree_selected.selection_set(item)
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
                context_menu = tk.Menu(self, tearoff=0)
                context_menu.add_command(label="‚úñ –£–¥–∞–ª–∏—Ç—å", command=self._remove_selected_parameters)
                context_menu.add_command(label="üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", command=self._remove_all_parameters)
                context_menu.add_separator()
                context_menu.add_command(label="‚¨Ü –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö", command=self._move_parameter_up)
                context_menu.add_command(label="‚¨á –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑", command=self._move_parameter_down)
                
                context_menu.tk_popup(event.x_root, event.y_root)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö: {e}")

    def update_parameters(self, parameters: List[Dict[str, Any]]):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            self.all_parameters = parameters.copy()
            self.filtered_parameters = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
            self._populate_all_tree()
            self._update_filtered_count()
            self.logger.info(f"HorizontalParameterPanel: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {len(parameters)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")

    def update_filtered_count(self, count: int):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            if self.filtered_count_label:
                self.filtered_count_label.config(text=f"({count} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: {e}")

    def update_counters(self, all_count: int, selected_count: int):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–æ–∏—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤"""
        try:
            if self.filtered_count_label:
                self.filtered_count_label.config(text=f"({all_count} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)")
            if self.selection_info:
                self.selection_info.config(text=f"({selected_count} –≤—ã–±—Ä–∞–Ω–æ)")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤: {e}")

    def _update_filtered_count(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            count = len(self.filtered_parameters) if self.filtered_parameters else len(self.all_parameters)
            if self.filtered_count_label:
                self.filtered_count_label.config(text=f"({count} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: {e}")

    def _populate_all_tree(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ
            for item in self.tree_all.get_children():
                self.tree_all.delete(item)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
            params_to_show = self.filtered_parameters if self.filtered_parameters else self.all_parameters

            if not params_to_show:
                return

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø—É —Å–∏–≥–Ω–∞–ª–∞
            groups = {}
            for param in params_to_show:
                signal_code = param.get('signal_code', '')
                if signal_code:
                    signal_type = signal_code[0] if signal_code else 'Unknown'
                    group_key = f"–¢–∏–ø {signal_type}"
                else:
                    group_key = "–ë–µ–∑ —Ç–∏–ø–∞"

                if group_key not in groups:
                    groups[group_key] = []
                groups[group_key].append(param)

            # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã
            for group_name, group_params in sorted(groups.items()):
                group_id = self.tree_all.insert("", "end", text=group_name,
                                               values=(f"({len(group_params)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)", "", ""),
                                               tags=('group',))

                for param in sorted(group_params, key=lambda x: x.get('signal_code', '')):
                    description = param.get('description', '')[:60]
                    line = param.get('line', '')
                    wagon = param.get('wagon', '')
                    self.tree_all.insert(group_id, "end",
                                         text=param.get('signal_code', ''),
                                         values=(description, line, wagon),
                                         tags=('parameter',))

            # –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
            for item in self.tree_all.get_children():
                self.tree_all.item(item, open=True)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")

    def _populate_selected_tree(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ
            for item in self.tree_selected.get_children():
                self.tree_selected.delete(item)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            for idx, param in enumerate(self.selected_parameters, start=1):
                signal_code = param.get('signal_code', '')
                description = param.get('description', '')[:50]
                line = param.get('line', '')
                wagon = param.get('wagon', '')
                self.tree_selected.insert("", "end",
                                          text=str(idx),
                                          values=(signal_code, description, line, wagon))

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")

    def apply_filter(self, filtered_params: List[Dict[str, Any]]):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
        try:
            self.filtered_parameters = filtered_params.copy()
            self._populate_all_tree()
            self._update_filtered_count()
            self.logger.debug(f"–ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä: {len(filtered_params)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞: {e}")

    def clear_filter(self):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –û—á–∏—Å—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞"""
        try:
            self.filtered_parameters = []
            self._populate_all_tree()
            self._update_filtered_count()
            self.logger.debug("–§–∏–ª—å—Ç—Ä –æ—á–∏—â–µ–Ω")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞: {e}")

    def get_selected_parameters(self) -> List[Dict[str, Any]]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        return [param.copy() for param in self.selected_parameters]

    def set_selected_parameters(self, parameters: List[Dict[str, Any]]):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            self.selected_parameters = [param.copy() for param in parameters]
            self._populate_selected_tree()
            self._update_selection_info()
            self._notify_selection_changed()
            self.logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(parameters)} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")

    def get_all_parameters_count(self) -> int:
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        return len(self.filtered_parameters) if self.filtered_parameters else len(self.all_parameters)

    def get_selected_parameters_count(self) -> int:
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        return len(self.selected_parameters)

    def set_controller(self, controller):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        try:
            self.controller = controller
            self.logger.debug("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ HorizontalParameterPanel")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞: {e}")

    def cleanup(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            self.all_parameters.clear()
            self.selected_parameters.clear()
            self.filtered_parameters.clear()
            
            # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤—å—è
            if self.tree_all:
                for item in self.tree_all.get_children():
                    self.tree_all.delete(item)
            
            if self.tree_selected:
                for item in self.tree_selected.get_children():
                    self.tree_selected.delete(item)
            
            # –û–±–Ω—É–ª—è–µ–º —Å—Å—ã–ª–∫–∏
            self.controller = None
            self.on_selection_changed = None
            
            self.logger.info("HorizontalParameterPanel –æ—á–∏—â–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ HorizontalParameterPanel: {e}")

    def __str__(self):
        return f"HorizontalParameterPanel(all={len(self.all_parameters)}, selected={len(self.selected_parameters)})"

    def __repr__(self):
        return self.__str__()
