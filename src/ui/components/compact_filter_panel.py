# src/ui/components/compact_filter_panel.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –ø–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å TimePanel
"""
import tkinter as tk
from tkinter import ttk
import logging
from typing import Dict, Any, List

class CompactFilterPanel(ttk.Frame):
    """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –ø–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å TimePanel"""

    def __init__(self, parent, controller=None):
        super().__init__(parent)
        self.controller = controller
        self.logger = logging.getLogger(self.__class__.__name__)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
        self.signal_vars = {}
        self.line_vars = {}
        self.wagon_vars = {}
        self.component_vars = {}

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.is_updating = False
        self.has_priority_for_changed_filter = False  # TimePanel –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç

        self._setup_compact_ui()
        self.logger.info("CompactFilterPanel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π")

    def _setup_compact_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ UI –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        self.grid_columnconfigure(1, weight=0)  # –¢–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤
        self.grid_columnconfigure(3, weight=1)  # –õ–∏–Ω–∏–∏ (—Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—Ç—Å—è)
        self.grid_columnconfigure(5, weight=0)  # –í–∞–≥–æ–Ω—ã

        row = 0

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        info_frame = ttk.Frame(self)
        info_frame.grid(row=row, column=0, columnspan=6, sticky="ew", pady=(0, 3))
        
        info_label = ttk.Label(
            info_frame, 
            text="üí° –§–∏–ª—å—Ç—Ä '–¢–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–Ω–µ–ª–∏ –≤—Ä–µ–º–µ–Ω–∏",
            font=('Arial', 8),
            foreground='blue'
        )
        info_label.pack(anchor="w")

        row += 1

        # –¢–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤
        ttk.Label(self, text="–¢–∏–ø—ã:", font=('Arial', 9)).grid(row=row, column=0, sticky="w")

        types_frame = ttk.Frame(self)
        types_frame.grid(row=row, column=1, sticky="w", padx=(5, 10))

        signal_types = ['B', 'BY', 'W', 'DW', 'F', 'WF']
        for i, signal_type in enumerate(signal_types):
            var = tk.BooleanVar()
            var.set(True)
            self.signal_vars[signal_type] = var

            checkbox = ttk.Checkbutton(
                types_frame,
                text=signal_type,
                variable=var,
                command=self._on_filter_changed
            )
            checkbox.grid(row=0, column=i, sticky="w", padx=2)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        ttk.Separator(self, orient='vertical').grid(row=row, column=2, sticky="ns", padx=5)

        # –õ–∏–Ω–∏–∏ —Å–≤—è–∑–∏
        ttk.Label(self, text="–õ–∏–Ω–∏–∏:", font=('Arial', 9)).grid(row=row, column=3, sticky="w")

        self.lines_frame = ttk.Frame(self)
        self.lines_frame.grid(row=row, column=3, sticky="ew", padx=(5, 10))

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        ttk.Separator(self, orient='vertical').grid(row=row, column=4, sticky="ns", padx=5)

        # –í–∞–≥–æ–Ω—ã
        ttk.Label(self, text="–í–∞–≥–æ–Ω—ã:", font=('Arial', 9)).grid(row=row, column=5, sticky="w")

        wagons_frame = ttk.Frame(self)
        wagons_frame.grid(row=row, column=5, sticky="w", padx=(5, 0))

        for i in range(1, 9):  # –í–∞–≥–æ–Ω—ã 1-8
            var = tk.BooleanVar()
            var.set(True)
            self.wagon_vars[str(i)] = var

            checkbox = ttk.Checkbutton(
                wagons_frame,
                text=str(i),
                variable=var,
                command=self._on_filter_changed
            )
            checkbox.grid(row=0, column=i-1, sticky="w", padx=1)

    def _on_filter_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ TimePanel"""
        try:
            if self.is_updating:
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç TimePanel
            if self._is_time_panel_priority_active():
                self.logger.info("TimePanel –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –æ–±—ã—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã")
                return

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            if self.controller and hasattr(self.controller, 'apply_filters'):
                self.controller.apply_filters(changed_only=False)
                self.logger.debug("–ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞: {e}")

    def _is_time_panel_priority_active(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤ TimePanel"""
        try:
            if not self.controller:
                return False

            time_panel = self.controller.get_ui_component('time_panel')
            if time_panel and hasattr(time_panel, 'get_filter_settings'):
                settings = time_panel.get_filter_settings()
                return settings.get('changed_only', False) and settings.get('has_priority', False)

            return False

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ TimePanel: {e}")
            return False

    def update_line_checkboxes(self, lines: List[str]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤ –ª–∏–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —á–µ–∫–±–æ–∫—Å—ã –ª–∏–Ω–∏–π
            for widget in self.lines_frame.winfo_children():
                widget.destroy()

            self.line_vars.clear()

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —á–µ–∫–±–æ–∫—Å—ã (–º–∞–∫—Å–∏–º—É–º 6 –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏)
            display_lines = lines[:6] if len(lines) > 6 else lines
            
            for i, line in enumerate(sorted(display_lines)):
                var = tk.BooleanVar()
                var.set(True)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –≤–∫–ª—é—á–µ–Ω—ã
                self.line_vars[line] = var

                # –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
                short_name = line.replace('L_CAN_', '').replace('L_TV_', '').replace('_CH', '')[:8]
                
                checkbox = ttk.Checkbutton(
                    self.lines_frame,
                    text=short_name,
                    variable=var,
                    command=self._on_filter_changed
                )
                checkbox.grid(row=0, column=i, sticky="w", padx=2)

            # –ï—Å–ª–∏ –ª–∏–Ω–∏–π –±–æ–ª—å—à–µ 6, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            if len(lines) > 6:
                more_label = ttk.Label(self.lines_frame, text=f"+{len(lines)-6}", font=('Arial', 8))
                more_label.grid(row=0, column=6, sticky="w", padx=2)

            self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ–∫–±–æ–∫—Å—ã –ª–∏–Ω–∏–π: {len(display_lines)} –∏–∑ {len(lines)}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤ –ª–∏–Ω–∏–π: {e}")

    def get_selected_filters(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –±–µ–∑ –ø–æ–ª—è changed_only"""
        try:
            filters = {}
            
            if self.signal_vars:
                filters['signal_types'] = [k for k, v in self.signal_vars.items() if v.get()]
            if self.line_vars:
                filters['lines'] = [k for k, v in self.line_vars.items() if v.get()]
            if self.wagon_vars:
                filters['wagons'] = [k for k, v in self.wagon_vars.items() if v.get()]
            if self.component_vars:
                filters['components'] = [k for k, v in self.component_vars.items() if v.get()]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ TimePanel
            filters['time_panel_priority'] = self._is_time_panel_priority_active()
            
            return filters
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
            return {'time_panel_priority': False}

    def disable_changed_only_checkbox(self):
        """–£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î: –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        self.logger.warning("–ú–µ—Ç–æ–¥ disable_changed_only_checkbox —É—Å—Ç–∞—Ä–µ–ª - —á–µ–∫–±–æ–∫—Å —Ç–æ–ª—å–∫–æ –≤ TimePanel")

    def _sync_with_time_panel(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å TimePanel"""
        try:
            if not self.controller:
                self.logger.warning("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                return

            time_panel = self.controller.get_ui_component('time_panel')
            if time_panel and hasattr(time_panel, 'get_filter_settings'):
                settings = time_panel.get_filter_settings()
                
                if settings.get('changed_only', False):
                    # TimePanel –≤ —Ä–µ–∂–∏–º–µ –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –æ—Ç–∫–ª—é—á–∞–µ–º –Ω–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã
                    self._disable_all_filters()
                    self.logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –æ—Ç–∫–ª—é—á–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç TimePanel)")
                else:
                    # TimePanel –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ - –≤–∫–ª—é—á–∞–µ–º –Ω–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã
                    self._enable_all_filters()
                    self.logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –≤–∫–ª—é—á–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã")
            else:
                self.logger.warning("TimePanel –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å TimePanel: {e}")

    def _disable_all_filters(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–∫–æ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç TimePanel)"""
        try:
            # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
            for widget in self.winfo_children():
                if isinstance(widget, ttk.Frame):
                    for child in widget.winfo_children():
                        if isinstance(child, ttk.Checkbutton):
                            child.config(state='disabled')

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")

    def _enable_all_filters(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã
            for widget in self.winfo_children():
                if isinstance(widget, ttk.Frame):
                    for child in widget.winfo_children():
                        if isinstance(child, ttk.Checkbutton):
                            child.config(state='normal')

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")

    def set_controller(self, controller):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        self.controller = controller
        self.logger.info("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ CompactFilterPanel")

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        if controller:
            self._sync_with_time_panel()

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            self.controller = None
            self.signal_vars.clear()
            self.line_vars.clear()
            self.wagon_vars.clear()
            self.component_vars.clear()
            self.logger.info("CompactFilterPanel –æ—á–∏—â–µ–Ω")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ CompactFilterPanel: {e}")

    def __str__(self):
        return f"CompactFilterPanel(priority={self.has_priority_for_changed_filter}, time_panel_priority={self._is_time_panel_priority_active()})"

    def __repr__(self):
        return self.__str__()
