# src/ui/components/parameter_panel.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ò –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
–ü–∞–Ω–µ–ª—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
"""
import tkinter as tk
from tkinter import ttk
import logging
from typing import List, Dict, Any, Optional, Callable
import re
from collections import defaultdict

class ParameterPanel(ttk.Frame):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø–∞–Ω–µ–ª—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é"""

    def __init__(self, parent, controller=None):
        super().__init__(parent)
        self.controller = controller
        self.logger = logging.getLogger(self.__class__.__name__)

        # –î–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.all_parameters: List[Dict[str, Any]] = []
        self.filtered_parameters: List[Dict[str, Any]] = []
        self.selected_parameters: List[Dict[str, Any]] = []

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.search_var = tk.StringVar()
        self.search_var.trace('w', self._on_search_changed)

        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.tree_all: Optional[ttk.Treeview] = None
        self.tree_selected: Optional[ttk.Treeview] = None
        self.all_count_label: Optional[ttk.Label] = None
        self.filtered_count_label: Optional[ttk.Label] = None
        self.selected_count_label: Optional[ttk.Label] = None
        self.search_entry: Optional[tk.Entry] = None
        self.grouping_combo: Optional[ttk.Combobox] = None

        # Callbacks
        self.on_selection_changed: Optional[Callable[[int], None]] = None

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        self.grouping_mode = 'signal_type'  # 'signal_type', 'line', 'wagon', 'component'
        self.show_empty_groups = False

        # –ù–û–í–û–ï: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self._search_cache = {}
        self._group_cache = {}
        self._last_search_term = ""
        self._last_grouping_mode = ""

        self._setup_ui()
        self.logger.info("ParameterPanel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _setup_ui(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            self.logger.info("ParameterPanel: _setup_ui –≤—ã–∑–≤–∞–Ω")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
            self.grid_rowconfigure(2, weight=1)  # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –¥–µ—Ä–µ–≤—å—è–º–∏
            self.grid_columnconfigure(0, weight=1)

            # 1. –°–µ–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            self._create_search_section()

            # 2. –°–µ–∫—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
            self._create_counters_section()

            # 3. –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –¥–µ—Ä–µ–≤—å—è–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            self._create_parameter_trees()

            # 4. –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            self._create_control_buttons()

            self.logger.info("ParameterPanel: _setup_ui –∑–∞–≤–µ—Ä—à—ë–Ω")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI ParameterPanel: {e}")
            import traceback
            traceback.print_exc()

    def _create_search_section(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏"""
        try:
            self.logger.info("ParameterPanel: _create_search_section")

            search_frame = ttk.Frame(self)
            search_frame.grid(row=0, column=0, sticky="ew", pady=(0, 5))
            search_frame.grid_columnconfigure(1, weight=1)

            # –ü–æ–∏—Å–∫
            ttk.Label(search_frame, text="üîç –ü–æ–∏—Å–∫:", font=('Arial', 9, 'bold')).grid(row=0, column=0, sticky="w")

            self.search_entry = tk.Entry(search_frame, textvariable=self.search_var, font=('Arial', 9))
            self.search_entry.grid(row=0, column=1, sticky="ew", padx=(5, 5))

            # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–∏—Å–∫–∞
            clear_btn = ttk.Button(search_frame, text="‚úï", width=3, command=self._clear_search)
            clear_btn.grid(row=0, column=2)

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            grouping_frame = ttk.Frame(search_frame)
            grouping_frame.grid(row=0, column=3, sticky="e", padx=(10, 0))

            ttk.Label(grouping_frame, text="üìÇ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞:", font=('Arial', 9, 'bold')).grid(row=0, column=0, sticky="w")

            self.grouping_combo = ttk.Combobox(
                grouping_frame,
                values=["–ü–æ —Ç–∏–ø—É —Å–∏–≥–Ω–∞–ª–∞", "–ü–æ –ª–∏–Ω–∏–∏ —Å–≤—è–∑–∏", "–ü–æ –≤–∞–≥–æ–Ω—É", "–ü–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É"],
                state="readonly",
                width=15,
                font=('Arial', 9)
            )
            self.grouping_combo.set("–ü–æ —Ç–∏–ø—É —Å–∏–≥–Ω–∞–ª–∞")
            self.grouping_combo.grid(row=0, column=1, padx=(5, 0))
            self.grouping_combo.bind('<<ComboboxSelected>>', self._on_grouping_changed)

            # –ù–û–í–û–ï: –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
            self.search_entry.bind('<Control-a>', lambda e: self.search_entry.select_range(0, tk.END))
            self.search_entry.bind('<Escape>', lambda e: self._clear_search())

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")

    def _create_counters_section(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤"""
        try:
            self.logger.info("ParameterPanel: _create_counters_section")

            counters_frame = ttk.Frame(self)
            counters_frame.grid(row=1, column=0, sticky="ew", pady=(0, 5))
            counters_frame.grid_columnconfigure(3, weight=1)  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç

            # –°—á–µ—Ç—á–∏–∫–∏ —Å –∏–∫–æ–Ω–∫–∞–º–∏
            self.all_count_label = ttk.Label(
                counters_frame, 
                text="üìä –í—Å–µ–≥–æ: 0", 
                font=('Arial', 9),
                foreground='gray'
            )
            self.all_count_label.grid(row=0, column=0, sticky="w")

            self.filtered_count_label = ttk.Label(
                counters_frame, 
                text="üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: 0", 
                font=('Arial', 9),
                foreground='blue'
            )
            self.filtered_count_label.grid(row=0, column=1, sticky="w", padx=(20, 0))

            self.selected_count_label = ttk.Label(
                counters_frame, 
                text="‚úÖ –í—ã–±—Ä–∞–Ω–æ: 0", 
                font=('Arial', 9),
                foreground='green'
            )
            self.selected_count_label.grid(row=0, column=2, sticky="w", padx=(20, 0))

            # –ù–û–í–û–ï: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self.performance_label = ttk.Label(
                counters_frame,
                text="‚ö° –ì–æ—Ç–æ–≤",
                font=('Arial', 8),
                foreground='gray'
            )
            self.performance_label.grid(row=0, column=3, sticky="e")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∫—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤: {e}")

    def _create_parameter_trees(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –∫–æ–º–ø–æ–Ω–æ–≤–∫–æ–π 50/50"""
        try:
            self.logger.info("ParameterPanel: _create_parameter_trees")

            # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–µ—Ä–µ–≤—å–µ–≤ —Å PanedWindow –¥–ª—è 50/50
            trees_container = ttk.Frame(self)
            trees_container.grid(row=2, column=0, sticky="nsew", pady=(0, 5))
            trees_container.grid_rowconfigure(0, weight=1)
            trees_container.grid_columnconfigure(0, weight=1)

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º PanedWindow –¥–ª—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏ 50/50
            self.paned_window = ttk.PanedWindow(trees_container, orient=tk.HORIZONTAL)
            self.paned_window.grid(row=0, column=0, sticky="nsew")

            # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            self._create_all_parameters_tree()

            # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            self._create_selected_parameters_tree()

            # –ù–û–í–û–ï: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∫–æ–º–ø–æ–Ω–æ–≤–∫—É 50/50
            self.after(100, self._configure_initial_split)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ä–µ–≤—å–µ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")

    def _configure_initial_split(self):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏ 50/50"""
        try:
            total_width = self.paned_window.winfo_width()
            if total_width > 100:
                split_position = total_width // 2
                self.paned_window.sashpos(0, split_position)
                self.logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞ 50/50: {split_position}px")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏: {e}")

    def configure_split_layout(self, split_ratio: float = 0.5):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø–∞–Ω–µ–ª–µ–π"""
        try:
            if not 0.1 <= split_ratio <= 0.9:
                split_ratio = 0.5
                
            total_width = self.paned_window.winfo_width()
            if total_width > 100:
                split_position = int(total_width * split_ratio)
                self.paned_window.sashpos(0, split_position)
                self.logger.info(f"–ö–æ–º–ø–æ–Ω–æ–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {int(split_ratio*100)}/{int((1-split_ratio)*100)}")
            else:
                self.after(100, lambda: self.configure_split_layout(split_ratio))
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏: {e}")

    def _create_all_parameters_tree(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            all_frame = ttk.LabelFrame(self.paned_window, text="üìã –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", padding="5")
            all_frame.grid_rowconfigure(0, weight=1)
            all_frame.grid_columnconfigure(0, weight=1)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã
            columns = ("signal_code", "description", "line", "wagon")
            
            self.tree_all = ttk.Treeview(
                all_frame,
                columns=columns,
                show="tree headings",
                height=15
            )

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –∏–∫–æ–Ω–∫–∞–º–∏
            self.tree_all.heading("#0", text="üìÇ –ì—Ä—É–ø–ø–∞", anchor=tk.W)
            self.tree_all.heading("signal_code", text="üî¢ –ö–æ–¥ —Å–∏–≥–Ω–∞–ª–∞", anchor=tk.W)
            self.tree_all.heading("description", text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", anchor=tk.W)
            self.tree_all.heading("line", text="üîó –õ–∏–Ω–∏—è", anchor=tk.W)
            self.tree_all.heading("wagon", text="üöÉ –í–∞–≥–æ–Ω", anchor=tk.W)

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
            self.tree_all.column("#0", width=100, minwidth=80)
            self.tree_all.column("signal_code", width=120, minwidth=100)
            self.tree_all.column("description", width=250, minwidth=200)
            self.tree_all.column("line", width=80, minwidth=60)
            self.tree_all.column("wagon", width=60, minwidth=50)

            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
            scrollbar_all = ttk.Scrollbar(all_frame, orient="vertical", command=self.tree_all.yview)
            self.tree_all.configure(yscrollcommand=scrollbar_all.set)

            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
            self.tree_all.grid(row=0, column=0, sticky="nsew")
            scrollbar_all.grid(row=0, column=1, sticky="ns")

            # –°–æ–±—ã—Ç–∏—è
            self.tree_all.bind("<Double-1>", self._on_all_double_click)
            self.tree_all.bind("<Button-3>", self._on_all_right_click)
            self.tree_all.bind("<<TreeviewSelect>>", self._on_all_tree_select)
            self.tree_all.bind("<Return>", self._on_all_enter_key)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ PanedWindow
            self.paned_window.add(all_frame, weight=1)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")

    def _create_selected_parameters_tree(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            selected_frame = ttk.LabelFrame(self.paned_window, text="‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", padding="5")
            selected_frame.grid_rowconfigure(0, weight=1)
            selected_frame.grid_columnconfigure(0, weight=1)

            # –î–µ—Ä–µ–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            columns = ("signal_code", "description", "line")
            
            self.tree_selected = ttk.Treeview(
                selected_frame,
                columns=columns,
                show="tree headings",
                height=15
            )

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            self.tree_selected.heading("#0", text="‚Ññ", anchor=tk.W)
            self.tree_selected.heading("signal_code", text="üî¢ –ö–æ–¥ —Å–∏–≥–Ω–∞–ª–∞", anchor=tk.W)
            self.tree_selected.heading("description", text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", anchor=tk.W)
            self.tree_selected.heading("line", text="üîó –õ–∏–Ω–∏—è", anchor=tk.W)

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
            self.tree_selected.column("#0", width=40, minwidth=30)
            self.tree_selected.column("signal_code", width=120, minwidth=100)
            self.tree_selected.column("description", width=250, minwidth=200)
            self.tree_selected.column("line", width=80, minwidth=60)

            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
            scrollbar_selected = ttk.Scrollbar(selected_frame, orient="vertical", command=self.tree_selected.yview)
            self.tree_selected.configure(yscrollcommand=scrollbar_selected.set)

            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
            self.tree_selected.grid(row=0, column=0, sticky="nsew")
            scrollbar_selected.grid(row=0, column=1, sticky="ns")

            # –°–æ–±—ã—Ç–∏—è
            self.tree_selected.bind("<Double-1>", self._on_selected_double_click)
            self.tree_selected.bind("<Delete>", self._on_delete_selected)
            self.tree_selected.bind("<Button-3>", self._on_selected_right_click)
            self.tree_selected.bind("<Return>", self._on_selected_enter_key)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ PanedWindow
            self.paned_window.add(selected_frame, weight=1)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")

    def _create_control_buttons(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        try:
            self.logger.info("ParameterPanel: _create_control_buttons")

            buttons_frame = ttk.Frame(self)
            buttons_frame.grid(row=3, column=0, sticky="ew", pady=(5, 0))

            # –õ–µ–≤–∞—è –≥—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ–º
            left_buttons = ttk.Frame(buttons_frame)
            left_buttons.pack(side=tk.LEFT)

            ttk.Button(left_buttons, text="‚û§ –î–æ–±–∞–≤–∏—Ç—å", command=self._add_selected, width=12).pack(side=tk.LEFT, padx=(0, 5))
            ttk.Button(left_buttons, text="‚¨Ö –£–¥–∞–ª–∏—Ç—å", command=self._remove_selected, width=12).pack(side=tk.LEFT, padx=(0, 5))
            ttk.Button(left_buttons, text="üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", command=self._clear_all_selected, width=12).pack(side=tk.LEFT, padx=(0, 5))

            # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            center_buttons = ttk.Frame(buttons_frame)
            center_buttons.pack(side=tk.LEFT, padx=(20, 0))

            ttk.Button(center_buttons, text="‚¨Ü –í–≤–µ—Ä—Ö", command=self._move_selected_up, width=10).pack(side=tk.LEFT, padx=(0, 5))
            ttk.Button(center_buttons, text="‚¨á –í–Ω–∏–∑", command=self._move_selected_down, width=10).pack(side=tk.LEFT, padx=(0, 5))

            # –ü—Ä–∞–≤–∞—è –≥—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–æ–º
            right_buttons = ttk.Frame(buttons_frame)
            right_buttons.pack(side=tk.RIGHT)

            ttk.Button(right_buttons, text="üìÇ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å", command=self._expand_all, width=12).pack(side=tk.RIGHT, padx=(5, 0))
            ttk.Button(right_buttons, text="üìÅ –°–≤–µ—Ä–Ω—É—Ç—å", command=self._collapse_all, width=12).pack(side=tk.RIGHT, padx=(5, 0))

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")

    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ===

    def _on_search_changed(self, *args):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            search_text = self.search_var.get().strip().lower()
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
            if search_text == self._last_search_term:
                return
                
            self._last_search_term = search_text
            self._update_performance_indicator("üîç –ü–æ–∏—Å–∫...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            if search_text in self._search_cache:
                self.filtered_parameters = self._search_cache[search_text].copy()
            else:
                self._filter_parameters_by_search(search_text)
                # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞)
                if len(self._search_cache) < 50:
                    self._search_cache[search_text] = self.filtered_parameters.copy()
            
            self._populate_parameters_tree()
            self._update_counters()
            self._update_performance_indicator("‚ö° –ì–æ—Ç–æ–≤")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            self._update_performance_indicator("‚ùå –û—à–∏–±–∫–∞")

    def _on_grouping_changed(self, event):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏"""
        try:
            combo = event.widget
            selection = combo.get()
            
            grouping_map = {
                "–ü–æ —Ç–∏–ø—É —Å–∏–≥–Ω–∞–ª–∞": "signal_type",
                "–ü–æ –ª–∏–Ω–∏–∏ —Å–≤—è–∑–∏": "line",
                "–ü–æ –≤–∞–≥–æ–Ω—É": "wagon",
                "–ü–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É": "component"
            }
            
            new_mode = grouping_map.get(selection, "signal_type")
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ —Ä–µ–∂–∏–º –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
            if new_mode == self._last_grouping_mode:
                return
                
            self._last_grouping_mode = new_mode
            self.grouping_mode = new_mode
            
            self.logger.info(f"–ò–∑–º–µ–Ω–µ–Ω —Ä–µ–∂–∏–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: {self.grouping_mode}")
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –≥—Ä—É–ø–ø –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞
            self._group_cache.clear()
            
            self._update_performance_indicator("üìÇ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞...")
            self._populate_parameters_tree()
            self._update_performance_indicator("‚ö° –ì–æ—Ç–æ–≤")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: {e}")
            self._update_performance_indicator("‚ùå –û—à–∏–±–∫–∞")

    def _on_all_double_click(self, event):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ –¥–µ—Ä–µ–≤—É –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            selection = self.tree_all.selection()
            if selection:
                item = selection[0]
                if self._is_parameter_item(item):
                    param_data = self._get_param_from_tree_item(item)
                    if param_data:
                        if self._add_param_to_selected(param_data):
                            self._populate_selected_tree()
                            self.logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä: {param_data.get('signal_code', 'Unknown')}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞: {e}")

    def _on_all_enter_key(self, event):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ Enter –≤ –¥–µ—Ä–µ–≤–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        self._on_all_double_click(event)

    def _on_selected_enter_key(self, event):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ Enter –≤ –¥–µ—Ä–µ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        self._on_selected_double_click(event)

    def _on_all_right_click(self, event):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø—Ä–∞–≤—ã–π –∫–ª–∏–∫ –ø–æ –¥–µ—Ä–µ–≤—É –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            item = self.tree_all.identify_row(event.y)
            if item:
                self.tree_all.selection_set(item)
                
                context_menu = tk.Menu(self, tearoff=0)
                
                if self._is_parameter_item(item):
                    context_menu.add_command(label="‚û§ –î–æ–±–∞–≤–∏—Ç—å –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", command=self._add_selected)
                    context_menu.add_command(label="‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏", command=self._show_parameter_details)
                else:
                    context_menu.add_command(label="üìÇ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≥—Ä—É–ø–ø—É", command=lambda: self.tree_all.item(item, open=True))
                    context_menu.add_command(label="üìÅ –°–≤–µ—Ä–Ω—É—Ç—å –≥—Ä—É–ø–ø—É", command=lambda: self.tree_all.item(item, open=False))
                    context_menu.add_separator()
                    context_menu.add_command(label="‚û§‚û§ –î–æ–±–∞–≤–∏—Ç—å –≤—Å—é –≥—Ä—É–ø–ø—É", command=lambda: self._add_group_to_selected(item))
                
                context_menu.post(event.x_root, event.y_root)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é: {e}")

    def _on_all_tree_select(self, event):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –≤—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –¥–µ—Ä–µ–≤–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            selection = self.tree_all.selection()
            if selection:
                item = selection[0]
                if not self._is_parameter_item(item):
                    children_count = len(self.tree_all.get_children(item))
                    group_name = self.tree_all.item(item, 'text')
                    self._update_performance_indicator(f"üìÇ {group_name} ({children_count})")
                else:
                    param_data = self._get_param_from_tree_item(item)
                    if param_data:
                        signal_code = param_data.get('signal_code', 'Unknown')
                        self._update_performance_indicator(f"üî¢ {signal_code}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –¥–µ—Ä–µ–≤–µ: {e}")

    def _on_selected_double_click(self, event):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ –¥–µ—Ä–µ–≤—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            self._remove_selected()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º: {e}")

    def _on_selected_right_click(self, event):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø—Ä–∞–≤—ã–π –∫–ª–∏–∫ –ø–æ –¥–µ—Ä–µ–≤—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            item = self.tree_selected.identify_row(event.y)
            if item:
                self.tree_selected.selection_set(item)
                
                context_menu = tk.Menu(self, tearoff=0)
                context_menu.add_command(label="‚¨Ö –£–¥–∞–ª–∏—Ç—å –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö", command=self._remove_selected)
                context_menu.add_command(label="‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏", command=self._show_selected_details)
                context_menu.add_separator()
                context_menu.add_command(label="‚¨Ü –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö", command=self._move_selected_up)
                context_menu.add_command(label="‚¨á –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑", command=self._move_selected_down)
                context_menu.add_separator()
                context_menu.add_command(label="üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", command=self._clear_all_selected)
                
                context_menu.post(event.x_root, event.y_root)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö: {e}")

    def _on_delete_selected(self, event):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ –∫–ª–∞–≤–∏—à–µ Delete"""
        try:
            self._remove_selected()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ Delete: {e}")

    # === –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–ú–ò ===

    def update_parameters(self, parameters: List[Dict[str, Any]]):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ò –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            self.logger.info(f"üìä update_parameters –≤—ã–∑–≤–∞–Ω —Å {len(parameters)} –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
            
            if not parameters:
                self.logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤!")
                self._clear_all_data()
                return
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            if parameters:
                first_param = parameters[0]
                self.logger.debug(f"üìã –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {first_param}")
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            self._clear_cache()
            
            self._update_performance_indicator("üíæ –ó–∞–≥—Ä—É–∑–∫–∞...")
            
            self.all_parameters = parameters.copy()
            self.filtered_parameters = parameters.copy()
            
            self.logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: all={len(self.all_parameters)}, filtered={len(self.filtered_parameters)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º tree_all
            if not self.tree_all:
                self.logger.error("‚ùå tree_all –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!")
                return
            
            self._populate_parameters_tree()
            self._update_counters()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            tree_items = len(self.tree_all.get_children())
            self.logger.info(f"üå≥ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –¥–µ—Ä–µ–≤–µ –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {tree_items}")
            
            self._update_performance_indicator("‚ö° –ì–æ—Ç–æ–≤")
            self.logger.info(f"‚úÖ update_parameters –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: {len(parameters)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            self._update_performance_indicator("‚ùå –û—à–∏–±–∫–∞")
            import traceback
            traceback.print_exc()

    def _populate_parameters_tree(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ
            for item in self.tree_all.get_children():
                self.tree_all.delete(item)

            if not self.filtered_parameters:
                self.logger.warning("–ù–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                return

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –≥—Ä—É–ø–ø –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            cache_key = f"{self.grouping_mode}_{len(self.filtered_parameters)}_{hash(str(sorted([p.get('signal_code', '') for p in self.filtered_parameters[:10]])))}"
            
            if cache_key in self._group_cache:
                groups = self._group_cache[cache_key]
            else:
                groups = self._group_parameters_by_mode()
                if len(self._group_cache) < 20:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
                    self._group_cache[cache_key] = groups

            self.logger.debug(f"–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ({self.grouping_mode}): {[(k, len(v)) for k, v in groups.items()]}")

            # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            for group_name, group_params in sorted(groups.items()):
                if not group_params and not self.show_empty_groups:
                    continue
                    
                # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                group_display = f"{group_name} ({len(group_params)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)"
                group_id = self.tree_all.insert(
                    "", "end", 
                    text=group_display, 
                    values=("", "", "", ""),
                    tags=('group',)
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –≥—Ä—É–ø–ø—É
                for param in sorted(group_params, key=lambda x: x.get('signal_code', '')):
                    description = param.get('description', '')
                    if len(description) > 45:  # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –¥–ª–∏–Ω—É
                        description = description[:45] + "..."
                    
                    self.tree_all.insert(
                        group_id, "end",
                        text="",
                        values=(
                            param.get('signal_code', ''),
                            description,
                            param.get('line', ''),
                            param.get('wagon', '')
                        ),
                        tags=('parameter',)
                    )
            
            # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–º–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –≥—Ä—É–ø–ø
            self._smart_expand_groups()
                
            tree_items = len(self.tree_all.get_children())
            self.logger.debug(f"‚úÖ –î–µ—Ä–µ–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: {tree_items} –≥—Ä—É–ø–ø, {len(self.filtered_parameters)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            import traceback
            traceback.print_exc()

    def _smart_expand_groups(self):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –£–º–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –≥—Ä—É–ø–ø"""
        try:
            total_groups = len(self.tree_all.get_children())
            
            for item in self.tree_all.get_children():
                children_count = len(self.tree_all.get_children(item))
                
                # –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã —Å –Ω–µ–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                # –∏–ª–∏ –µ—Å–ª–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –Ω–µ–≤–µ–ª–∏–∫–æ
                if children_count <= 15 or (total_groups <= 3 and children_count <= 50):
                    self.tree_all.item(item, open=True)
                else:
                    self.tree_all.item(item, open=False)
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –≥—Ä—É–ø–ø: {e}")

    def _group_parameters_by_mode(self) -> Dict[str, List[Dict[str, Any]]]:
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º defaultdict"""
        groups = defaultdict(list)
        
        for param in self.filtered_parameters:
            if self.grouping_mode == 'signal_type':
                signal_code = param.get('signal_code', '')
                if signal_code:
                    signal_type = signal_code[0] if signal_code else 'Unknown'
                    group_key = f"–¢–∏–ø {signal_type}"
                else:
                    group_key = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
                    
            elif self.grouping_mode == 'line':
                line = param.get('line', '')
                group_key = f"–õ–∏–Ω–∏—è {line}" if line else "–ë–µ–∑ –ª–∏–Ω–∏–∏"
                
            elif self.grouping_mode == 'wagon':
                wagon = param.get('wagon', '')
                group_key = f"–í–∞–≥–æ–Ω {wagon}" if wagon else "–ë–µ–∑ –≤–∞–≥–æ–Ω–∞"
                
            elif self.grouping_mode == 'component':
                signal_code = param.get('signal_code', '')
                component = self._extract_component_from_signal(signal_code)
                group_key = f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {component}" if component else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç"
                
            else:
                group_key = "–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
            
            groups[group_key].append(param)
        
        return dict(groups)

    def _extract_component_from_signal(self, signal_code: str) -> str:
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑ –∫–æ–¥–∞ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            if not signal_code:
                return "Unknown"
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if not hasattr(self, '_component_cache'):
                self._component_cache = {}
                
            if signal_code in self._component_cache:
                return self._component_cache[signal_code]
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            patterns = [
                r'S_([A-Z]+)_',  # S_I_AKB_1 -> I
                r'([A-Z]+)_',    # AKB_VOLTAGE -> AKB
                r'^([A-Z]+)',    # TEMP123 -> TEMP
            ]
            
            result = "Unknown"
            for pattern in patterns:
                match = re.search(pattern, signal_code)
                if match:
                    result = match.group(1)
                    break
            
            if result == "Unknown":
                # Fallback - –ø–µ—Ä–≤—ã–µ 3 —Å–∏–º–≤–æ–ª–∞
                result = signal_code[:3] if len(signal_code) >= 3 else signal_code
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if len(self._component_cache) < 1000:
                self._component_cache[signal_code] = result
                
            return result
            
        except Exception:
            return "Unknown"

    def _filter_parameters_by_search(self, search_text: str):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        try:
            if not search_text:
                self.filtered_parameters = self.all_parameters.copy()
                return
                
            self.filtered_parameters = []
            search_lower = search_text.lower()
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            if len(search_text) > 2 and any(c in search_text for c in ['*', '?', '+']):
                try:
                    search_pattern = re.compile(search_text.replace('*', '.*').replace('?', '.'), re.IGNORECASE)
                    use_regex = True
                except re.error:
                    use_regex = False
            else:
                use_regex = False
            
            for param in self.all_parameters:
                # –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–æ–ª—è–º
                searchable_fields = [
                    param.get('signal_code', ''),
                    param.get('description', ''),
                    param.get('line', ''),
                    param.get('wagon', ''),
                ]
                
                searchable_text = ' '.join(str(field) for field in searchable_fields).lower()
                
                if use_regex:
                    if search_pattern.search(searchable_text):
                        self.filtered_parameters.append(param)
                else:
                    if search_lower in searchable_text:
                        self.filtered_parameters.append(param)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–∏—Å–∫—É: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            self.filtered_parameters = self.all_parameters.copy()

    def _clear_search(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            self.search_var.set("")
            self.search_entry.focus_set()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ–∫—É—Å –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–∏—Å–∫–∞: {e}")

    # === –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –í–´–ë–û–†–û–ú ===

    def _add_selected(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            selection = self.tree_all.selection()
            if not selection:
                self.logger.warning("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
                return
                
            added_count = 0
            
            for item in selection:
                if self._is_parameter_item(item):
                    param_data = self._get_param_from_tree_item(item)
                    if param_data and self._add_param_to_selected(param_data):
                        added_count += 1
            
            if added_count > 0:
                self._populate_selected_tree()
                self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º")
            else:
                self.logger.warning("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")

    def _add_group_to_selected(self, group_item):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–π –≥—Ä—É–ø–ø—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ"""
        try:
            added_count = 0
            
            for child_item in self.tree_all.get_children(group_item):
                if self._is_parameter_item(child_item):
                    param_data = self._get_param_from_tree_item(child_item)
                    if param_data and self._add_param_to_selected(param_data):
                        added_count += 1
            
            if added_count > 0:
                self._populate_selected_tree()
                group_name = self.tree_all.item(group_item, 'text')
                self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ '{group_name}': {added_count} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")

    def _add_param_to_selected(self, param_data: Dict[str, Any]) -> bool:
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º"""
        try:
            signal_code = param_data.get('signal_code', '')
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            if not hasattr(self, '_selected_codes_set'):
                self._selected_codes_set = set()
                
            if signal_code in self._selected_codes_set:
                return False
            
            self.selected_parameters.append(param_data)
            self._selected_codes_set.add(signal_code)
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: {e}")
            return False

    def _remove_selected(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            selection = self.tree_selected.selection()
            if not selection:
                self.logger.warning("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return
                
            indices_to_remove = []
            
            for item in selection:
                index = self.tree_selected.index(item)
                indices_to_remove.append(index)
            
            # –£–¥–∞–ª—è–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            removed_count = 0
            for index in sorted(indices_to_remove, reverse=True):
                if 0 <= index < len(self.selected_parameters):
                    removed_param = self.selected_parameters.pop(index)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º set –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤
                    if hasattr(self, '_selected_codes_set'):
                        signal_code = removed_param.get('signal_code', '')
                        self._selected_codes_set.discard(signal_code)
                    
                    removed_count += 1
                    self.logger.debug(f"–£–¥–∞–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä: {removed_param.get('signal_code', 'Unknown')}")
            
            if removed_count > 0:
                self._populate_selected_tree()
                self.logger.info(f"–£–¥–∞–ª–µ–Ω–æ {removed_count} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")

    def _clear_all_selected(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            if not self.selected_parameters:
                self.logger.info("–ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
                return
                
            count = len(self.selected_parameters)
            self.selected_parameters.clear()
            
            # –û—á–∏—â–∞–µ–º set –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤
            if hasattr(self, '_selected_codes_set'):
                self._selected_codes_set.clear()
                
            self._populate_selected_tree()
            self.logger.info(f"–û—á–∏—â–µ–Ω–æ {count} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")

    def _populate_selected_tree(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ
            for item in self.tree_selected.get_children():
                self.tree_selected.delete(item)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            for idx, param in enumerate(self.selected_parameters, 1):
                description = param.get('description', '')
                if len(description) > 45:  # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –¥–ª–∏–Ω—É
                    description = description[:45] + "..."
                
                self.tree_selected.insert(
                    "", "end",
                    text=str(idx),
                    values=(
                        param.get('signal_code', ''),
                        description,
                        param.get('line', '')
                    )
                )
            
            self._update_counters()
            self._notify_selection_changed()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö: {e}")

    def _move_selected_up(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤–≤–µ—Ä—Ö"""
        try:
            selection = self.tree_selected.selection()
            if not selection:
                return
            
            index = self.tree_selected.index(selection[0])
            if index > 0:
                # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –≤ —Å–ø–∏—Å–∫–µ
                self.selected_parameters[index], self.selected_parameters[index-1] = \
                    self.selected_parameters[index-1], self.selected_parameters[index]
                
                self._populate_selected_tree()
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±–æ—Ä
                new_item = self.tree_selected.get_children()[index-1]
                self.tree_selected.selection_set(new_item)
                self.tree_selected.focus(new_item)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤–≤–µ—Ä—Ö: {e}")

    def _move_selected_down(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤–Ω–∏–∑"""
        try:
            selection = self.tree_selected.selection()
            if not selection:
                return
            
            index = self.tree_selected.index(selection[0])
            if index < len(self.selected_parameters) - 1:
                # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –≤ —Å–ø–∏—Å–∫–µ
                self.selected_parameters[index], self.selected_parameters[index+1] = \
                    self.selected_parameters[index+1], self.selected_parameters[index]
                
                self._populate_selected_tree()
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±–æ—Ä
                new_item = self.tree_selected.get_children()[index+1]
                self.tree_selected.selection_set(new_item)
                self.tree_selected.focus(new_item)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤–Ω–∏–∑: {e}")

    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

    def _is_parameter_item(self, item) -> bool:
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º"""
        try:
            tags = self.tree_all.item(item, 'tags')
            return tags and 'parameter' in tags
        except Exception:
            return False

    def _get_param_from_tree_item(self, item) -> Optional[Dict[str, Any]]:
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–µ—Ä–µ–≤–∞"""
        try:
            if not self._is_parameter_item(item):
                return None
            
            values = self.tree_all.item(item, 'values')
            if not values:
                return None
            
            signal_code = values[0]
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            if not hasattr(self, '_params_dict'):
                self._params_dict = {p.get('signal_code', ''): p for p in self.filtered_parameters}
            
            return self._params_dict.get(signal_code)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–∑ –¥–µ—Ä–µ–≤–∞: {e}")
            return None

    def _show_parameter_details(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
        try:
            selection = self.tree_all.selection()
            if not selection:
                return
            
            param_data = self._get_param_from_tree_item(selection[0])
            if not param_data:
                return
            
            self._show_details_window(param_data, "–î–µ—Ç–∞–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: {e}")

    def _show_selected_details(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö"""
        try:
            selection = self.tree_selected.selection()
            if not selection:
                return
            
            index = self.tree_selected.index(selection[0])
            if 0 <= index < len(self.selected_parameters):
                param_data = self.selected_parameters[index]
                self._show_details_window(param_data, "–î–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")

    def _show_details_window(self, param_data: Dict[str, Any], title: str):
        """–£–õ–£–ß–®–ï–ù–ù–û–ï –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
        try:
            details_window = tk.Toplevel(self)
            details_window.title(title)
            details_window.geometry("600x500")
            details_window.transient(self)
            details_window.grab_set()
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
            header_frame = ttk.Frame(details_window)
            header_frame.pack(fill=tk.X, padx=10, pady=5)
            
            ttk.Label(
                header_frame,
                text=f"‚ÑπÔ∏è {title}",
                font=('Arial', 14, 'bold')
            ).pack()
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            info_frame = ttk.LabelFrame(details_window, text="–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", padding="10")
            info_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
            text_frame = ttk.Frame(info_frame)
            text_frame.pack(fill=tk.BOTH, expand=True)
            
            text_widget = tk.Text(text_frame, wrap=tk.WORD, font=('Courier', 10))
            scrollbar = ttk.Scrollbar(text_frame, orient="vertical", command=text_widget.yview)
            text_widget.configure(yscrollcommand=scrollbar.set)
            
            text_widget.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
            scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            details_text = f"–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–ê–†–ê–ú–ï–¢–†–ï\n{'='*60}\n\n"
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            main_fields = ['signal_code', 'description', 'line', 'wagon']
            for field in main_fields:
                if field in param_data:
                    value = param_data[field]
                    field_name = field.upper().replace('_', ' ')
                    details_text += f"{field_name:20}: {value}\n"
            
            details_text += "\n" + "="*60 + "\n–í–°–ï –ü–û–õ–Ø:\n" + "="*60 + "\n\n"
            
            # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
            for key, value in sorted(param_data.items()):
                if key not in main_fields:
                    if isinstance(value, list):
                        value_str = ', '.join(str(v) for v in value)
                    else:
                        value_str = str(value)
                    
                    field_name = key.upper().replace('_', ' ')
                    details_text += f"{field_name:20}: {value_str}\n"
            
            text_widget.insert(tk.END, details_text)
            text_widget.config(state=tk.DISABLED)
            
            # –ö–Ω–æ–ø–∫–∏
            button_frame = ttk.Frame(details_window)
            button_frame.pack(fill=tk.X, padx=10, pady=5)
            
            ttk.Button(
                button_frame, 
                text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", 
                command=lambda: self._copy_to_clipboard(details_text)
            ).pack(side=tk.LEFT, padx=(0, 5))
            
            ttk.Button(
                button_frame, 
                text="–ó–∞–∫—Ä—ã—Ç—å", 
                command=details_window.destroy
            ).pack(side=tk.RIGHT)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞ –¥–µ—Ç–∞–ª–µ–π: {e}")

    def _copy_to_clipboard(self, text: str):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        try:
            self.clipboard_clear()
            self.clipboard_append(text)
            self._update_performance_indicator("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ")
            self.after(2000, lambda: self._update_performance_indicator("‚ö° –ì–æ—Ç–æ–≤"))
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä: {e}")

    def _expand_all(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø"""
        try:
            for item in self.tree_all.get_children():
                self.tree_all.item(item, open=True)
            self._update_performance_indicator("üìÇ –†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ")
            self.after(1000, lambda: self._update_performance_indicator("‚ö° –ì–æ—Ç–æ–≤"))
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø: {e}")

    def _collapse_all(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø"""
        try:
            for item in self.tree_all.get_children():
                self.tree_all.item(item, open=False)
            self._update_performance_indicator("üìÅ –°–≤–µ—Ä–Ω—É—Ç–æ")
            self.after(1000, lambda: self._update_performance_indicator("‚ö° –ì–æ—Ç–æ–≤"))
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø: {e}")

    def _update_counters(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤"""
        try:
            all_count = len(self.all_parameters)
            filtered_count = len(self.filtered_parameters)
            selected_count = len(self.selected_parameters)
            
            if self.all_count_label:
                self.all_count_label.config(text=f"üìä –í—Å–µ–≥–æ: {all_count}")
            if self.filtered_count_label:
                self.filtered_count_label.config(text=f"üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {filtered_count}")
            if self.selected_count_label:
                self.selected_count_label.config(text=f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {selected_count}")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤: {e}")

    def _update_performance_indicator(self, message: str):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            if self.performance_label:
                self.performance_label.config(text=message)
                self.update_idletasks()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: {e}")

    def _notify_selection_changed(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞"""
        try:
            count = len(self.selected_parameters)
            if self.on_selection_changed:
                self.on_selection_changed(count)
                
            # –¢–∞–∫–∂–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.controller and hasattr(self.controller, '_on_parameter_selection_changed'):
                self.controller._on_parameter_selection_changed(count)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞: {e}")

    def _clear_cache(self):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à–µ–π"""
        try:
            self._search_cache.clear()
            self._group_cache.clear()
            if hasattr(self, '_component_cache'):
                self._component_cache.clear()
            if hasattr(self, '_params_dict'):
                delattr(self, '_params_dict')
            if hasattr(self, '_selected_codes_set'):
                self._selected_codes_set.clear()
            self.logger.debug("–ö—ç—à –æ—á–∏—â–µ–Ω")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")

    def _clear_all_data(self):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.all_parameters.clear()
            self.filtered_parameters.clear()
            self.selected_parameters.clear()
            self._clear_cache()
            
            # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤—å—è
            if self.tree_all:
                for item in self.tree_all.get_children():
                    self.tree_all.delete(item)
            
            if self.tree_selected:
                for item in self.tree_selected.get_children():
                    self.tree_selected.delete(item)
            
            self._update_counters()
            self._update_performance_indicator("üóë –û—á–∏—â–µ–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    # === –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ ===

    def get_selected_parameters(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        return [param.copy() for param in self.selected_parameters]

    def clear_selection(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—ã–±–æ—Ä–∞"""
        self._clear_all_selected()

    def set_grouping_mode(self, mode: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏"""
        if mode in ['signal_type', 'line', 'wagon', 'component']:
            self.grouping_mode = mode
            self._group_cache.clear()  # –û—á–∏—â–∞–µ–º –∫—ç—à –≥—Ä—É–ø–ø
            self._populate_parameters_tree()

    def update_counters(self, all_count: int, selected_count: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ (–≤–Ω–µ—à–Ω–∏–π –≤—ã–∑–æ–≤)"""
        try:
            if self.all_count_label:
                self.all_count_label.config(text=f"üìä –í—Å–µ–≥–æ: {all_count}")
            if self.selected_count_label:
                self.selected_count_label.config(text=f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {selected_count}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤: {e}")

    def set_loading_state(self, loading: bool):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏"""
        try:
            state = tk.DISABLED if loading else tk.NORMAL
            
            widgets = [self.tree_all, self.tree_selected, self.search_entry, self.grouping_combo]
            for widget in widgets:
                if widget:
                    widget.config(state=state)
                    
            if loading:
                self._update_performance_indicator("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...")
            else:
                self._update_performance_indicator("‚ö° –ì–æ—Ç–æ–≤")
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

    def cleanup(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            self._clear_all_data()
            
            # –û—á–∏—â–∞–µ–º callbacks
            self.on_selection_changed = None
            
            # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            self.controller = None
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
            self._clear_cache()
            
            # –û–±–Ω—É–ª—è–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
            self.tree_all = None
            self.tree_selected = None
            self.search_entry = None
            self.grouping_combo = None
            self.all_count_label = None
            self.filtered_count_label = None
            self.selected_count_label = None
            self.performance_label = None
            
            # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞
            if hasattr(self, 'search_var'):
                self.search_var = None
                
            # –û—á–∏—â–∞–µ–º PanedWindow
            if hasattr(self, 'paned_window'):
                self.paned_window = None
            
            self.logger.info("ParameterPanel —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ ParameterPanel: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            try:
                self.all_parameters.clear()
                self.selected_parameters.clear()
                self.filtered_parameters.clear()
            except:
                pass

    def __str__(self):
        return f"ParameterPanel(all={len(self.all_parameters)}, filtered={len(self.filtered_parameters)}, selected={len(self.selected_parameters)})"

    def __repr__(self):
        return self.__str__()

