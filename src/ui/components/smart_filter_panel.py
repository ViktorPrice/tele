"""
–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –ø–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ –¥–ª—è 11-–≤–∞–≥–æ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞
–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –º–∞–ø–ø–∏–Ω–≥–æ–º –≤–∞–≥–æ–Ω–æ–≤
"""
import tkinter as tk
from tkinter import ttk
import logging
from typing import Dict, Any, List, Optional, Callable
from dataclasses import dataclass, field
from datetime import datetime


@dataclass
class FilterState:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    signal_types: set = field(default_factory=set)
    wagons: set = field(default_factory=set)
    lines: set = field(default_factory=set)
    criticality: set = field(default_factory=set)
    systems: set = field(default_factory=set)
    changed_only: bool = False
    diagnostic_mode: bool = False

    def to_dict(self) -> Dict[str, Any]:
        return {
            'signal_types': list(self.signal_types),
            'wagons': list(self.wagons),
            'lines': list(self.lines),
            'criticality': list(self.criticality),
            'systems': list(self.systems),
            'changed_only': self.changed_only,
            'diagnostic_mode': self.diagnostic_mode
        }


class FilterObserver:
    """–†–µ–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤"""

    def __init__(self):
        self._subscribers: List[Callable] = []

    def subscribe(self, callback: Callable):
        self._subscribers.append(callback)

    def notify(self, state: FilterState):
        for callback in self._subscribers:
            try:
                callback(state)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ callback —Ñ–∏–ª—å—Ç—Ä–∞: {e}")


class SmartFilterPanel(ttk.Frame):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –ø–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏"""

    def __init__(self, parent, controller=None):
        super().__init__(parent)
        self.controller = controller
        self.logger = logging.getLogger(self.__class__.__name__)

        # –†–µ–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        self.state = FilterState()
        self.observer = FilterObserver()

        # UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_updating = False

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.diag_vars = {}

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.all_signal_types = []
        self.all_lines = []

        # –ù–û–í–û–ï: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥ –≤–∞–≥–æ–Ω–æ–≤
        self.leading_wagon = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.wagon_mapping = {}  # –°–∫–≤–æ–∑–Ω–∞—è ‚Üí –†–µ–∞–ª—å–Ω–∞—è
        self.reverse_wagon_mapping = {}  # –†–µ–∞–ª—å–Ω–∞—è ‚Üí –°–∫–≤–æ–∑–Ω–∞—è
        self.real_wagons_in_data = set()  # –†–µ–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        self._wagon_ui_needs_update = False  # –§–ª–∞–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI

        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.stats_label = None
        self.wagon_buttons = {}
        self.wagon_vars = {}

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∫–ª–∞–¥–∫–∏ –≤–º–µ—Å—Ç–æ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
        self.notebook = ttk.Notebook(self)
        self.notebook.grid(row=1, column=0, sticky="ew")
        self.notebook.bind("<<NotebookTabChanged>>", self._on_tab_changed)

        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self.tabs = {}

        self._setup_smart_ui()
        self.logger.info(
            "SmartFilterPanel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –º–∞–ø–ø–∏–Ω–≥–æ–º")

    def _setup_smart_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ UI —Å –≤–∫–ª–∞–¥–∫–∞–º–∏"""
        try:
            self.grid_columnconfigure(0, weight=1)

            # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∂–∏–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            self._create_compact_header()

            # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
            self._create_tabs()

            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            self._create_quick_actions_bar()

            self.logger.info("–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π UI —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ —Å–æ–∑–¥–∞–Ω")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ UI: {e}")

    def _create_tabs(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        tab_definitions = [
            ("signals", "üìä –°–∏–≥–Ω–∞–ª—ã", self._create_signals_content),
            ("wagons", "üöÉ –í–∞–≥–æ–Ω—ã", self._create_wagons_content),
            ("lines", "üì° –õ–∏–Ω–∏–∏", self._create_lines_content),
            ("diagnostic", "üö® –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", self._create_diagnostic_content)
        ]

        for tab_id, title, content_creator in tab_definitions:
            frame = ttk.Frame(self.notebook)
            self.notebook.add(frame, text=title)
            self.tabs[tab_id] = {
                'frame': frame,
                'creator': content_creator,
                'initialized': False
            }

    def _on_tab_changed(self, event):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫"""
        try:
            selected_tab = event.widget.select()
            for tab_id, tab_info in self.tabs.items():
                if str(tab_info['frame']) == selected_tab:
                    if not tab_info['initialized']:
                        tab_info['creator'](tab_info['frame'])
                        tab_info['initialized'] = True
                    # –ü—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –≤–∞–≥–æ–Ω–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ–º UI –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if tab_id == 'wagons' and self._wagon_ui_needs_update:
                        self._update_wagon_ui_with_mapping()
                        self._wagon_ui_needs_update = False
                    break
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫: {e}")

    def _create_compact_header(self):
        """–°–≤–µ—Ä—Ö–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∂–∏–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        header = ttk.Frame(self)
        header.grid(row=0, column=0, sticky="ew", pady=(0, 2))
        header.grid_columnconfigure(1, weight=1)

        # –ò–∫–æ–Ω–∫–∞-–∫–Ω–æ–ø–∫–∞ (–±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è –≤–∫–ª–∞–¥–æ–∫)
        self.collapse_btn = ttk.Button(
            header,
            text="üîç",
            width=3,
            command=self._toggle_main_section
        )
        self.collapse_btn.grid(row=0, column=0)

        # –ñ–∏–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_label = ttk.Label(
            header,
            text="–§–∏–ª—å—Ç—Ä—ã: 0/0",
            font=('Arial', 8)
        )
        self.stats_label.grid(row=0, column=1, sticky="w", padx=(5, 0))

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∂–∏–º–∞
        self.mode_label = ttk.Label(
            header,
            text="‚óè",
            foreground="gray",
            font=('Arial', 8)
        )
        self.mode_label.grid(row=0, column=2)

    def _toggle_main_section(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∫–ª–∞–¥–æ–∫"""
        try:
            if self.notebook.winfo_viewable():
                self.notebook.grid_remove()
                self.collapse_btn.config(text="üîç‚ñº")
            else:
                self.notebook.grid(row=1, column=0, sticky="ew")
                self.collapse_btn.config(text="üîç‚ñ≤")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ–∫—Ü–∏–∏: {e}")

    def _create_signals_content(self, parent):
        """–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
        signals_frame = ttk.Frame(parent)
        signals_frame.pack(fill="x", pady=2)

        ttk.Label(signals_frame, text="–¢–∏–ø—ã:",
                  font=('Arial', 8)).pack(anchor="w")

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤
        self.signal_type_vars = {}

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤ (—É–±—Ä–∞–Ω—ã —Å–ª–æ–≤–∞ "—Å–∏–≥–Ω–∞–ª—ã" –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è)
        categories = [
            ("BY_ (–ë–∞–π—Ç)", lambda s: s.startswith('BY_') or s == 'BY'),
            ("F_ (Float)", lambda s: s.startswith('F_') or s == 'F'),
            ("S_ (S)", lambda s: s.startswith('S_') or s == 'S'),
            ("B_ (Bool)", lambda s: (s.startswith('B_')
                                     or s == 'B') and not s.startswith('Banner')),
            ("DW_ (DWord)", lambda s: s.startswith('DW_') or s == 'DW'),
            ("W_ (Word)", lambda s: s.startswith('W_') or s == 'W'),
            ("Banner", lambda s: s.startswith('Banner') or 'Banner#' in s),
            ("–î—Ä—É–≥–∏–µ", lambda s: not any([
                s.startswith(prefix) or s == prefix for prefix in
                ['BY_', 'BY', 'F_', 'F', 'S_', 'S',
                    'B_', 'B', 'DW_', 'DW', 'W_', 'W']
            ]) and not (s.startswith('Banner') or 'Banner#' in s))
        ]

        # –§—Ä–µ–π–º –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
        checkbox_frame = ttk.Frame(signals_frame)
        checkbox_frame.pack(fill="x", pady=2)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–í—Å–µ" –∏ "–°–±—Ä–æ—Å"
        buttons_frame = ttk.Frame(signals_frame)
        buttons_frame.pack(fill="x", pady=(5, 2))

        ttk.Button(buttons_frame, text="–í—Å–µ", width=6,
                   command=self._select_all_signals).pack(side="left", padx=1)
        ttk.Button(buttons_frame, text="–°–±—Ä–æ—Å", width=6,
                   command=self._deselect_all_signals).pack(side="left", padx=1)

        for text, filter_func in categories:
            var = tk.BooleanVar(value=True)
            self.signal_type_vars[text] = (var, filter_func)
            cb = ttk.Checkbutton(
                checkbox_frame,
                text=text,
                variable=var,
                command=self._on_signal_checkboxes_changed
            )
            cb.pack(side="left", padx=5, pady=1)

    def _create_wagons_content(self, parent):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∞–≥–æ–Ω–æ–≤ —Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–º —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫"""
        wagons_frame = ttk.Frame(parent)
        wagons_frame.pack(fill="x", pady=2)

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–∞–≤–µ
        if hasattr(self, 'wagon_mapping') and self.wagon_mapping:
            composition_text = f"–í–µ–¥—É—â–∏–π: {self.leading_wagon}, –°–æ—Å—Ç–∞–≤: {'-'.join([self.wagon_mapping.get(i, str(i)) for i in range(1, 12)])}"
        else:
            composition_text = "11-–≤–∞–≥–æ–Ω–Ω—ã–π —Å–æ—Å—Ç–∞–≤"

        ttk.Label(wagons_frame, text=composition_text,
                  font=('Arial', 7)).pack(anchor="w")

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–∞–≥–æ–Ω–æ–≤
        self.wagon_container = ttk.Frame(wagons_frame)
        self.wagon_container.pack(fill="x", pady=2)

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –µ—Å–ª–∏ –º–∞–ø–ø–∏–Ω–≥ —É–∂–µ –µ—Å—Ç—å
        if hasattr(self, 'wagon_mapping') and self.wagon_mapping and hasattr(self, 'real_wagons_in_data'):
            self._create_wagon_buttons_immediately()

        # –ö–Ω–æ–ø–∫–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞
        group_frame = ttk.Frame(wagons_frame)
        group_frame.pack(fill="x", pady=(5, 0))

        # ttk.Button(group_frame, text="–ì+–ú", width=6, command=self._select_head_motor).pack(side="left", padx=1)
        ttk.Button(group_frame, text="–ì", width=6,
                   command=self._select_group_g).pack(side="left", padx=1)
        ttk.Button(group_frame, text="–ú", width=6,
                   command=self._select_group_m).pack(side="left", padx=1)
        ttk.Button(group_frame, text="–ù–ú", width=6,
                   command=self._select_group_nm).pack(side="left", padx=1)
        ttk.Button(group_frame, text="–ë–û", width=6,
                   command=self._select_group_bo).pack(side="left", padx=1)
        ttk.Button(group_frame, text="–í—Å–µ", width=6,
                   command=self._select_all_wagons).pack(side="left", padx=1)
        ttk.Button(group_frame, text="–°–±—Ä–æ—Å", width=6,
                   command=self._deselect_all_wagons).pack(side="left", padx=1)

    def _create_wagon_buttons_immediately(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤–∞–≥–æ–Ω–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ callback"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
            for widget in self.wagon_container.winfo_children():
                widget.destroy()

            self.wagon_buttons = {}
            self.wagon_vars = {}

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–≤–æ–∑–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
            buttons_frame = ttk.Frame(self.wagon_container)
            buttons_frame.pack(fill="x", pady=2)

            for logical_num in range(1, 12):  # –°–∫–≤–æ–∑–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è 1-11
                real_wagon = self.wagon_mapping.get(
                    logical_num, str(logical_num))

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –≤–∞–≥–æ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö
                wagon_exists = real_wagon in self.real_wagons_in_data

                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
                var = tk.BooleanVar(
                    value=wagon_exists and real_wagon in self.state.wagons)
                self.wagon_vars[logical_num] = var

                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
                def create_toggle_function(logical_number):
                    return lambda: self._toggle_wagon_with_mapping(logical_number)

                # –ö–Ω–æ–ø–∫–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –≤–∞–≥–æ–Ω–∞
                btn = ttk.Checkbutton(
                    buttons_frame,
                    text=real_wagon,  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
                    variable=var,
                    command=create_toggle_function(logical_num),
                    width=4,
                    state="normal" if wagon_exists else "disabled"
                )
                btn.pack(side="left", padx=1)
                self.wagon_buttons[logical_num] = btn

            self.logger.info(
                f"‚úÖ –ö–Ω–æ–ø–∫–∏ –≤–∞–≥–æ–Ω–æ–≤ —Å–æ–∑–¥–∞–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ callback: {list(self.wagon_mapping.values())}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤–∞–≥–æ–Ω–æ–≤: {e}")

    def _create_lines_content(self, parent):
        """–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ª–∏–Ω–∏–π —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
        lines_frame = ttk.Frame(parent)
        lines_frame.pack(fill="x", pady=2)

        ttk.Label(lines_frame, text="–õ–∏–Ω–∏–∏:",
                  font=('Arial', 8)).pack(anchor="w")

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤ –ª–∏–Ω–∏–π
        self.line_vars = {}

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤ –ª–∏–Ω–∏–π
        self.lines_checkbox_frame = ttk.Frame(lines_frame)
        self.lines_checkbox_frame.pack(fill="x", pady=2)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–í—Å–µ" –∏ "–°–±—Ä–æ—Å"
        buttons_frame = ttk.Frame(lines_frame)
        buttons_frame.pack(fill="x", pady=(5, 2))

        ttk.Button(buttons_frame, text="–í—Å–µ", width=6,
                   command=self._select_all_lines).pack(side="left", padx=1)
        ttk.Button(buttons_frame, text="–°–±—Ä–æ—Å", width=6,
                   command=self._deselect_all_lines).pack(side="left", padx=1)

    def _on_line_checkbox_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —á–µ–∫–±–æ–∫—Å–æ–≤ –ª–∏–Ω–∏–π"""
        try:
            selected_lines = set()
            for line, var in self.line_vars.items():
                if var.get():
                    selected_lines.add(line)
            self.state.lines = selected_lines
            self.logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –ª–∏–Ω–∏–π: {len(selected_lines)}")
            self._notify_state_changed()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–±–æ–∫—Å–æ–≤ –ª–∏–Ω–∏–π: {e}")

    # –£–¥–∞–ª—è–µ–º –º–µ—Ç–æ–¥—ã _on_lines_search –∏ _on_line_selected, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏

    def _create_diagnostic_content(self, parent):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –æ–ø—Ü–∏–π"""
        diag_frame = ttk.Frame(parent)
        diag_frame.pack(fill="x", pady=2)

        self.diag_vars = {}

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–í—Å–µ" –∏ "–°–±—Ä–æ—Å"
        buttons_frame = ttk.Frame(diag_frame)
        buttons_frame.pack(fill="x", pady=(0, 5))

        ttk.Button(buttons_frame, text="–í—Å–µ", width=6,
                   command=self._select_all_diagnostics).pack(side="left", padx=1)
        ttk.Button(buttons_frame, text="–°–±—Ä–æ—Å", width=6,
                   command=self._deselect_all_diagnostics).pack(side="left", padx=1)

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º font –∏–∑ LabelFrame
        crit_frame = ttk.LabelFrame(diag_frame, text="–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å")
        crit_frame.pack(fill="x", pady=2)

        critical_options = [
            ("üö® –ê–≤–∞—Ä–∏–π–Ω—ã–µ", "emergency"),
            ("‚ö†Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "safety"),
            ("‚ö° –≠–Ω–µ—Ä–≥–æ—Å–∏—Å—Ç–µ–º–∞", "power_critical"),
            ("üõë –¢–æ—Ä–º–æ–∑–∞", "brake_critical")
        ]

        for text, key in critical_options:
            var = tk.BooleanVar()
            self.diag_vars[key] = var
            ttk.Checkbutton(crit_frame, text=text, variable=var,
                            command=self._on_diagnostic_changed).pack(side="left", padx=2)

        # –°–∏—Å—Ç–µ–º—ã
        sys_frame = ttk.LabelFrame(diag_frame, text="–°–∏—Å—Ç–µ–º—ã")
        sys_frame.pack(fill="x", pady=2)

        system_options = [
            ("üöÇ –¢—è–≥–∞", "traction"),
            ("üõë –¢–æ—Ä–º–æ–∑–∞", "brakes"),
            ("üö™ –î–≤–µ—Ä–∏", "doors"),
            ("‚ö° –≠–Ω–µ—Ä–≥–∏—è", "power"),
            ("üå°Ô∏è –ö–ª–∏–º–∞—Ç", "climate"),
            ("üì° –°–≤—è–∑—å", "communication")
        ]

        for text, key in system_options:
            var = tk.BooleanVar()
            self.diag_vars[f"sys_{key}"] = var
            ttk.Checkbutton(sys_frame, text=text, variable=var,
                            command=self._on_diagnostic_changed).pack(side="left", padx=2)

        # –§—É–Ω–∫—Ü–∏–∏
        func_frame = ttk.LabelFrame(diag_frame, text="–§—É–Ω–∫—Ü–∏–∏")
        func_frame.pack(fill="x", pady=2)

        function_options = [
            ("‚ùå –ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏", "faults"),
            ("üìä –ò–∑–º–µ—Ä–µ–Ω–∏—è", "measurements"),
            ("üîß –°–æ—Å—Ç–æ—è–Ω–∏—è", "states"),
            ("üö® –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "diagnostics")
        ]

        for text, key in function_options:
            var = tk.BooleanVar()
            self.diag_vars[f"func_{key}"] = var
            ttk.Checkbutton(func_frame, text=text, variable=var,
                            command=self._on_diagnostic_changed).pack(side="left", padx=2)

    # === –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ì–û –ú–ê–ü–ü–ò–ù–ì–ê ===

    def _get_leading_wagon_from_controller(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ–¥—É—â–µ–≥–æ –≤–∞–≥–æ–Ω–∞ –∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        try:
            if (self.controller and
                hasattr(self.controller, 'model') and
                    hasattr(self.controller.model, 'data_loader')):

                data_loader = self.controller.model.data_loader
                if hasattr(data_loader, 'get_controlling_wagon'):
                    leading_wagon = data_loader.get_controlling_wagon()
                    self.logger.info(
                        f"üîç –í–µ–¥—É—â–∏–π –≤–∞–≥–æ–Ω –∏–∑ data_loader: {leading_wagon}")
                    return leading_wagon
                elif hasattr(data_loader, 'leading_wagon'):
                    leading_wagon = data_loader.leading_wagon
                    self.logger.info(
                        f"üîç –í–µ–¥—É—â–∏–π –≤–∞–≥–æ–Ω –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞: {leading_wagon}")
                    return leading_wagon

            self.logger.warning(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ–¥—É—â–∏–π –≤–∞–≥–æ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1")
            return 1

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ–¥—É—â–µ–≥–æ –≤–∞–≥–æ–Ω–∞: {e}")
            return 1

    def _create_wagon_mapping(self, leading_wagon: int):
        """–ü–†–û–í–ï–†–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –≤–∞–≥–æ–Ω–æ–≤"""
        try:
            self.logger.info(
                f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ –≤–∞–≥–æ–Ω–∞: {leading_wagon}")

            if leading_wagon == 1:
                self.wagon_mapping = {
                    1: "1–≥", 2: "11–±–æ", 3: "2–º", 4: "3–Ω–º", 5: "6–º",
                    6: "8–º", 7: "7–Ω–º", 8: "12–º", 9: "13–±–æ", 10: "10–º", 11: "9–≥"
                }
                self.logger.info(
                    "‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫–∞—Ä—Ç–∞ –≤–∞–≥–æ–Ω–æ–≤ –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ –≤–∞–≥–æ–Ω–∞ 1")
            elif leading_wagon == 9:
                self.wagon_mapping = {
                    1: "9–≥", 2: "10–º", 3: "13–±–æ", 4: "12–º", 5: "7–Ω–º",
                    6: "8–º", 7: "6–º", 8: "3–Ω–º", 9: "2–º", 10: "11–±–æ", 11: "1–≥"
                }
                self.logger.info(
                    "‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫–∞—Ä—Ç–∞ –≤–∞–≥–æ–Ω–æ–≤ –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ –≤–∞–≥–æ–Ω–∞ 9")
            else:
                # Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤–µ–¥—É—â–∏—Ö –≤–∞–≥–æ–Ω–æ–≤
                self.wagon_mapping = {i: str(i) for i in range(1, 12)}
                self.logger.info(
                    f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫–∞—Ä—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ –≤–∞–≥–æ–Ω–∞ {leading_wagon}")

            # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            self.reverse_wagon_mapping = {
                v: k for k, v in self.wagon_mapping.items()}

            self.logger.info(f"üìã –°–æ–∑–¥–∞–Ω –ø—Ä—è–º–æ–π –º–∞–ø–ø–∏–Ω–≥: {self.wagon_mapping}")
            self.logger.info(
                f"üìã –°–æ–∑–¥–∞–Ω –æ–±—Ä–∞—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥: {self.reverse_wagon_mapping}")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞ –≤–∞–≥–æ–Ω–æ–≤: {e}")
            # Fallback
            self.wagon_mapping = {i: str(i) for i in range(1, 12)}
            self.reverse_wagon_mapping = {str(i): i for i in range(1, 12)}

    def _update_wagon_ui_with_mapping(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –≤–∞–≥–æ–Ω–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        try:
            # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –≤–∫–ª–∞–¥–∫–∞ –≤–∞–≥–æ–Ω–æ–≤
            if 'wagons' not in self.tabs or not self.tabs['wagons']['initialized']:
                self.logger.info(
                    "–í–∫–ª–∞–¥–∫–∞ –≤–∞–≥–æ–Ω–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø–æ–º–µ—á–∞–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                self._wagon_ui_needs_update = True
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            if not hasattr(self, 'wagon_container'):
                self.logger.warning(
                    "wagon_container –Ω–µ —Å–æ–∑–¥–∞–Ω, –ø–æ–º–µ—á–∞–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                self._wagon_ui_needs_update = True
                return

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                if not self.wagon_container.winfo_exists():
                    self.logger.warning(
                        "wagon_container –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–º–µ—á–∞–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                    self._wagon_ui_needs_update = True
                    return
            except tk.TclError:
                self.logger.warning(
                    "wagon_container –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (TclError), –ø–æ–º–µ—á–∞–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                self._wagon_ui_needs_update = True
                return

            # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if hasattr(self, 'wagon_buttons') and self.wagon_buttons:
                self._update_existing_wagon_buttons()
                return

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            self._create_wagon_buttons_immediately()

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –≤–∞–≥–æ–Ω–æ–≤: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–º–µ—á–∞–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∂–µ
            self._wagon_ui_needs_update = True

    def _update_existing_wagon_buttons(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫ –≤–∞–≥–æ–Ω–æ–≤"""
        try:
            for logical_num, var in self.wagon_vars.items():
                real_wagon = self.wagon_mapping.get(logical_num)
                if real_wagon:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–∞
                    is_selected = real_wagon in self.state.wagons
                    var.set(is_selected)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
                    if logical_num in self.wagon_buttons:
                        btn = self.wagon_buttons[logical_num]
                        wagon_exists = real_wagon in self.real_wagons_in_data
                        btn.config(
                            state="normal" if wagon_exists else "disabled")

            self.logger.debug(
                "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –≤–∞–≥–æ–Ω–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫: {e}")

    def _force_update_wagon_ui(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –≤–∞–≥–æ–Ω–æ–≤ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –≤–∫–ª–∞–¥–∫–∞ –≤–∞–≥–æ–Ω–æ–≤
            current_tab = self.notebook.select()
            wagon_tab = None

            for tab_id, tab_info in self.tabs.items():
                if tab_id == 'wagons':
                    wagon_tab = tab_info
                    break

            if wagon_tab and str(wagon_tab['frame']) == current_tab:
                # –í–∫–ª–∞–¥–∫–∞ –≤–∞–≥–æ–Ω–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                self._update_wagon_ui_with_mapping()
            else:
                # –í–∫–ª–∞–¥–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –ø–æ–º–µ—á–∞–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                self._wagon_ui_needs_update = True

            self.logger.info("UI –≤–∞–≥–æ–Ω–æ–≤ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")

        except Exception as e:
            self.logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –≤–∞–≥–æ–Ω–æ–≤: {e}")

    def _toggle_wagon_with_mapping(self, logical_num: int):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∞–≥–æ–Ω–∞ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        try:
            var = self.wagon_vars[logical_num]
            real_wagon = self.wagon_mapping.get(logical_num)

            if not real_wagon or real_wagon not in self.real_wagons_in_data:
                self.logger.warning(
                    f"–í–∞–≥–æ–Ω {logical_num} -> {real_wagon} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–µ–∫–±–æ–∫—Å –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                var.set(real_wagon in self.state.wagons)
                return

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å UI
            checkbox_state = var.get()

            if checkbox_state:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞
                self.state.wagons.add(real_wagon)
                self.logger.debug(
                    f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤–∞–≥–æ–Ω: {logical_num} -> {real_wagon}")
            else:
                # –£–¥–∞–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞
                self.state.wagons.discard(real_wagon)
                self.logger.debug(
                    f"‚ùå –£–¥–∞–ª–µ–Ω –≤–∞–≥–æ–Ω: {logical_num} -> {real_wagon}")

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º
            self._update_statistics()
            self._notify_state_changed()

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∞–≥–æ–Ω–∞ {logical_num}: {e}")

    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ===

    def _on_signal_checkboxes_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —á–µ–∫–±–æ–∫—Å–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            selected_signal_types = set()
            for text, (var, filter_func) in self.signal_type_vars.items():
                if var.get():
                    filtered = filter(filter_func, self.all_signal_types)
                    selected_signal_types.update(filtered)
            self.state.signal_types = selected_signal_types
            self.logger.info(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–æ —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(selected_signal_types)}")
            self._notify_state_changed()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–±–æ–∫—Å–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

    def update_line_checkboxes(self, lines: List[str]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–π —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏"""
        try:
            self.all_lines = lines
            self.state.lines = set(lines)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –≤—ã–±—Ä–∞–Ω—ã

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –≤–∫–ª–∞–¥–∫–∞ lines, –µ—Å–ª–∏ –Ω–µ—Ç - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
            if 'lines' in self.tabs and not self.tabs['lines']['initialized']:
                self.tabs['lines']['creator'](self.tabs['lines']['frame'])
                self.tabs['lines']['initialized'] = True

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —á–µ–∫–±–æ–∫—Å—ã
            if hasattr(self, 'lines_checkbox_frame') and self.lines_checkbox_frame.winfo_exists():
                for widget in self.lines_checkbox_frame.winfo_children():
                    widget.destroy()

            self.line_vars = {}

            # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ª–∏–Ω–∏–∏, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
            for line in lines:
                var = tk.BooleanVar(value=True)
                self.line_vars[line] = var
                cb = ttk.Checkbutton(
                    self.lines_checkbox_frame,
                    text=line,
                    variable=var,
                    command=self._on_line_checkbox_changed
                )
                cb.pack(side="left", padx=5, pady=1)

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–æ–≤–∫—É
            self.lines_checkbox_frame.update_idletasks()

            self._update_statistics()
            self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –ª–∏–Ω–∏–∏: {len(lines)}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–Ω–∏–π: {e}")

    def _on_diagnostic_changed(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ diag_vars –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if not hasattr(self, 'diag_vars') or not self.diag_vars:
                self.logger.warning("diag_vars –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return

            # –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
            diagnostic_criteria = {
                'criticality': [],
                'systems': [],
                'functions': []
            }

            for key, var in self.diag_vars.items():
                if var.get():
                    if key in ['emergency', 'safety', 'power_critical', 'brake_critical']:
                        diagnostic_criteria['criticality'].append(key)
                    elif key.startswith('sys_'):
                        diagnostic_criteria['systems'].append(key[4:])
                    elif key.startswith('func_'):
                        diagnostic_criteria['functions'].append(key[5:])

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            if self.controller and hasattr(self.controller, 'apply_diagnostic_filters'):
                self.controller.apply_diagnostic_filters(diagnostic_criteria)

            self.logger.info(
                f"üö® –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã: {diagnostic_criteria}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")

    def _on_changed_only_toggle(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ '—Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ'"""
        try:
            self.state.changed_only = self.changed_only_var.get()

            if self.state.changed_only:
                # –û—Ç–∫–ª—é—á–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
                self.state.diagnostic_mode = False
                self.mode_label.config(text="üî•", foreground="red")

                # –ü—Ä–∏–º–µ–Ω—è–µ–º —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
                if self.controller and hasattr(self.controller, 'apply_changed_parameters_filter'):
                    self.controller.apply_changed_parameters_filter()
            else:
                self.mode_label.config(text="‚óè", foreground="gray")
                self._notify_state_changed()

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞: {e}")

    def set_changed_only_mode(self, enabled: bool):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ '—Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ'"""
        try:
            if hasattr(self, 'changed_only_var'):
                self.changed_only_var.set(enabled)

            if hasattr(self, 'state'):
                self.state.changed_only = enabled

            self.logger.info(
                f"üîÑ –†–µ–∂–∏–º '—Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {enabled}")

        except Exception as e:
            self.logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ '—Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ': {e}")

    def sync_changed_only_state(self, enabled: bool):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è '—Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ'"""
        try:
            self.set_changed_only_mode(enabled)

            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
            if enabled and self.controller:
                self._notify_state_changed()

        except Exception as e:
            self.logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è '—Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ': {e}")

    # === –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –í–ê–ì–û–ù–ê–ú–ò –° –ú–ê–ü–ü–ò–ù–ì–û–ú ===

    def _select_all_wagons(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –≤—ã–±–æ—Ä –≤—Å–µ—Ö –≤–∞–≥–æ–Ω–æ–≤ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π UI"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
            self.state.wagons = self.real_wagons_in_data.copy()

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º UI —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
            for logical_num, var in self.wagon_vars.items():
                real_wagon = self.wagon_mapping.get(logical_num)
                is_selected = real_wagon in self.state.wagons
                var.set(is_selected)

            self._update_statistics()
            self._notify_state_changed()
            self.logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –≤–∞–≥–æ–Ω—ã: {self.state.wagons}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –≤–∞–≥–æ–Ω–æ–≤: {e}")

    def _deselect_all_wagons(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –≤–∞–≥–æ–Ω–æ–≤ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π UI"""
        try:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
            self.state.wagons.clear()

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º UI —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
            for var in self.wagon_vars.values():
                var.set(False)

            self._update_statistics()
            self._notify_state_changed()
            self.logger.info("‚ùå –û—Ç–º–µ–Ω–µ–Ω –≤—ã–±–æ—Ä –≤—Å–µ—Ö –≤–∞–≥–æ–Ω–æ–≤")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –≤–∞–≥–æ–Ω–æ–≤: {e}")

    # === –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –í–ö–õ–ê–î–ö–ò –°–ò–ì–ù–ê–õ–´ ===

    def _select_all_signals(self):
        """–í—ã–±–æ—Ä –≤—Å–µ—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            for var, _ in self.signal_type_vars.values():
                var.set(True)
            self._on_signal_checkboxes_changed()
            self.logger.info("‚úÖ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

    def _deselect_all_signals(self):
        """–°–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            for var, _ in self.signal_type_vars.values():
                var.set(False)
            self._on_signal_checkboxes_changed()
            self.logger.info("‚ùå –°–±—Ä–æ—à–µ–Ω –≤—ã–±–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –≤—ã–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

    # === –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –í–ö–õ–ê–î–ö–ò –õ–ò–ù–ò–ò ===

    def _select_all_lines(self):
        """–í—ã–±–æ—Ä –≤—Å–µ—Ö –ª–∏–Ω–∏–π"""
        try:
            for var in self.line_vars.values():
                var.set(True)
            self._on_line_checkbox_changed()
            self.logger.info("‚úÖ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –ª–∏–Ω–∏–∏")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –ª–∏–Ω–∏–π: {e}")

    def _deselect_all_lines(self):
        """–°–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –ª–∏–Ω–∏–π"""
        try:
            for var in self.line_vars.values():
                var.set(False)
            self._on_line_checkbox_changed()
            self.logger.info("‚ùå –°–±—Ä–æ—à–µ–Ω –≤—ã–±–æ—Ä –ª–∏–Ω–∏–π")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –≤—ã–±–æ—Ä–∞ –ª–∏–Ω–∏–π: {e}")

    # === –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –í–ö–õ–ê–î–ö–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===

    def _select_all_diagnostics(self):
        """–í—ã–±–æ—Ä –≤—Å–µ—Ö –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            for var in self.diag_vars.values():
                var.set(True)
            self._on_diagnostic_changed()
            self.logger.info("‚úÖ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã")
        except Exception as e:
            self.logger.error(
                f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")

    def _deselect_all_diagnostics(self):
        """–°–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            for var in self.diag_vars.values():
                var.set(False)
            self._on_diagnostic_changed()
            self.logger.info("‚ùå –°–±—Ä–æ—à–µ–Ω –≤—ã–±–æ—Ä –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")

    def _deselect_all_wagons(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –≤–∞–≥–æ–Ω–æ–≤ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π UI"""
        try:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
            self.state.wagons.clear()

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º UI —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
            for var in self.wagon_vars.values():
                var.set(False)

            self._update_statistics()
            self._notify_state_changed()
            self.logger.info("‚ùå –û—Ç–º–µ–Ω–µ–Ω –≤—ã–±–æ—Ä –≤—Å–µ—Ö –≤–∞–≥–æ–Ω–æ–≤")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –≤–∞–≥–æ–Ω–æ–≤: {e}")

    # def _select_head_motor(self):
    #     """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –≤—ã–±–æ—Ä –≥–æ–ª–æ–≤–Ω—ã—Ö –∏ –º–æ—Ç–æ—Ä–Ω—ã—Ö –≤–∞–≥–æ–Ω–æ–≤ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π UI"""
    #     try:
    #         # –ù–∞—Ö–æ–¥–∏–º –≥–æ–ª–æ–≤–Ω—ã–µ –∏ –º–æ—Ç–æ—Ä–Ω—ã–µ –≤–∞–≥–æ–Ω—ã –ø–æ —Ä–µ–∞–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º
    #         head_motor_real = set()
    #
    #         for logical_num, real_wagon in self.wagon_mapping.items():
    #             if real_wagon in self.real_wagons_in_data:
    #                 # –ì–æ–ª–æ–≤–Ω—ã–µ (—Å–æ–¥–µ—Ä–∂–∞—Ç '–≥') –∏ –º–æ—Ç–æ—Ä–Ω—ã–µ (—Å–æ–¥–µ—Ä–∂–∞—Ç '–º')
    #                 if '–≥' in real_wagon or '–º' in real_wagon:
    #                     head_motor_real.add(real_wagon)
    #
    #         # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
    #         self.state.wagons = head_motor_real
    #
    #         # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º UI —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    #         for logical_num, var in self.wagon_vars.items():
    #             real_wagon = self.wagon_mapping.get(logical_num)
    #             is_selected = real_wagon in head_motor_real
    #             var.set(is_selected)
    #
    #         self._update_statistics()
    #         self._notify_state_changed()
    #         self.logger.info(f"üöÉ –í—ã–±—Ä–∞–Ω—ã –≥–æ–ª–æ–≤–Ω—ã–µ+–º–æ—Ç–æ—Ä–Ω—ã–µ: {head_motor_real}")
    #
    #     except Exception as e:
    #         self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ–≤–Ω—ã—Ö –∏ –º–æ—Ç–æ—Ä–Ω—ã—Ö: {e}")

    def _select_group_g(self):
        """–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –ì (1–ì, 9–ì)"""
        try:
            group_g = {"1–≥", "9–≥"}
            selected = {w for w in self.real_wagons_in_data if w.lower()
                        in group_g}
            self.state.wagons = selected
            for logical_num, var in self.wagon_vars.items():
                real_wagon = self.wagon_mapping.get(logical_num)
                var.set(real_wagon in selected)
            self._update_statistics()
            self._notify_state_changed()
            self.logger.info(f"üöÉ –í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –ì: {selected}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –ì: {e}")

    def _select_group_m(self):
        """–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –ú (2–ú, 6–ú, 8–ú, 12–ú, 10–ú)"""
        try:
            group_m = {"2–º", "6–º", "8–º", "12–º", "10–º"}
            selected = {w for w in self.real_wagons_in_data if w.lower()
                        in group_m}
            self.state.wagons = selected
            for logical_num, var in self.wagon_vars.items():
                real_wagon = self.wagon_mapping.get(logical_num)
                var.set(real_wagon in selected)
            self._update_statistics()
            self._notify_state_changed()
            self.logger.info(f"üöÉ –í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –ú: {selected}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –ú: {e}")

    def _select_group_nm(self):
        """–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –ù–ú (3–ù–ú, 7–ù–ú)"""
        try:
            group_nm = {"3–Ω–º", "7–Ω–º"}
            selected = {w for w in self.real_wagons_in_data if w.lower()
                        in group_nm}
            self.state.wagons = selected
            for logical_num, var in self.wagon_vars.items():
                real_wagon = self.wagon_mapping.get(logical_num)
                var.set(real_wagon in selected)
            self._update_statistics()
            self._notify_state_changed()
            self.logger.info(f"üöÉ –í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –ù–ú: {selected}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –ù–ú: {e}")

    def _select_group_bo(self):
        """–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –ë–û (11–ë–û, 13–ë–û)"""
        try:
            group_bo = {"11–±–æ", "13–±–æ"}
            selected = {w for w in self.real_wagons_in_data if w.lower()
                        in group_bo}
            self.state.wagons = selected
            for logical_num, var in self.wagon_vars.items():
                real_wagon = self.wagon_mapping.get(logical_num)
                var.set(real_wagon in selected)
            self._update_statistics()
            self._notify_state_changed()
            self.logger.info(f"üöÉ –í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –ë–û: {selected}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –ë–û: {e}")

    def _update_wagon_buttons(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤–∞–≥–æ–Ω–æ–≤"""
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
            for logical_num, var in self.wagon_vars.items():
                real_wagon = self.wagon_mapping.get(logical_num)
                if real_wagon:
                    is_selected = real_wagon in self.state.wagons
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                    if var.get() != is_selected:
                        var.set(is_selected)

            self.logger.debug("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤–∞–≥–æ–Ω–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤–∞–≥–æ–Ω–æ–≤: {e}")

    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

    def _notify_state_changed(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            if self.controller and hasattr(self.controller, 'apply_filters'):
                # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —á–µ–∫–±–æ–∫—Å–∞
                changed_only = self._is_changed_only_active()

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                filter_criteria = {
                    'signal_types': list(self.state.signal_types),
                    'lines': list(self.state.lines),
                    'wagons': list(self.state.wagons)
                }

                self.logger.info(
                    f"üîÑ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ (changed_only={changed_only}): {filter_criteria}")

                # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
                self.controller.apply_filters(
                    changed_only=changed_only,
                    **filter_criteria
                )
            else:
                self.logger.warning(
                    "‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

        except Exception as e:
            self.logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

    def _is_changed_only_active(self) -> bool:
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∂–∏–º–∞ '—Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ'"""
        try:
            # –°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            if hasattr(self, 'changed_only_var') and self.changed_only_var:
                return self.changed_only_var.get()

            # –°–ø–æ—Å–æ–± 2: –ß–µ—Ä–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if hasattr(self, 'state') and hasattr(self.state, 'changed_only'):
                return self.state.changed_only

            # –°–ø–æ—Å–æ–± 3: –ß–µ—Ä–µ–∑ time_panel
            if self.controller:
                time_panel = self.controller.get_ui_component('time_panel')
                if time_panel:
                    if hasattr(time_panel, 'is_changed_only_enabled'):
                        return time_panel.is_changed_only_enabled()
                    if hasattr(time_panel, 'changed_only_var'):
                        return time_panel.changed_only_var.get()

            return False

        except Exception as e:
            self.logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∂–∏–º–∞ '—Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ': {e}")
            return False

    def _update_statistics(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏"""
        try:
            total_real_wagons = len(self.real_wagons_in_data)
            selected_real_wagons = len(self.state.wagons)

            total = len(self.all_signal_types) + \
                len(self.all_lines) + total_real_wagons
            selected = len(self.state.signal_types) + \
                len(self.state.lines) + selected_real_wagons

            stats_text = f"–§–∏–ª—å—Ç—Ä—ã: {selected}/{total}"
            if self.stats_label:
                self.stats_label.config(text=stats_text)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    # === –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –ú–ï–¢–û–î–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ===

    def disable_changed_only_checkbox(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ '—Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ'"""
        try:
            if hasattr(self, 'changed_only_var'):
                self.changed_only_var.set(False)
                # –û—Ç–∫–ª—é—á–∞–µ–º —á–µ–∫–±–æ–∫—Å –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–∂–µ—Ç
                if hasattr(self, 'changed_only_checkbox'):
                    self.changed_only_checkbox.config(state='disabled')
            self.logger.debug("–ß–µ–∫–±–æ–∫—Å '—Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ' –æ—Ç–∫–ª—é—á–µ–Ω")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞: {e}")

    def _sync_with_time_panel(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ø–∞–Ω–µ–ª—å—é –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
            if self.controller:
                time_range = self.controller.get_time_range()
                if time_range[0] and time_range[1]:
                    self.logger.debug(
                        f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º: {time_range}")
            self.logger.debug("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å time_panel –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å time_panel: {e}")

    def enable_changed_only_checkbox(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ '—Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ'"""
        try:
            if hasattr(self, 'changed_only_checkbox'):
                self.changed_only_checkbox.config(state='normal')
                self.logger.info("–ß–µ–∫–±–æ–∫—Å '—Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ' –≤–∫–ª—é—á–µ–Ω")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞: {e}")

    def _on_changed_only_toggle(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ '—Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ'"""
        try:
            self.state.changed_only = self.changed_only_var.get()

            if self.state.changed_only:
                # –û—Ç–∫–ª—é—á–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
                self.state.diagnostic_mode = False
                self.mode_label.config(text="üî•", foreground="red")

                # –ü—Ä–∏–º–µ–Ω—è–µ–º —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
                if self.controller and hasattr(self.controller, 'apply_changed_parameters_filter'):
                    self.controller.apply_changed_parameters_filter()
            else:
                self.mode_label.config(text="‚óè", foreground="gray")
                self._notify_state_changed()

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞: {e}")

    # === –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ ===

    def update_signal_type_checkboxes(self, signal_types: List[str]):
        """–ò–ù–¢–ï–ì–†–ê–¶–ò–Ø —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            self.logger.info(
                f"üîÑ –ü–æ–ª—É—á–µ–Ω—ã —Ç–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(signal_types)}")
            self.logger.info(f"üìä –¢–∏–ø—ã: {signal_types[:10]}...")

            # –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ç–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤
            self.all_signal_types = signal_types
            self.state.signal_types = set(signal_types)

            # –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø: –†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞
            if signal_types:
                categories = ["–í—Å–µ"]

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–µ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
                signal_groups = {
                    'BY_ —Å–∏–≥–Ω–∞–ª—ã (–ë–∞–π—Ç)': [],      # uint8_t
                    'F_ —Å–∏–≥–Ω–∞–ª—ã (Float)': [],      # float32
                    'S_ —Å–∏–≥–Ω–∞–ª—ã (–°–∏—Å—Ç–µ–º–Ω—ã–µ)': [],  # system status
                    'B_ —Å–∏–≥–Ω–∞–ª—ã (Bool)': [],       # boolean
                    'DW_ —Å–∏–≥–Ω–∞–ª—ã (DWord)': [],     # uint32_t
                    'W_ —Å–∏–≥–Ω–∞–ª—ã (Word)': [],       # uint16_t
                    'Banner —Å–∏–≥–Ω–∞–ª—ã': [],          # Banner#xxx
                    '–î—Ä—É–≥–∏–µ': []
                }

                # –†–ï–ê–õ–¨–ù–ê–Ø –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–Ø –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
                for signal_type in signal_types:
                    if signal_type.startswith('BY_') or signal_type == 'BY':
                        signal_groups['BY_ —Å–∏–≥–Ω–∞–ª—ã (–ë–∞–π—Ç)'].append(signal_type)
                    elif signal_type.startswith('F_'):
                        signal_groups['F_ —Å–∏–≥–Ω–∞–ª—ã (Float)'].append(signal_type)
                    elif signal_type.startswith('S_') or signal_type == 'S':
                        signal_groups['S_ —Å–∏–≥–Ω–∞–ª—ã (–°–∏—Å—Ç–µ–º–Ω—ã–µ)'].append(
                            signal_type)
                    elif signal_type.startswith('B_') or signal_type == 'B':
                        signal_groups['B_ —Å–∏–≥–Ω–∞–ª—ã (Bool)'].append(signal_type)
                    elif signal_type.startswith('DW_') or signal_type == 'DW':
                        signal_groups['DW_ —Å–∏–≥–Ω–∞–ª—ã (DWord)'].append(
                            signal_type)
                    elif signal_type.startswith('W_') or signal_type == 'W':
                        signal_groups['W_ —Å–∏–≥–Ω–∞–ª—ã (Word)'].append(signal_type)
                    elif signal_type.startswith('Banner') or 'Banner#' in signal_type:
                        signal_groups['Banner —Å–∏–≥–Ω–∞–ª—ã'].append(signal_type)
                    else:
                        signal_groups['–î—Ä—É–≥–∏–µ'].append(signal_type)

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∏–≥–Ω–∞–ª—ã)
                for group_name, types in signal_groups.items():
                    if types:
                        categories.append(f"{group_name} ({len(types)})")

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å
                if hasattr(self, 'signals_combo'):
                    self.signals_combo['values'] = categories
                    self.signals_combo.set("–í—Å–µ")
                    self.logger.info(
                        f"üîÑ –°–æ–∑–¥–∞–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories}")

            self._update_statistics()
            self.logger.info(
                f"‚úÖ –¢–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

    def update_line_checkboxes(self, lines: List[str]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–π —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏"""
        try:
            self.all_lines = lines
            self.state.lines = set(lines)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –≤—ã–±—Ä–∞–Ω—ã

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –≤–∫–ª–∞–¥–∫–∞ lines, –µ—Å–ª–∏ –Ω–µ—Ç - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
            if 'lines' in self.tabs and not self.tabs['lines']['initialized']:
                self.tabs['lines']['creator'](self.tabs['lines']['frame'])
                self.tabs['lines']['initialized'] = True

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —á–µ–∫–±–æ–∫—Å—ã
            if hasattr(self, 'lines_checkbox_frame') and self.lines_checkbox_frame.winfo_exists():
                for widget in self.lines_checkbox_frame.winfo_children():
                    widget.destroy()

            self.line_vars = {}

            # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ª–∏–Ω–∏–∏, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
            for line in lines:
                var = tk.BooleanVar(value=True)
                self.line_vars[line] = var
                cb = ttk.Checkbutton(
                    self.lines_checkbox_frame,
                    text=line,
                    variable=var,
                    command=self._on_line_checkbox_changed
                )
                cb.pack(side="left", padx=5, pady=1)

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–æ–≤–∫—É
            self.lines_checkbox_frame.update_idletasks()

            self._update_statistics()
            self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –ª–∏–Ω–∏–∏: {len(lines)}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–Ω–∏–π: {e}")

    def update_wagon_checkboxes(self, wagons: List[str]):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π UI"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            self.real_wagons_in_data = set(wagons)

            # –ü–æ–ª—É—á–∞–µ–º –≤–µ–¥—É—â–∏–π –≤–∞–≥–æ–Ω –∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
            leading_wagon = self._get_leading_wagon_from_controller()
            self.leading_wagon = leading_wagon

            # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ–¥—É—â–µ–≥–æ –≤–∞–≥–æ–Ω–∞
            self._create_wagon_mapping(leading_wagon)

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –≤–∞–≥–æ–Ω–∞–º–∏
            self.state.wagons = self.real_wagons_in_data.copy()

            # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
            self._force_update_wagon_ui()

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è UI
            if hasattr(self, 'wagon_vars') and self.wagon_vars:
                self._update_existing_wagon_buttons()

            self._update_statistics()
            self.logger.info(
                f"‚úÖ –í–∞–≥–æ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ {leading_wagon}: {wagons}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–≥–æ–Ω–æ–≤: {e}")

    def get_selected_filters(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        return self.state.to_dict()

    def set_controller(self, controller):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        self.controller = controller
        self.logger.info("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ SmartFilterPanel")

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            self.observer._subscribers.clear()
            self.controller = None
            self.logger.info("SmartFilterPanel –æ—á–∏—â–µ–Ω")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ SmartFilterPanel: {e}")

    def __str__(self):
        return f"SmartFilterPanel(tabs=True, leading_wagon={self.leading_wagon}, mapping={len(self.wagon_mapping)})"
