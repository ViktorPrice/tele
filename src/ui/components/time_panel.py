# src/ui/components/time_panel.py - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
"""
import tkinter as tk
from tkinter import ttk
import logging
from typing import Optional, Tuple, Dict, Any
from datetime import datetime, timedelta


class TimePanel(ttk.Frame):
    """–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""

    def __init__(self, parent, controller=None):
        super().__init__(parent)
        self.controller = controller
        self.logger = logging.getLogger(self.__class__.__name__)
        self.logger.info("TimePanel: __init__ –≤—ã–∑–≤–∞–Ω")

        # –í–∏–¥–∂–µ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
        self.from_time_entry: Optional[tk.Entry] = None
        self.to_time_entry: Optional[tk.Entry] = None
        self.duration_label: Optional[ttk.Label] = None
        self.records_label: Optional[ttk.Label] = None
        self.apply_button: Optional[ttk.Button] = None
        self.reset_button: Optional[ttk.Button] = None

        # –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô —á–µ–∫–±–æ–∫—Å –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤ —Å–∏—Å—Ç–µ–º–µ)
        self.changed_only_var: Optional[tk.BooleanVar] = None
        self.changed_only_checkbox: Optional[ttk.Checkbutton] = None

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_updating = False
        self.has_priority_for_changed_filter = True  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

        self._setup_ui()
        self.logger.info("TimePanel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–æ–π")

    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        self.logger.info("TimePanel: —Å–æ–∑–¥–∞–Ω–∏–µ UI —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–æ–π")
        try:
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏
            self.grid_columnconfigure(1, weight=1)

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            title_frame = ttk.Frame(self)
            title_frame.grid(row=0, column=0, columnspan=3, sticky="ew", padx=5, pady=5)
            title_frame.grid_columnconfigure(1, weight=1)

            # –ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            priority_label = ttk.Label(title_frame, text="‚è∞", font=('Arial', 12))
            priority_label.grid(row=0, column=0, padx=(0, 5))

            title_label = ttk.Label(title_frame, text="–í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω",
                                    font=('Arial', 10, 'bold'))
            title_label.grid(row=0, column=1, sticky="w")

            # –ü–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏ "–û—Ç"
            from_frame = ttk.Frame(self)
            from_frame.grid(row=1, column=0, columnspan=3, sticky="ew", padx=5, pady=2)
            from_frame.grid_columnconfigure(1, weight=1)

            ttk.Label(from_frame, text="–û—Ç:", width=8).grid(row=0, column=0, sticky="w")
            self.from_time_entry = tk.Entry(from_frame, font=('Consolas', 9))
            self.from_time_entry.grid(row=0, column=1, sticky="ew", padx=5)
            self.from_time_entry.bind('<FocusOut>', self._on_time_changed)
            self.from_time_entry.bind('<Return>', self._on_time_changed)

            # –ü–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏ "–î–æ"
            to_frame = ttk.Frame(self)
            to_frame.grid(row=2, column=0, columnspan=3, sticky="ew", padx=5, pady=2)
            to_frame.grid_columnconfigure(1, weight=1)

            ttk.Label(to_frame, text="–î–æ:", width=8).grid(row=0, column=0, sticky="w")
            self.to_time_entry = tk.Entry(to_frame, font=('Consolas', 9))
            self.to_time_entry.grid(row=0, column=1, sticky="ew", padx=5)
            self.to_time_entry.bind('<FocusOut>', self._on_time_changed)
            self.to_time_entry.bind('<Return>', self._on_time_changed)

            # –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø —Å–µ–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            priority_filter_frame = ttk.LabelFrame(self, text="üî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è")
            priority_filter_frame.grid(row=3, column=0, columnspan=3, sticky="ew", padx=5, pady=5)
            priority_filter_frame.grid_columnconfigure(0, weight=1)

            self.changed_only_var = tk.BooleanVar()
            self.changed_only_checkbox = ttk.Checkbutton(
                priority_filter_frame,
                text="‚ö° –¢–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)",
                variable=self.changed_only_var,
                command=self._on_changed_only_toggle_priority
            )
            self.changed_only_checkbox.grid(row=0, column=0, sticky="w", padx=5, pady=5)

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
            info_label = ttk.Label(
                priority_filter_frame,
                text="üí° –≠—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ –≤—Å–µ–º–∏ –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏",
                font=('Arial', 8),
                foreground='blue'
            )
            info_label.grid(row=1, column=0, sticky="w", padx=5, pady=(0, 5))

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–ª—è
            info_frame = ttk.Frame(self)
            info_frame.grid(row=4, column=0, columnspan=3, sticky="ew", padx=5, pady=5)

            self.duration_label = ttk.Label(info_frame, text="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞",
                                            font=('Arial', 8))
            self.duration_label.pack(anchor="w")

            self.records_label = ttk.Label(info_frame, text="–ó–∞–ø–∏—Å–µ–π: 0",
                                           font=('Arial', 8))
            self.records_label.pack(anchor="w")

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            button_frame = ttk.Frame(self)
            button_frame.grid(row=5, column=0, columnspan=3, sticky="ew", padx=5, pady=5)

            self.apply_button = ttk.Button(button_frame, text="üöÄ –ü—Ä–∏–º–µ–Ω–∏—Ç—å",
                                           command=self._apply_time_range_priority)
            self.apply_button.pack(side=tk.LEFT, padx=2)

            self.reset_button = ttk.Button(button_frame, text="üîÑ –°–±—Ä–æ—Å",
                                           command=self._reset_time_range_priority)
            self.reset_button.pack(side=tk.LEFT, padx=2)

            # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            quick_frame = ttk.LabelFrame(self, text="‚ö° –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
            quick_frame.grid(row=6, column=0, columnspan=3, sticky="ew", padx=5, pady=5)

            quick_buttons = [
                ("1 –º–∏–Ω", 60),
                ("5 –º–∏–Ω", 300),
                ("10 –º–∏–Ω", 600),
                ("30 –º–∏–Ω", 1800),
                ("1 —á–∞—Å", 3600)
            ]

            for text, seconds in quick_buttons:
                ttk.Button(quick_frame, text=text,
                           command=lambda s=seconds: self._quick_range_priority(s)).pack(
                    side=tk.LEFT, padx=2, pady=2)

            self.logger.info("TimePanel: UI —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–æ–π")

        except Exception as e:
            self.logger.error(f"TimePanel: –æ—à–∏–±–∫–∞ –≤ _setup_ui: {e}")

    def _on_changed_only_toggle_priority(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            is_changed_only = self.changed_only_var.get()
            self.logger.info(f"üî• –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô —Ñ–∏–ª—å—Ç—Ä '–¢–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã': {is_changed_only}")

            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞–Ω–µ–ª—è–º–∏ (–æ—Ç–∫–ª—é—á–∞–µ–º –∏—Ö —á–µ–∫–±–æ–∫—Å—ã)
            self._sync_with_other_panels(is_changed_only)

            # –ü–†–ò–û–†–ò–¢–ï–¢–ù–û–ï –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            if self.controller and hasattr(self.controller, 'apply_changed_parameters_filter'):
                if is_changed_only:
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    self.controller.apply_changed_parameters_filter()
                    self.logger.info("‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                else:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º
                    self.controller.apply_filters(changed_only=False)
                    self.logger.info("‚úÖ –í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º")
            elif self.controller and hasattr(self.controller, 'apply_filters'):
                # Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
                self.controller.apply_filters(changed_only=is_changed_only)
                self.logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback –º–µ—Ç–æ–¥ apply_filters")
            else:
                self.logger.error("‚ùå –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞: {e}")

    def _sync_with_other_panels(self, is_enabled: bool):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞–Ω–µ–ª—è–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        try:
            if not self.controller:
                return

            # –û—Ç–∫–ª—é—á–∞–µ–º —á–µ–∫–±–æ–∫—Å –≤ FilterPanel –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            filter_panel = self.controller.get_ui_component('filter_panel')
            if filter_panel and hasattr(filter_panel, '_special_vars'):
                if 'changed_only' in filter_panel._special_vars:
                    filter_panel._special_vars['changed_only'].set(is_enabled)
                    self.logger.debug("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ–∫–±–æ–∫—Å –≤ FilterPanel")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            if hasattr(self.controller, '_emit_event'):
                self.controller._emit_event('priority_filter_changed', {
                    'source': 'time_panel',
                    'changed_only': is_enabled
                })

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞–Ω–µ–ª—è–º–∏: {e}")

    def update_time_fields(self, from_time: str, to_time: str,
                           duration: str = "", total_records: int = 0):
        """–û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        try:
            self.is_updating = True

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏
            if self.from_time_entry:
                self.from_time_entry.delete(0, tk.END)
                self.from_time_entry.insert(0, from_time)

            if self.to_time_entry:
                self.to_time_entry.delete(0, tk.END)
                self.to_time_entry.insert(0, to_time)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–ª—è
            if self.duration_label:
                duration_text = f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}" if duration else "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
                self.duration_label.config(text=duration_text)

            if self.records_label:
                self.records_label.config(text=f"–ó–∞–ø–∏—Å–µ–π: {total_records}")

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            self.update_idletasks()

            self.logger.info(f"‚úÖ –ü–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {from_time} - {to_time}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –≤—Ä–µ–º–µ–Ω–∏: {e}")
        finally:
            self.is_updating = False

    def get_time_range(self) -> Tuple[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞"""
        try:
            from_time = self.from_time_entry.get().strip() if self.from_time_entry else ""
            to_time = self.to_time_entry.get().strip() if self.to_time_entry else ""
            return from_time, to_time

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {e}")
            return "", ""

    def set_time_range(self, from_time: str, to_time: str):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            self.update_time_fields(from_time, to_time)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ set_time_range: {e}")

    def get_filter_settings(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        try:
            return {
                'changed_only': self.changed_only_var.get() if self.changed_only_var else False,
                'has_priority': self.has_priority_for_changed_filter,
                'source_panel': 'time_panel'
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return {'changed_only': False, 'has_priority': False}

    def set_changed_params_priority(self, has_priority: bool):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        self.has_priority_for_changed_filter = has_priority
        if has_priority:
            self.logger.info("üî• TimePanel –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        else:
            self.logger.info("TimePanel –ø–æ—Ç–µ—Ä—è–ª –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

    def disable_changed_only_checkbox(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –¥—Ä—É–≥–æ–π –ø–∞–Ω–µ–ª–∏)"""
        if self.changed_only_checkbox:
            self.changed_only_checkbox.config(state='disabled')
            self.logger.info("–ß–µ–∫–±–æ–∫—Å –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω")

    def enable_changed_only_checkbox(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞"""
        if self.changed_only_checkbox:
            self.changed_only_checkbox.config(state='normal')
            self.logger.info("–ß–µ–∫–±–æ–∫—Å –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∫–ª—é—á–µ–Ω")

    def _on_time_changed(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        if self.is_updating:
            return

        try:
            from_time, to_time = self.get_time_range()

            if from_time and to_time:
                # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
                if self.controller and hasattr(self.controller, '_validate_time_range'):
                    is_valid = self.controller._validate_time_range(from_time, to_time)
                    if not is_valid:
                        self.logger.warning("–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω")
                        return

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                self._update_duration_info(from_time, to_time)

                # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ñ–∏–ª—å—Ç—Ä –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º
                if self.changed_only_var and self.changed_only_var.get():
                    self._apply_changed_params_auto()

            self.logger.debug(f"–í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {from_time} - {to_time}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")

    def _apply_changed_params_auto(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            if self.controller and hasattr(self.controller, 'apply_changed_parameters_filter'):
                self.controller.apply_changed_parameters_filter()
                self.logger.info("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞: {e}")

    def _update_duration_info(self, from_time_str: str, to_time_str: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            from_time = datetime.strptime(from_time_str, '%Y-%m-%d %H:%M:%S')
            to_time = datetime.strptime(to_time_str, '%Y-%m-%d %H:%M:%S')

            duration = to_time - from_time
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            days = duration.days
            hours, remainder = divmod(duration.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)

            if days > 0:
                duration_str = f"{days} –¥–Ω. {hours:02d}:{minutes:02d}:{seconds:02d}"
            else:
                duration_str = f"{hours:02d}:{minutes:02d}:{seconds:02d}"

            if self.duration_label:
                self.duration_label.config(text=f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}")

        except ValueError:
            if self.duration_label:
                self.duration_label.config(text="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")

    def _apply_time_range_priority(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢–ù–û–ï –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
        try:
            from_time, to_time = self.get_time_range()

            if not from_time or not to_time:
                self._show_error("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º
            filter_settings = self.get_filter_settings()
            
            if filter_settings['changed_only']:
                # –ü–†–ò–û–†–ò–¢–ï–¢–ù–û–ï –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                if self.controller and hasattr(self.controller, 'apply_changed_parameters_filter'):
                    self.controller.apply_changed_parameters_filter()
                    self.logger.info("üî• –ü—Ä–∏–º–µ–Ω–µ–Ω –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô —Ñ–∏–ª—å—Ç—Ä –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                else:
                    self.logger.error("‚ùå –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é")
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
                if self.controller and hasattr(self.controller, 'apply_filters'):
                    self.controller.apply_filters()
                    self.logger.info("‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {e}")
            self._show_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è: {e}")

    def _reset_time_range_priority(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô —Å–±—Ä–æ—Å –∫ –ø–æ–ª–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É"""
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —á–µ–∫–±–æ–∫—Å
            if self.changed_only_var:
                self.changed_only_var.set(False)
                self.logger.info("üîÑ –°–±—Ä–æ—à–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —á–µ–∫–±–æ–∫—Å")

            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞–Ω–µ–ª—è–º–∏
            self._sync_with_other_panels(False)

            # –°–±—Ä–æ—Å —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            if self.controller and hasattr(self.controller, 'model'):
                model = self.controller.model
                if hasattr(model, 'get_time_range_fields'):
                    time_fields = model.get_time_range_fields()
                    if time_fields:
                        self.update_time_fields(
                            time_fields['from_time'],
                            time_fields['to_time'],
                            time_fields.get('duration', ''),
                            time_fields.get('total_records', 0)
                        )
                        self.logger.info("‚úÖ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å–±—Ä–æ—à–µ–Ω –∫ –ø–æ–ª–Ω–æ–º—É")

                        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                        if self.controller and hasattr(self.controller, 'apply_filters'):
                            self.controller.apply_filters()
                        return

            # Fallback
            self._clear_time_fields()
            self.logger.warning("‚ö†Ô∏è –°–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ –æ—á–∏—Å—Ç–∫—É –ø–æ–ª–µ–π")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {e}")

    def _quick_range_priority(self, seconds: int):
        """–ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –±—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
        try:
            if not self.controller or not hasattr(self.controller, 'model'):
                self._show_error("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return

            model = self.controller.model
            if hasattr(model, 'get_time_range_fields'):
                time_fields = model.get_time_range_fields()
                if time_fields and time_fields.get('to_time'):
                    to_time = datetime.strptime(time_fields['to_time'], '%Y-%m-%d %H:%M:%S')
                    from_time = to_time - timedelta(seconds=seconds)

                    self.update_time_fields(
                        from_time.strftime('%Y-%m-%d %H:%M:%S'),
                        to_time.strftime('%Y-%m-%d %H:%M:%S'),
                        f"{seconds // 60} –º–∏–Ω" if seconds >= 60 else f"{seconds} —Å–µ–∫",
                        0
                    )

                    # –ü–†–ò–û–†–ò–¢–ï–¢–ù–û–ï –∞–≤—Ç–æ–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
                    if self.changed_only_var and self.changed_only_var.get():
                        self._apply_changed_params_auto()
                    else:
                        self._apply_time_range_priority()

                    self.logger.info(f"‚ö° –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –±—ã—Å—Ç—Ä—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {seconds} —Å–µ–∫")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")

    def _clear_time_fields(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –≤—Ä–µ–º–µ–Ω–∏"""
        if self.from_time_entry:
            self.from_time_entry.delete(0, tk.END)
        if self.to_time_entry:
            self.to_time_entry.delete(0, tk.END)
        if self.duration_label:
            self.duration_label.config(text="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        if self.records_label:
            self.records_label.config(text="–ó–∞–ø–∏—Å–µ–π: 0")

    def _show_error(self, message: str):
        """–ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        try:
            import tkinter.messagebox as msgbox
            msgbox.showerror("–û—à–∏–±–∫–∞", message)
        except Exception:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {message}")

    def set_controller(self, controller):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        self.controller = controller
        self.logger.info("‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ TimePanel")

    def enable(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏"""
        widgets = [
            self.from_time_entry, self.to_time_entry,
            self.apply_button, self.reset_button, self.changed_only_checkbox
        ]
        for widget in widgets:
            if widget:
                widget.config(state='normal')

    def disable(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏"""
        widgets = [
            self.from_time_entry, self.to_time_entry,
            self.apply_button, self.reset_button, self.changed_only_checkbox
        ]
        for widget in widgets:
            if widget:
                widget.config(state='disabled')

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            self.controller = None
            self.logger.info("TimePanel –æ—á–∏—â–µ–Ω")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ TimePanel: {e}")

    def __str__(self):
        return f"TimePanel(priority={self.has_priority_for_changed_filter}, changed_only={self.changed_only_var.get() if self.changed_only_var else False})"

    def __repr__(self):
        return self.__str__()
