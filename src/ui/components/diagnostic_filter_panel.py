# src/ui/components/diagnostic_filter_panel.py
"""
UI –ø–∞–Ω–µ–ª—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
"""
import tkinter as tk
from tkinter import ttk
import logging
from typing import Dict, List, Any, Callable, Optional

from ...config.diagnostic_filters_config import (
    CRITICAL_FILTERS, SYSTEM_FILTERS, FUNCTIONAL_FILTERS, SEVERITY_LEVELS
)
from src.core.domain.entities.signal_classifier import (
    SignalCriticality, 
    SignalSystem
)

class DiagnosticFilterPanel(ttk.Frame):
    """–ü–∞–Ω–µ–ª—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""

    def __init__(self, parent, controller=None):
        super().__init__(parent)
        self.controller = controller
        self.logger = logging.getLogger(self.__class__.__name__)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self.critical_vars: Dict[str, tk.BooleanVar] = {}
        self.system_vars: Dict[str, tk.BooleanVar] = {}
        self.functional_vars: Dict[str, tk.BooleanVar] = {}
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
        self.is_expanded = tk.BooleanVar(value=True)
        self.active_filters_count = tk.StringVar(value="–§–∏–ª—å—Ç—Ä—ã: 0")
        
        # Callbacks
        self.on_filter_changed: Optional[Callable] = None
        
        self._setup_diagnostic_ui()
        self.logger.info("DiagnosticFilterPanel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _setup_diagnostic_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        self.grid_columnconfigure(0, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
        self._create_header()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self.filters_container = ttk.Frame(self)
        self.filters_container.grid(row=1, column=0, sticky="ew", pady=(5, 0))
        self.filters_container.grid_columnconfigure(0, weight=1)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self._create_critical_filters()
        self._create_system_filters() 
        self._create_functional_filters()
        self._create_control_buttons()
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
        self.is_expanded.trace('w', self._on_expand_changed)

    def _create_header(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–∏"""
        header_frame = ttk.Frame(self)
        header_frame.grid(row=0, column=0, sticky="ew")
        header_frame.grid_columnconfigure(1, weight=1)

        # –ö–Ω–æ–ø–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
        expand_btn = ttk.Checkbutton(
            header_frame,
            text="üîç",
            variable=self.is_expanded,
            style="Toolbutton"
        )
        expand_btn.grid(row=0, column=0, sticky="w")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(
            header_frame,
            text="–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã",
            font=('Arial', 10, 'bold')
        )
        title_label.grid(row=0, column=1, sticky="w", padx=(5, 0))

        # –°—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        count_label = ttk.Label(
            header_frame,
            textvariable=self.active_filters_count,
            font=('Arial', 8),
            foreground='gray'
        )
        count_label.grid(row=0, column=2, sticky="e")

    def _create_critical_filters(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏"""
        critical_frame = ttk.LabelFrame(
            self.filters_container,
            text="üö® –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å",
            padding="3"
        )
        critical_frame.grid(row=0, column=0, sticky="ew", pady=(0, 3))
        critical_frame.grid_columnconfigure(0, weight=1)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
        buttons_frame = ttk.Frame(critical_frame)
        buttons_frame.grid(row=0, column=0, sticky="ew")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        critical_configs = [
            ("üÜò –ê–≤–∞—Ä–∏–∏", "emergency", CRITICAL_FILTERS["emergency"]["color"]),
            ("‚ö†Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "safety", CRITICAL_FILTERS["safety"]["color"]),
            ("‚ö° –≠–Ω–µ—Ä–≥–æ—Å–∏—Å—Ç–µ–º–∞", "power_critical", CRITICAL_FILTERS["power_critical"]["color"]),
            ("üõë –¢–æ—Ä–º–æ–∑–∞", "brake_critical", CRITICAL_FILTERS["brake_critical"]["color"])
        ]

        for i, (text, filter_key, color) in enumerate(critical_configs):
            var = tk.BooleanVar()
            self.critical_vars[filter_key] = var
            
            btn = ttk.Checkbutton(
                buttons_frame,
                text=text,
                variable=var,
                command=self._on_critical_filter_changed
            )
            btn.grid(row=0, column=i, sticky="w", padx=2)

    def _create_system_filters(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ —Å–∏—Å—Ç–µ–º–∞–º"""
        systems_frame = ttk.LabelFrame(
            self.filters_container,
            text="‚öôÔ∏è –°–∏—Å—Ç–µ–º—ã",
            padding="3"
        )
        systems_frame.grid(row=1, column=0, sticky="ew", pady=(0, 3))
        systems_frame.grid_columnconfigure(0, weight=1)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–∏—Å—Ç–µ–º
        buttons_frame = ttk.Frame(systems_frame)
        buttons_frame.grid(row=0, column=0, sticky="ew")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å–∏—Å—Ç–µ–º
        system_configs = [
            ("üöÇ –¢—è–≥–∞", "traction"),
            ("üõë –¢–æ—Ä–º–æ–∑–∞", "brakes"), 
            ("üö™ –î–≤–µ—Ä–∏", "doors"),
            ("‚ö° –ü–∏—Ç–∞–Ω–∏–µ", "power"),
            ("üå°Ô∏è –ö–ª–∏–º–∞—Ç", "climate"),
            ("üì∫ –ò–Ω—Ñ–æ", "info_systems"),
            ("üì° –°–≤—è–∑—å", "communication")
        ]

        for i, (text, system_key) in enumerate(system_configs):
            var = tk.BooleanVar()
            self.system_vars[system_key] = var
            
            btn = ttk.Checkbutton(
                buttons_frame,
                text=text,
                variable=var,
                command=self._on_system_filter_changed
            )
            btn.grid(row=0, column=i, sticky="w", padx=2)

    def _create_functional_filters(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        func_frame = ttk.LabelFrame(
            self.filters_container,
            text="üîß –§—É–Ω–∫—Ü–∏–∏",
            padding="3"
        )
        func_frame.grid(row=2, column=0, sticky="ew", pady=(0, 3))
        func_frame.grid_columnconfigure(0, weight=1)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π
        buttons_frame = ttk.Frame(func_frame)
        buttons_frame.grid(row=0, column=0, sticky="ew")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π
        functional_configs = [
            ("‚ùå –û—à–∏–±–∫–∏", "faults"),
            ("üìä –ò–∑–º–µ—Ä–µ–Ω–∏—è", "measurements"),
            ("üîò –°–æ—Å—Ç–æ—è–Ω–∏—è", "states"),
            ("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "controls"),
            ("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "diagnostics")
        ]

        for i, (text, func_key) in enumerate(functional_configs):
            var = tk.BooleanVar()
            self.functional_vars[func_key] = var
            
            btn = ttk.Checkbutton(
                buttons_frame,
                text=text,
                variable=var,
                command=self._on_functional_filter_changed
            )
            btn.grid(row=0, column=i, sticky="w", padx=2)

    def _create_control_buttons(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        control_frame = ttk.Frame(self.filters_container)
        control_frame.grid(row=3, column=0, sticky="ew", pady=(5, 0))

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        ttk.Button(
            control_frame,
            text="–í—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ",
            command=self._select_all_critical,
            width=12
        ).grid(row=0, column=0, padx=2)

        ttk.Button(
            control_frame,
            text="–¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏",
            command=self._select_only_faults,
            width=12
        ).grid(row=0, column=1, padx=2)

        ttk.Button(
            control_frame,
            text="–°–±—Ä–æ—Å–∏—Ç—å",
            command=self._reset_all_filters,
            width=12
        ).grid(row=0, column=2, padx=2)

        # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        ttk.Button(
            control_frame,
            text="üîç –ê–Ω–∞–ª–∏–∑",
            command=self._perform_diagnostic_analysis,
            width=12
        ).grid(row=0, column=3, padx=2)

    def _on_expand_changed(self, *args):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è"""
        if self.is_expanded.get():
            self.filters_container.grid()
        else:
            self.filters_container.grid_remove()

    def _on_critical_filter_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏"""
        self._update_active_filters_count()
        self._apply_diagnostic_filters()

    def _on_system_filter_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        self._update_active_filters_count()
        self._apply_diagnostic_filters()

    def _on_functional_filter_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        self._update_active_filters_count()
        self._apply_diagnostic_filters()

    def _apply_diagnostic_filters(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            filters = self.get_active_diagnostic_filters()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            if self.controller and hasattr(self.controller, 'apply_diagnostic_filters'):
                self.controller.apply_diagnostic_filters(filters)
            
            # –í—ã–∑—ã–≤–∞–µ–º callback
            if self.on_filter_changed:
                self.on_filter_changed(filters)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")

    def _update_active_filters_count(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            count = 0
            
            # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            for var in self.critical_vars.values():
                if var.get():
                    count += 1
            
            for var in self.system_vars.values():
                if var.get():
                    count += 1
            
            for var in self.functional_vars.values():
                if var.get():
                    count += 1
            
            self.active_filters_count.set(f"–§–∏–ª—å—Ç—Ä—ã: {count}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")

    def _select_all_critical(self):
        """–í—ã–±–æ—Ä –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        for filter_key in ['emergency', 'safety', 'power_critical', 'brake_critical']:
            if filter_key in self.critical_vars:
                self.critical_vars[filter_key].set(True)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –æ—à–∏–±–æ–∫
        if 'faults' in self.functional_vars:
            self.functional_vars['faults'].set(True)
        
        self._update_active_filters_count()
        self._apply_diagnostic_filters()

    def _select_only_faults(self):
        """–í—ã–±–æ—Ä —Ç–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ
        self._reset_all_filters_internal()
        
        # –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä –æ—à–∏–±–æ–∫
        if 'faults' in self.functional_vars:
            self.functional_vars['faults'].set(True)
        
        self._update_active_filters_count()
        self._apply_diagnostic_filters()

    def _reset_all_filters(self):
        """–°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        self._reset_all_filters_internal()
        self._update_active_filters_count()
        self._apply_diagnostic_filters()

    def _reset_all_filters_internal(self):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        for var in self.critical_vars.values():
            var.set(False)
        for var in self.system_vars.values():
            var.set(False)
        for var in self.functional_vars.values():
            var.set(False)

    def _perform_diagnostic_analysis(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            if self.controller and hasattr(self.controller, 'perform_diagnostic_analysis'):
                self.controller.perform_diagnostic_analysis()
            else:
                self.logger.warning("–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")

    # === –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ ===

    def get_active_diagnostic_filters(self) -> Dict[str, List[str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            filters = {
                'criticality': [],
                'systems': [],
                'functions': []
            }
            
            # –°–æ–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
            for filter_key, var in self.critical_vars.items():
                if var.get():
                    filters['criticality'].append(filter_key)
            
            # –°–æ–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            for filter_key, var in self.system_vars.items():
                if var.get():
                    filters['systems'].append(filter_key)
            
            # –°–æ–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            for filter_key, var in self.functional_vars.items():
                if var.get():
                    filters['functions'].append(filter_key)
            
            return filters
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
            return {'criticality': [], 'systems': [], 'functions': []}

    def set_diagnostic_filters(self, filters: Dict[str, List[str]]):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ
            self._reset_all_filters_internal()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
            for filter_key in filters.get('criticality', []):
                if filter_key in self.critical_vars:
                    self.critical_vars[filter_key].set(True)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            for filter_key in filters.get('systems', []):
                if filter_key in self.system_vars:
                    self.system_vars[filter_key].set(True)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            for filter_key in filters.get('functions', []):
                if filter_key in self.functional_vars:
                    self.functional_vars[filter_key].set(True)
            
            self._update_active_filters_count()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")

    def highlight_critical_signals(self, signal_codes: List[str]):
        """–ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –≤ UI
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∫–Ω–æ–ø–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            self.logger.info(f"–ü–æ–¥—Å–≤–µ—Ç–∫–∞ {len(signal_codes)} –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

    def show_diagnostic_results(self, results: Dict[str, Any]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            self._create_results_window(results)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

    def _create_results_window(self, results: Dict[str, Any]):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            results_window = tk.Toplevel(self)
            results_window.title("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
            results_window.geometry("800x600")
            results_window.transient(self)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
            text_frame = ttk.Frame(results_window)
            text_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            
            text_widget = tk.Text(text_frame, wrap=tk.WORD, font=('Courier', 10))
            scrollbar = ttk.Scrollbar(text_frame, orient="vertical", command=text_widget.yview)
            text_widget.configure(yscrollcommand=scrollbar.set)
            
            text_widget.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
            scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            results_text = self._format_diagnostic_results(results)
            text_widget.insert(tk.END, results_text)
            text_widget.config(state=tk.DISABLED)
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            ttk.Button(
                results_window,
                text="–ó–∞–∫—Ä—ã—Ç—å",
                command=results_window.destroy
            ).pack(pady=5)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

    def _format_diagnostic_results(self, results: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            text = "–†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ì–û –ê–ù–ê–õ–ò–ó–ê\n"
            text += "=" * 50 + "\n\n"
            
            # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            if 'overall_status' in results:
                status = results['overall_status'].upper()
                text += f"–û–ë–©–ò–ô –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´: {status}\n\n"
            
            # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏
            if 'critical_faults' in results and results['critical_faults']:
                text += "–ö–†–ò–¢–ò–ß–ù–´–ï –ù–ï–ò–°–ü–†–ê–í–ù–û–°–¢–ò:\n"
                for fault in results['critical_faults']:
                    text += f"  ‚Ä¢ {fault}\n"
                text += "\n"
            
            # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º
            if 'systems_status' in results:
                text += "–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú:\n"
                for system, status in results['systems_status'].items():
                    fault_count = status.get('fault_count', 0)
                    system_status = status.get('status', 'unknown')
                    text += f"  ‚Ä¢ {system}: {system_status.upper()} (–Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π: {fault_count})\n"
                text += "\n"
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if 'recommendations' in results and results['recommendations']:
                text += "–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
                for i, rec in enumerate(results['recommendations'], 1):
                    text += f"  {i}. {rec}\n"
            
            return text
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return "–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.controller = None
        self.on_filter_changed = None
        self.logger.info("DiagnosticFilterPanel –æ—á–∏—â–µ–Ω")
