# src/core/models/data_model.py - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
–ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–∏ –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
"""
import logging
from typing import Optional, List, Dict, Any, Tuple
from datetime import datetime, timedelta
import time

# –ò–º–ø–æ—Ä—Ç—ã –¥–æ–º–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
try:
    from ..domain.entities.telemetry_data import TelemetryData
    from ..domain.entities.parameter import Parameter
    from ..domain.services.time_range_service import TimeRangeService
except ImportError as e:
    logging.warning(f"–î–æ–º–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    TelemetryData = None
    Parameter = None
    TimeRangeService = None

# –ò–º–ø–æ—Ä—Ç—ã –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
try:
    from ...infrastructure.data.csv_loader import CSVDataLoader
except ImportError as e:
    logging.warning(f"CSV Loader –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    CSVDataLoader = None

# –ò–º–ø–æ—Ä—Ç—ã Use Cases –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
try:
    from ..application.use_cases.filter_parameters_use_case import (
        FindChangedParametersRequest, FindChangedParametersResponse,
        TimeRangeInitRequest, TimeRangeInitResponse
    )
    USE_CASES_AVAILABLE = True
except ImportError:
    USE_CASES_AVAILABLE = False


class TimestampParameterService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å timestamp –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""

    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)

    def extract_timestamp_parameters(self, parameters: List[Parameter]) -> Dict[str, List[Parameter]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ timestamp –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ –≤–∞–≥–æ–Ω–∞–º"""
        timestamp_params = {}

        for param in parameters:
            if param.is_timestamp_parameter():
                wagon = param.wagon or '1'

                if wagon not in timestamp_params:
                    timestamp_params[wagon] = []

                timestamp_params[wagon].append(param)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º –≤—Ä–µ–º–µ–Ω–∏
        for wagon in timestamp_params:
            timestamp_params[wagon] = self._sort_timestamp_components(
                timestamp_params[wagon])

        self.logger.info(f"–ù–∞–π–¥–µ–Ω—ã timestamp –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è {len(timestamp_params)} –≤–∞–≥–æ–Ω–æ–≤")
        return timestamp_params

    def _sort_timestamp_components(self, params: List[Parameter]) -> List[Parameter]:
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ timestamp –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ"""
        component_order = ['year', 'month', 'day', 'hour', 'minute', 'second', 'smallsecond']

        sorted_params = []
        for component in component_order:
            for param in params:
                if param.get_timestamp_component() == component:
                    sorted_params.append(param)
                    break

        return sorted_params

    def validate_timestamp_completeness(self, timestamp_params: Dict[str, List[Parameter]]) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Ç—ã timestamp –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        required_components = {'year', 'month', 'day', 'hour', 'minute', 'second', 'smallsecond'}
        validation_result = {}

        for wagon, params in timestamp_params.items():
            found_components = {param.get_timestamp_component() for param in params}
            missing_components = required_components - found_components

            validation_result[wagon] = {
                'is_complete': len(missing_components) == 0,
                'found_components': list(found_components),
                'missing_components': list(missing_components),
                'parameter_count': len(params)
            }

        return validation_result

    def get_best_timestamp_wagon(self, timestamp_params: Dict[str, List[Parameter]]) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ –≤–∞–≥–æ–Ω–∞ –¥–ª—è timestamp"""
        validation = self.validate_timestamp_completeness(timestamp_params)

        # –ò—â–µ–º –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        for wagon, info in validation.items():
            if info['is_complete']:
                self.logger.info(f"–í—ã–±—Ä–∞–Ω –≤–∞–≥–æ–Ω {wagon} –¥–ª—è timestamp (–ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)")
                return wagon

        # –ï—Å–ª–∏ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –Ω–µ—Ç, –≤—ã–±–∏—Ä–∞–µ–º —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        best_wagon = max(validation.keys(),
                         key=lambda w: validation[w]['parameter_count'],
                         default=None)

        if best_wagon:
            self.logger.warning(f"–í—ã–±—Ä–∞–Ω –≤–∞–≥–æ–Ω {best_wagon} –¥–ª—è timestamp (–Ω–µ–ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä)")

        return best_wagon

    def create_timestamp_column_mapping(self, parameters: List[Parameter], wagon: str) -> Optional[Dict[str, str]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ timestamp —Å—Ç–æ–ª–±—Ü–æ–≤"""
        timestamp_params = [p for p in parameters
                            if p.is_timestamp_parameter() and p.wagon == wagon]

        if not timestamp_params:
            return None

        column_mapping = {}
        for param in timestamp_params:
            component = param.get_timestamp_component()
            if component:
                column_mapping[component] = param.full_column

        return column_mapping

    def integrate_with_telemetry_data(self, telemetry_data: TelemetryData,
                                      parameters: List[Parameter]) -> bool:
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è timestamp –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å TelemetryData"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º timestamp –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            timestamp_params = self.extract_timestamp_parameters(parameters)

            if not timestamp_params:
                self.logger.warning("Timestamp –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False

            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –≤–∞–≥–æ–Ω
            best_wagon = self.get_best_timestamp_wagon(timestamp_params)

            if not best_wagon:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –≤–∞–≥–æ–Ω –¥–ª—è timestamp")
                return False

            # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å—Ç–æ–ª–±—Ü–æ–≤
            column_mapping = self.create_timestamp_column_mapping(parameters, best_wagon)

            if not column_mapping:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞–ø–ø–∏–Ω–≥ timestamp —Å—Ç–æ–ª–±—Ü–æ–≤")
                return False

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ TelemetryData
            telemetry_data.timestamp_columns = column_mapping
            telemetry_data.timestamp_wagon = best_wagon

            # –°–æ–∑–¥–∞–µ–º timestamp —Å—Ç–æ–ª–±–µ—Ü –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if 'timestamp' not in telemetry_data.data.columns:
                telemetry_data._parse_timestamp_from_components(column_mapping)

            self.logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è timestamp –¥–ª—è –≤–∞–≥–æ–Ω–∞ {best_wagon}")
            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ timestamp: {e}")
            return False

class DataModel:
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""

    def __init__(self):
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        self.data_loader = CSVDataLoader() if CSVDataLoader else None
        self.timestamp_service = TimestampParameterService()
        self.time_range_service = TimeRangeService() if TimeRangeService else None
        self.logger = logging.getLogger(self.__class__.__name__)

        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self._cached_parameters: Optional[List[Parameter]] = None
        self._cached_parameter_dicts: Optional[List[Dict[str, Any]]] = None
        self._cached_lines: Optional[set] = None
        self._last_file_path: Optional[str] = None
        self._telemetry_data: Optional[TelemetryData] = None

        # –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –ø–æ–ª—è –¥–ª—è –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self._time_range_fields: Optional[Dict[str, str]] = None
        self._changed_params_cache: Dict[str, List[Parameter]] = {}
        self._analysis_cache: Dict[str, Any] = {}
        self._priority_mode_active = False

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏
        self._load_statistics: Dict[str, Any] = {}
        self._performance_metrics: Dict[str, float] = {}

        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Use Cases
        self._use_case_integration = USE_CASES_AVAILABLE

        self.logger.info("DataModel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

    def load_csv_file(self, file_path: str) -> bool:
        """–ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ CSV —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        start_time = time.time()
        
        try:
            self.logger.info(f"üî• –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: {file_path}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if self._last_file_path == file_path and self._cached_parameters:
                self.logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {file_path}")
                return True

            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            self.clear_cache()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if not self.data_loader:
                self.logger.error("CSVDataLoader –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False

            telemetry_data = self.data_loader.load_csv(file_path)
            if not telemetry_data:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏")
                return False

            self._telemetry_data = telemetry_data

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            success = self._process_telemetry_data_priority(telemetry_data)

            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if self._time_range_fields:
                self.logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {self._time_range_fields}")
            else:
                self.logger.warning("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

            if telemetry_data and hasattr(telemetry_data, 'timestamp_range'):
                self.logger.info(f"TelemetryData.timestamp_range: {telemetry_data.timestamp_range}")
            else:
                self.logger.warning("TelemetryData.timestamp_range –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                self._last_file_path = file_path
                
                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
                load_time = time.time() - start_time
                self._collect_load_statistics(file_path, load_time)
                
                self.logger.info(f"‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {load_time:.2f}—Å")
                return True
            else:
                self.logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏")
                return False

        except Exception as e:
            load_time = time.time() - start_time
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {e} (–≤—Ä–µ–º—è: {load_time:.2f}—Å)")
            return False

    def _process_telemetry_data_priority(self, telemetry_data: TelemetryData) -> bool:
        """–ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏"""
        try:
            self.logger.info("üî• –ù–∞—á–∞–ª–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
            
            data = telemetry_data.data
            parameters = []
            lines = set()
            exclude_columns = {'timestamp', 'TIMESTAMP', 'index'}

            self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {len(data.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤...")

            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
            for column in data.columns:
                if column not in exclude_columns:
                    try:
                        # –°–æ–∑–¥–∞–µ–º Parameter –æ–±—ä–µ–∫—Ç
                        if '::' in column:
                            parameter = Parameter.from_header(column)
                        else:
                            parameter = Parameter._create_from_simple_header(column)

                        parameters.append(parameter)
                        lines.add(parameter.line)

                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–æ–ª–±—Ü–∞ {column}: {e}")
                        continue

            # –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è timestamp —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            timestamp_integrated = self.timestamp_service.integrate_with_telemetry_data(
                telemetry_data, parameters
            )

            if timestamp_integrated:
                self.logger.info("‚úÖ Timestamp —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞")
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è timestamp –¥–∞–Ω–Ω—ã—Ö
                validation_result = telemetry_data.validate_timestamp_integrity()
                if not validation_result['is_valid']:
                    self.logger.warning(f"–ü—Ä–æ–±–ª–µ–º—ã —Å timestamp: {validation_result['issues']}")
                    
                    # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                    if validation_result.get('warnings'):
                        self.logger.info("–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è timestamp –¥–∞–Ω–Ω—ã—Ö...")
                        telemetry_data.repair_timestamp_gaps(method='interpolate')

            # –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –≤—Ä–µ–º–µ–Ω–∏
            if self.time_range_service:
                self._time_range_fields = self.time_range_service.initialize_from_telemetry_data(
                    telemetry_data)
                
                if self._time_range_fields:
                    self.logger.info(f"‚úÖ –ü–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {self._time_range_fields['from_time']} - {self._time_range_fields['to_time']}")
                else:
                    self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏")

            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self._cached_parameters = parameters
            self._cached_parameter_dicts = [p.to_dict() for p in parameters]
            self._cached_lines = lines

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å legacy –∫–æ–¥–æ–º
            if self.data_loader:
                self.data_loader.parameters = self._cached_parameter_dicts
                self.data_loader.lines = list(lines)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
                if hasattr(telemetry_data, 'timestamp_range') and telemetry_data.timestamp_range:
                    self.data_loader.min_timestamp = telemetry_data.timestamp_range[0].strftime('%Y-%m-%d %H:%M:%S')
                    self.data_loader.max_timestamp = telemetry_data.timestamp_range[1].strftime('%Y-%m-%d %H:%M:%S')
                    self.data_loader.start_time = telemetry_data.timestamp_range[0]
                    self.data_loader.end_time = telemetry_data.timestamp_range[1]

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            problematic_count = sum(1 for p in parameters if p.is_problematic)
            normal_count = len(parameters) - problematic_count

            self.logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(parameters)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ({normal_count} –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö, {problematic_count} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö), {len(lines)} –ª–∏–Ω–∏–π")

            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏: {e}")
            return False

    def _collect_load_statistics(self, file_path: str, load_time: float):
        """–°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏"""
        try:
            self._load_statistics = {
                'file_path': file_path,
                'load_time_seconds': load_time,
                'timestamp': datetime.now().isoformat(),
                'parameters_count': len(self._cached_parameters) if self._cached_parameters else 0,
                'lines_count': len(self._cached_lines) if self._cached_lines else 0,
                'telemetry_records': self._telemetry_data.records_count if self._telemetry_data else 0,
                'timestamp_integrated': bool(self._telemetry_data and hasattr(self._telemetry_data, 'timestamp_columns')),
                'time_range_initialized': bool(self._time_range_fields)
            }
            
            # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            self._performance_metrics['last_load_time'] = load_time
            self._performance_metrics['parameters_per_second'] = (
                len(self._cached_parameters) / load_time if load_time > 0 and self._cached_parameters else 0
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

    # === –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ò–ó–ú–ï–ù–Ø–ï–ú–´–• –ü–ê–†–ê–ú–ï–¢–†–û–í ===

    def find_changed_parameters_in_range(self, threshold: float = 0.1) -> List[Parameter]:
        """üî• –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –ø–æ–∏—Å–∫ –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"""
        try:
            self.logger.info(f"üî• –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –ø–æ–∏—Å–∫ –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (threshold={threshold})")
            
            if not self._telemetry_data or not self._cached_parameters:
                self.logger.warning("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                return []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"changed_params_{threshold}_{self._get_current_range_key()}"
            if cache_key in self._changed_params_cache:
                self.logger.debug("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                return self._changed_params_cache[cache_key]

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            start_time = time.time()
            
            if self.time_range_service:
                changed_params = self.time_range_service.find_changed_parameters_in_range(
                    self._telemetry_data,
                    self._cached_parameters,
                    threshold
                )
            else:
                # Fallback –∞–Ω–∞–ª–∏–∑
                changed_params = self._fallback_changed_analysis(threshold)

            analysis_time = time.time() - start_time

            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._changed_params_cache[cache_key] = changed_params
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self._performance_metrics['last_changed_analysis_time'] = analysis_time
            self._performance_metrics['changed_params_found'] = len(changed_params)

            self.logger.info(f"‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(changed_params)} –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞ {analysis_time:.2f}—Å")
            
            return changed_params

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            return []

    def _fallback_changed_analysis(self, threshold: float) -> List[Parameter]:
        """Fallback –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            if not self._telemetry_data or not self._cached_parameters:
                return []

            changed_params = []
            data = self._telemetry_data.data

            for param in self._cached_parameters:
                if param.full_column in data.columns:
                    series = data[param.full_column]
                    
                    # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω—è–µ–º–æ—Å—Ç–∏
                    if self._is_parameter_changed_simple(series, threshold):
                        changed_params.append(param)

            return changed_params

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ fallback –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return []

    def _is_parameter_changed_simple(self, series, threshold: float) -> bool:
        """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω—è–µ–º–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
        try:
            clean_series = series.dropna()
            
            if len(clean_series) < 2:
                return False
            
            # –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if clean_series.dtype.kind in 'biufc':
                unique_ratio = len(clean_series.unique()) / len(clean_series)
                return unique_ratio > threshold
            
            # –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            unique_count = len(clean_series.unique())
            return unique_count > 1 and unique_count < len(clean_series) * 0.9

        except Exception:
            return False

    def set_priority_mode(self, enabled: bool):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        self._priority_mode_active = enabled
        
        if enabled:
            self.logger.info("üî• –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô —Ä–µ–∂–∏–º –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –í–ö–õ–Æ–ß–ï–ù")
            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
            self._changed_params_cache.clear()
        else:
            self.logger.info("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω")

    def is_priority_mode_active(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        return self._priority_mode_active

    def get_changed_parameters_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∏–∑–º–µ–Ω—è–µ–º—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
        try:
            if not self._cached_parameters:
                return {'error': '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'}

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏
            thresholds = [0.05, 0.1, 0.2, 0.5]
            statistics = {
                'total_parameters': len(self._cached_parameters),
                'analysis_by_threshold': {},
                'performance_metrics': self._performance_metrics.copy()
            }

            for threshold in thresholds:
                changed_params = self.find_changed_parameters_in_range(threshold)
                statistics['analysis_by_threshold'][threshold] = {
                    'changed_count': len(changed_params),
                    'change_percentage': (len(changed_params) / len(self._cached_parameters) * 100) if self._cached_parameters else 0
                }

            return statistics

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            return {'error': str(e)}

    def _get_current_range_key(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            if self.time_range_service:
                current_range = self.time_range_service.get_current_range()
                if current_range and len(current_range) >= 2:
                    return f"{current_range[0]}_{current_range[1]}"
            
            return "full_range"
        except Exception:
            return "unknown_range"

    # === –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° –í–†–ï–ú–ï–ù–ù–´–ú–ò –î–ò–ê–ü–ê–ó–û–ù–ê–ú–ò ===

    def get_time_range_fields(self) -> Optional[Dict[str, Any]]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–µ–π –≤—Ä–µ–º–µ–Ω–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        try:
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ß–µ—Ä–µ–∑ time_range_service.get_current_range()
            if self.time_range_service and hasattr(self.time_range_service, 'get_current_range'):
                time_range = self.time_range_service.get_current_range()
                if time_range and len(time_range) >= 2:
                    from_time = time_range[0]
                    to_time = time_range[1]
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if isinstance(from_time, datetime):
                        from_time_str = from_time.strftime('%Y-%m-%d %H:%M:%S')
                    else:
                        from_time_str = str(from_time)
                    
                    if isinstance(to_time, datetime):
                        to_time_str = to_time.strftime('%Y-%m-%d %H:%M:%S')
                    else:
                        to_time_str = str(to_time)
                    
                    return {
                        'from_time': from_time_str,
                        'to_time': to_time_str,
                        'duration': self._calculate_duration(from_time_str, to_time_str),
                        'total_records': getattr(self.time_range_service, 'total_records', 0),
                        'source': 'time_range_service'
                    }

            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ß–µ—Ä–µ–∑ _telemetry_data.timestamp_range
            if self._telemetry_data and hasattr(self._telemetry_data, 'timestamp_range'):
                timestamp_range = self._telemetry_data.timestamp_range
                if timestamp_range and len(timestamp_range) >= 2:
                    from_time = timestamp_range[0].strftime('%Y-%m-%d %H:%M:%S')
                    to_time = timestamp_range[1].strftime('%Y-%m-%d %H:%M:%S')
                    
                    return {
                        'from_time': from_time,
                        'to_time': to_time,
                        'duration': self._calculate_duration(from_time, to_time),
                        'total_records': getattr(self._telemetry_data, 'records_count', 0),
                        'source': 'telemetry_data'
                    }

            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ß–µ—Ä–µ–∑ data_loader
            if (self.data_loader and 
                hasattr(self.data_loader, 'min_timestamp') and 
                hasattr(self.data_loader, 'max_timestamp')):
                
                min_time = self.data_loader.min_timestamp
                max_time = self.data_loader.max_timestamp
                
                if min_time and max_time:
                    return {
                        'from_time': str(min_time),
                        'to_time': str(max_time),
                        'duration': self._calculate_duration(str(min_time), str(max_time)),
                        'total_records': getattr(self.data_loader, 'records_count', 0),
                        'source': 'data_loader'
                    }

            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –ò–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
            if self._time_range_fields:
                result = self._time_range_fields.copy()
                result['source'] = 'cached_fields'
                return result

            self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
            return None

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–µ–π –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return None

    def set_user_time_range(self, from_time: str, to_time: str) -> bool:
        """–ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
        try:
            self.logger.info(f"üî• –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {from_time} - {to_time}")

            if not self.time_range_service:
                self.logger.error("TimeRangeService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            if not self._validate_time_range(from_time, to_time):
                return False

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            success = self.time_range_service.set_user_time_range(from_time, to_time)

            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è
                if self._time_range_fields:
                    self._time_range_fields.update({
                        'from_time': from_time,
                        'to_time': to_time,
                        'duration': self._calculate_duration(from_time, to_time),
                        'source': 'user_set'
                    })

                # –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                self._changed_params_cache.clear()
                self._analysis_cache.clear()

                self.logger.info(f"‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –¥–∏–∞–ø–∞–∑–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {from_time} - {to_time}")

            return success

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {e}")
            return False

    def _validate_time_range(self, from_time: str, to_time: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
        try:
            from_dt = datetime.strptime(from_time, '%Y-%m-%d %H:%M:%S')
            to_dt = datetime.strptime(to_time, '%Y-%m-%d %H:%M:%S')

            if from_dt >= to_dt:
                self.logger.error("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏–∞–ø–∞–∑–æ–Ω –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–∞–Ω–Ω—ã—Ö
            if self._telemetry_data and hasattr(self._telemetry_data, 'timestamp_range'):
                data_range = self._telemetry_data.timestamp_range
                if data_range and len(data_range) >= 2:
                    if from_dt < data_range[0] or to_dt > data_range[1]:
                        self.logger.warning("–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–∞–Ω–Ω—ã—Ö")
                        # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º

            return True

        except ValueError as e:
            self.logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return False

    def reset_time_range_to_full(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô —Å–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∫ –ø–æ–ª–Ω–æ–º—É"""
        try:
            self.logger.info("üî• –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô —Å–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∫ –ø–æ–ª–Ω–æ–º—É")

            if self.time_range_service:
                self.time_range_service.reset_to_data_range()

                if self._telemetry_data:
                    self._time_range_fields = self.time_range_service.initialize_from_telemetry_data(
                        self._telemetry_data)
                    self.logger.info("‚úÖ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å–±—Ä–æ—à–µ–Ω –∫ –ø–æ–ª–Ω–æ–º—É")

            # –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
            self._changed_params_cache.clear()
            self._analysis_cache.clear()

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {e}")

    def _calculate_duration(self, from_time_str: str, to_time_str: str) -> str:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            from_time = datetime.strptime(from_time_str, '%Y-%m-%d %H:%M:%S')
            to_time = datetime.strptime(to_time_str, '%Y-%m-%d %H:%M:%S')
            
            duration = to_time - from_time
            days = duration.days
            hours, remainder = divmod(duration.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            
            if days > 0:
                return f"{days} –¥–Ω. {hours:02d}:{minutes:02d}:{seconds:02d}"
            else:
                return f"{hours:02d}:{minutes:02d}:{seconds:02d}"
        except Exception:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    def get_time_range_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
        try:
            if not self.time_range_service:
                return {'error': 'TimeRangeService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}

            stats = self.time_range_service.get_range_statistics()

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if self._telemetry_data:
                current_range = self.time_range_service.get_current_range()
                if current_range:
                    filtered_data = self._telemetry_data.filter_by_time(*current_range)
                    stats.update({
                        'filtered_records': filtered_data.records_count if filtered_data else 0,
                        'total_records': self._telemetry_data.records_count,
                        'records_ratio': (
                            (filtered_data.records_count / self._telemetry_data.records_count * 100) 
                            if self._telemetry_data.records_count > 0 and filtered_data else 0
                        )
                    })

            return stats

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {e}")
            return {'error': str(e)}

    # === –ú–ï–¢–û–î–´ –ü–û–õ–£–ß–ï–ù–ò–Ø –ü–ê–†–ê–ú–ï–¢–†–û–í –ò –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ===

    def get_filterable_parameters(self) -> List[Parameter]:
        """–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        try:
            if not self._cached_parameters:
                self.logger.warning("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
                return []

            # –í –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –í–°–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∞–º–∞ —Ä–µ—à–∏—Ç —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
            if self._priority_mode_active:
                self.logger.debug("üî• –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô —Ä–µ–∂–∏–º: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
                return self._cached_parameters

            # –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –º–æ–∂–µ–º –∏—Å–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ
            return self._cached_parameters

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return []

    def get_parameter_objects(self) -> List[Parameter]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ Parameter –æ–±—ä–µ–∫—Ç–æ–≤"""
        return self._cached_parameters or []

    def get_parameters(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä–µ–π (legacy —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
        return self._cached_parameter_dicts or []

    def get_normal_parameters(self) -> List[Parameter]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        if not self._cached_parameters:
            return []
        return [p for p in self._cached_parameters if not p.is_problematic]

    def get_problematic_parameters(self) -> List[Parameter]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        if not self._cached_parameters:
            return []
        return [p for p in self._cached_parameters if p.is_problematic]

    def get_lines(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–Ω–∏–π –∏–∑ –∫—ç—à–∞"""
        return list(self._cached_lines) if self._cached_lines else []

    def get_telemetry_data(self) -> Optional[TelemetryData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ TelemetryData"""
        return self._telemetry_data

    def get_parameters_by_type(self, parameter_type: str) -> List[Parameter]:
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —Ç–∏–ø—É"""
        try:
            if not self._cached_parameters:
                return []

            if parameter_type == 'normal':
                return self.get_normal_parameters()
            elif parameter_type == 'problematic':
                return self.get_problematic_parameters()
            elif parameter_type == 'timestamp':
                return [p for p in self._cached_parameters if p.is_timestamp_parameter()]
            elif parameter_type == 'changed':
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω—è–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if self._changed_params_cache:
                    latest_key = max(self._changed_params_cache.keys())
                    return self._changed_params_cache[latest_key]
                return []
            else:  # 'all'
                return self._cached_parameters

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —Ç–∏–ø—É {parameter_type}: {e}")
            return []

    def get_parameters_by_line(self, line: str) -> List[Parameter]:
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ –ª–∏–Ω–∏–∏"""
        try:
            if not self._cached_parameters:
                return []

            return [p for p in self._cached_parameters if p.line == line]

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ –ª–∏–Ω–∏–∏ {line}: {e}")
            return []

    def get_parameters_by_wagon(self, wagon: str) -> List[Parameter]:
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ –≤–∞–≥–æ–Ω—É"""
        try:
            if not self._cached_parameters:
                return []

            return [p for p in self._cached_parameters if p.wagon == wagon]

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ –≤–∞–≥–æ–Ω—É {wagon}: {e}")
            return []

    def search_parameters(self, search_text: str) -> List[Parameter]:
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–∏—Å–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É"""
        try:
            if not self._cached_parameters or not search_text:
                return []

            search_text = search_text.lower()
            found_parameters = []

            for param in self._cached_parameters:
                # –ü–æ–∏—Å–∫ –≤ signal_code
                if search_text in param.signal_code.lower():
                    found_parameters.append(param)
                    continue

                # –ü–æ–∏—Å–∫ –≤ description
                if param.description and search_text in param.description.lower():
                    found_parameters.append(param)
                    continue

                # –ü–æ–∏—Å–∫ –≤ line
                if search_text in param.line.lower():
                    found_parameters.append(param)
                    continue

            self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(found_parameters)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_text}'")
            return found_parameters

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            return []

    # === –ú–ï–¢–û–î–´ –ê–ù–ê–õ–ò–ó–ê –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===

    def analyze_parameter_changes_detailed(self, threshold: float = 0.1) -> Dict[str, Any]:
        """–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            self.logger.info(f"üî• –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (threshold={threshold})")

            if not self._telemetry_data or not self._cached_parameters:
                return {'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"detailed_analysis_{threshold}_{self._get_current_range_key()}"
            if cache_key in self._analysis_cache:
                self.logger.debug("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
                return self._analysis_cache[cache_key]

            start_time = time.time()

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
            if self.time_range_service:
                current_range = self.time_range_service.get_current_range()
            else:
                current_range = None

            if not current_range:
                return {'error': '–í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            filtered_data = self._telemetry_data.filter_by_time(*current_range)

            analysis_result = {
                'total_parameters': len(self._cached_parameters),
                'changed_parameters': [],
                'unchanged_parameters': [],
                'analysis_threshold': threshold,
                'time_range': {
                    'start': current_range[0].strftime('%Y-%m-%d %H:%M:%S'),
                    'end': current_range[1].strftime('%Y-%m-%d %H:%M:%S')
                },
                'statistics': {},
                'performance': {}
            }

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            for param in self._cached_parameters:
                if param.full_column in filtered_data.data.columns:
                    series = filtered_data.data[param.full_column]
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–º–µ–Ω—è–µ–º–æ—Å—Ç—å
                    is_changed = self._is_parameter_changed_advanced(series, threshold)
                    
                    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    param_stats = self._calculate_parameter_statistics(series)
                    
                    param_info = {
                        'parameter': param.to_dict(),
                        'is_changed': is_changed,
                        'change_statistics': param_stats,
                        'change_score': param_stats.get('change_score', 0)
                    }

                    if is_changed:
                        analysis_result['changed_parameters'].append(param_info)
                    else:
                        analysis_result['unchanged_parameters'].append(param_info)

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω—è–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ score
            analysis_result['changed_parameters'].sort(
                key=lambda x: x['change_score'], reverse=True
            )

            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            analysis_result['statistics'] = {
                'changed_count': len(analysis_result['changed_parameters']),
                'unchanged_count': len(analysis_result['unchanged_parameters']),
                'change_ratio': (len(analysis_result['changed_parameters']) / len(self._cached_parameters) * 100) if self._cached_parameters else 0,
                'filtered_records': filtered_data.records_count if filtered_data else 0,
                'total_records': self._telemetry_data.records_count
            }

            # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            analysis_time = time.time() - start_time
            analysis_result['performance'] = {
                'analysis_time_seconds': analysis_time,
                'parameters_per_second': len(self._cached_parameters) / analysis_time if analysis_time > 0 else 0,
                'cache_used': False
            }

            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._analysis_cache[cache_key] = analysis_result

            self.logger.info(f"‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {analysis_time:.2f}—Å")
            return analysis_result

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return {'error': str(e)}

    def _is_parameter_changed_advanced(self, series, threshold: float) -> bool:
        """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω—è–µ–º–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
        try:
            if self.time_range_service and hasattr(self.time_range_service, '_is_parameter_changed'):
                return self.time_range_service._is_parameter_changed(series, threshold)
            else:
                # Fallback –º–µ—Ç–æ–¥
                return self._is_parameter_changed_simple(series, threshold)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω—è–µ–º–æ—Å—Ç–∏: {e}")
            return False

    def _calculate_parameter_statistics(self, series) -> Dict[str, Any]:
        """–†–ê–°–®–ò–†–ï–ù–ù–´–ô —Ä–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
        try:
            clean_series = series.dropna()

            if len(clean_series) == 0:
                return {'error': 'no_data', 'change_score': 0}

            stats = {
                'total_values': len(series),
                'valid_values': len(clean_series),
                'null_values': len(series) - len(clean_series),
                'unique_values': len(clean_series.unique()),
                'unique_ratio': len(clean_series.unique()) / len(clean_series) if len(clean_series) > 0 else 0
            }

            # –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if clean_series.dtype.kind in 'biufc':  # —á–∏—Å–ª–æ–≤—ã–µ —Ç–∏–ø—ã
                stats.update({
                    'min_value': float(clean_series.min()),
                    'max_value': float(clean_series.max()),
                    'mean_value': float(clean_series.mean()),
                    'std_value': float(clean_series.std()),
                    'variance': float(clean_series.var()),
                    'range': float(clean_series.max() - clean_series.min()),
                    'coefficient_of_variation': float(clean_series.std() / clean_series.mean()) if clean_series.mean() != 0 else 0
                })

                # –í—ã—á–∏—Å–ª—è–µ–º change_score –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if stats['range'] > 0:
                    stats['change_score'] = min(stats['unique_ratio'] * stats['coefficient_of_variation'], 1.0)
                else:
                    stats['change_score'] = 0
            else:
                # –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                stats['change_score'] = stats['unique_ratio']

            return stats

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: {e}")
            return {'error': str(e), 'change_score': 0}

    def get_model_statistics(self) -> Dict[str, Any]:
        """–†–ê–°–®–ò–†–ï–ù–ù–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏"""
        try:
            stats = {
                'loaded_file': self._last_file_path,
                'load_statistics': self._load_statistics,
                'performance_metrics': self._performance_metrics,
                'priority_mode_active': self._priority_mode_active,
                'cache_status': {
                    'parameters_cached': self._cached_parameters is not None,
                    'lines_cached': self._cached_lines is not None,
                    'analysis_cache_size': len(self._analysis_cache),
                    'changed_params_cache_size': len(self._changed_params_cache)
                },
                'time_range_fields': self._time_range_fields
            }

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
            if self._cached_parameters:
                normal_count = sum(1 for p in self._cached_parameters if not p.is_problematic)
                problematic_count = len(self._cached_parameters) - normal_count
                timestamp_count = sum(1 for p in self._cached_parameters if p.is_timestamp_parameter())

                stats['parameter_statistics'] = {
                    'total_parameters': len(self._cached_parameters),
                    'normal_parameters': normal_count,
                    'problematic_parameters': problematic_count,
                    'timestamp_parameters': timestamp_count,
                    'lines_count': len(self._cached_lines) if self._cached_lines else 0,
                    'normal_percentage': (normal_count / len(self._cached_parameters) * 100) if self._cached_parameters else 0,
                    'problematic_percentage': (problematic_count / len(self._cached_parameters) * 100) if self._cached_parameters else 0
                }

            # –î–æ–±–∞–≤–ª—è–µ–º timestamp —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if self._telemetry_data:
                stats['telemetry_statistics'] = {
                    'records_count': self._telemetry_data.records_count,
                    'has_timestamp': hasattr(self._telemetry_data, 'timestamp_columns'),
                    'timestamp_stats': self.get_timestamp_statistics(),
                    'timestamp_validation': self.validate_timestamp_data()
                }

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                if self.time_range_service:
                    stats['time_range_statistics'] = self.get_time_range_statistics()

            return stats

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            return {'error': str(e)}

    def get_performance_report(self) -> Dict[str, Any]:
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            return {
                'load_performance': self._load_statistics,
                'runtime_performance': self._performance_metrics,
                'cache_performance': {
                    'analysis_cache_hits': len(self._analysis_cache),
                    'changed_params_cache_hits': len(self._changed_params_cache),
                    'memory_usage_estimate': self._estimate_memory_usage()
                },
                'recommendations': self._get_performance_recommendations()
            }

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return {'error': str(e)}

    def _estimate_memory_usage(self) -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        try:
            import sys
            
            memory_estimate = {
                'cached_parameters_mb': sys.getsizeof(self._cached_parameters) / 1024 / 1024 if self._cached_parameters else 0,
                'cached_dicts_mb': sys.getsizeof(self._cached_parameter_dicts) / 1024 / 1024 if self._cached_parameter_dicts else 0,
                'analysis_cache_mb': sys.getsizeof(self._analysis_cache) / 1024 / 1024,
                'changed_params_cache_mb': sys.getsizeof(self._changed_params_cache) / 1024 / 1024,
                'telemetry_data_mb': sys.getsizeof(self._telemetry_data) / 1024 / 1024 if self._telemetry_data else 0
            }
            
            memory_estimate['total_estimated_mb'] = sum(memory_estimate.values())
            return memory_estimate

        except Exception as e:
            return {'error': str(e)}

    def _get_performance_recommendations(self) -> List[str]:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        recommendations = []

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
            if len(self._analysis_cache) > 50:
                recommendations.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
            if self._performance_metrics.get('last_load_time', 0) > 10:
                recommendations.append("–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10 —Å–µ–∫—É–Ω–¥, —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if self._cached_parameters and len(self._cached_parameters) > 10000:
                recommendations.append("–ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º
            if self._priority_mode_active:
                recommendations.append("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")

        except Exception as e:
            recommendations.append(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")

        return recommendations

    # === –ú–ï–¢–û–î–´ TIMESTAMP –ò –í–ê–õ–ò–î–ê–¶–ò–ò ===

    def get_timestamp_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ timestamp"""
        try:
            if self._telemetry_data and hasattr(self._telemetry_data, 'get_timestamp_statistics'):
                return self._telemetry_data.get_timestamp_statistics()
            return {'error': 'Timestamp –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è timestamp —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'error': str(e)}

    def get_timestamp_parameters(self) -> Dict[str, List[Parameter]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ timestamp –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ –≤–∞–≥–æ–Ω–∞–º"""
        try:
            if self._cached_parameters:
                return self.timestamp_service.extract_timestamp_parameters(self._cached_parameters)
            return {}

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è timestamp –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            return {}

    def validate_timestamp_data(self) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è timestamp –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if self._telemetry_data and hasattr(self._telemetry_data, 'validate_timestamp_integrity'):
                return self._telemetry_data.validate_timestamp_integrity()
            return {'is_valid': False, 'issues': ['–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã']}

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ timestamp: {e}")
            return {'is_valid': False, 'issues': [str(e)]}

    def repair_timestamp_data(self, method: str = 'interpolate') -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ timestamp –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if self._telemetry_data and hasattr(self._telemetry_data, 'repair_timestamp_gaps'):
                success = self._telemetry_data.repair_timestamp_gaps(method)
                
                if success:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                    if self.time_range_service:
                        self._time_range_fields = self.time_range_service.initialize_from_telemetry_data(
                            self._telemetry_data)
                    
                    # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
                    self._analysis_cache.clear()
                    self._changed_params_cache.clear()
                    
                    self.logger.info(f"‚úÖ Timestamp –¥–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –º–µ—Ç–æ–¥–æ–º '{method}'")
                
                return success
            
            return False

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è timestamp: {e}")
            return False

    def filter_data_by_time(self, start_time: datetime, end_time: datetime) -> Optional[TelemetryData]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            if self._telemetry_data and hasattr(self._telemetry_data, 'filter_by_time'):
                return self._telemetry_data.filter_by_time(start_time, end_time)
            return None

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return None

    def validate_data_integrity(self) -> Dict[str, Any]:
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            validation_result = {
                'overall_status': 'unknown',
                'validations': {},
                'issues': [],
                'warnings': [],
                'recommendations': []
            }

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not self._cached_parameters:
                validation_result['issues'].append('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
            else:
                validation_result['validations']['parameters_loaded'] = True
                validation_result['validations']['parameters_count'] = len(self._cached_parameters)

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
            if not self._telemetry_data:
                validation_result['issues'].append('–î–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
            else:
                validation_result['validations']['telemetry_loaded'] = True
                validation_result['validations']['telemetry_records'] = self._telemetry_data.records_count

            # –í–∞–ª–∏–¥–∞—Ü–∏—è timestamp
            if self._telemetry_data:
                timestamp_validation = self.validate_timestamp_data()
                validation_result['validations']['timestamp'] = timestamp_validation
                
                if not timestamp_validation['is_valid']:
                    validation_result['warnings'].extend(timestamp_validation.get('issues', []))

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            if self.time_range_service:
                time_range_validation = self.time_range_service.validate_current_range()
                validation_result['validations']['time_range'] = time_range_validation
            else:
                validation_result['warnings'].append('TimeRangeService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            if validation_result['issues']:
                validation_result['overall_status'] = 'error'
            elif validation_result['warnings']:
                validation_result['overall_status'] = 'warning'
            else:
                validation_result['overall_status'] = 'ok'

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if validation_result['warnings']:
                validation_result['recommendations'].append('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ timestamp –¥–∞–Ω–Ω—ã—Ö')
            
            if len(self._analysis_cache) == 0 and self._cached_parameters:
                validation_result['recommendations'].append('–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')

            return validation_result

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {
                'overall_status': 'error',
                'validations': {},
                'issues': [str(e)],
                'warnings': [],
                'recommendations': []
            }

    # === –ú–ï–¢–û–î–´ –û–ß–ò–°–¢–ö–ò –ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ï–°–£–†–°–ê–ú–ò ===

    def clear_cache(self):
        """–†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        try:
            self.logger.info("–ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ DataModel")

            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self._cached_parameters = None
            self._cached_parameter_dicts = None
            self._cached_lines = None
            self._last_file_path = None
            self._telemetry_data = None
            self._time_range_fields = None

            # –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            self._changed_params_cache.clear()
            self._analysis_cache.clear()

            # –°–±—Ä–æ—Å —Ä–µ–∂–∏–º–æ–≤
            self._priority_mode_active = False

            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self._load_statistics.clear()
            self._performance_metrics.clear()

            # –û—á–∏—Å—Ç–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
            if self.time_range_service and hasattr(self.time_range_service, 'clear_cache'):
                self.time_range_service.clear_cache()

            self.logger.info("‚úÖ –ö—ç—à DataModel –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")

    def clear_analysis_cache(self):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –û—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –∫—ç—à–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            cache_size_before = len(self._analysis_cache) + len(self._changed_params_cache)
            
            self._analysis_cache.clear()
            self._changed_params_cache.clear()
            
            self.logger.info(f"‚úÖ –û—á–∏—â–µ–Ω –∫—ç—à –∞–Ω–∞–ª–∏–∑–∞: {cache_size_before} –∑–∞–ø–∏—Å–µ–π")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

    def optimize_memory_usage(self):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        try:
            self.logger.info("–ù–∞—á–∞–ª–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏")

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∫—ç—à–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
            if len(self._analysis_cache) > 10:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ
                sorted_keys = sorted(self._analysis_cache.keys())
                for key in sorted_keys[:-10]:
                    del self._analysis_cache[key]

            if len(self._changed_params_cache) > 5:
                sorted_keys = sorted(self._changed_params_cache.keys())
                for key in sorted_keys[:-5]:
                    del self._changed_params_cache[key]

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
            import gc
            gc.collect()

            self.logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏: {e}")

    def export_model_state(self) -> Dict[str, Any]:
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –≠–∫—Å–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        try:
            state = {
                'metadata': {
                    'export_timestamp': datetime.now().isoformat(),
                    'loaded_file': self._last_file_path,
                    'priority_mode': self._priority_mode_active
                },
                'statistics': self.get_model_statistics(),
                'performance': self.get_performance_report(),
                'validation': self.validate_data_integrity(),
                'cache_info': {
                    'analysis_cache_keys': list(self._analysis_cache.keys()),
                    'changed_params_cache_keys': list(self._changed_params_cache.keys())
                }
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            if self.time_range_service:
                state['time_range_config'] = {
                    'current_range': self.time_range_service.get_current_range(),
                    'statistics': self.get_time_range_statistics()
                }

            return state

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
            return {'error': str(e)}

    def import_model_state(self, state: Dict[str, Any]) -> bool:
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –ò–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        try:
            self.logger.info("–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥–µ–ª–∏")

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º
            if 'metadata' in state and 'priority_mode' in state['metadata']:
                self.set_priority_mode(state['metadata']['priority_mode'])

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
            if 'time_range_config' in state and self.time_range_service:
                time_config = state['time_range_config']
                if 'current_range' in time_config and time_config['current_range']:
                    current_range = time_config['current_range']
                    if len(current_range) >= 2:
                        self.time_range_service.set_user_time_range(
                            current_range[0].strftime('%Y-%m-%d %H:%M:%S') if isinstance(current_range[0], datetime) else str(current_range[0]),
                            current_range[1].strftime('%Y-%m-%d %H:%M:%S') if isinstance(current_range[1], datetime) else str(current_range[1])
                        )

            self.logger.info("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ")
            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
            return False

    def cleanup(self):
        """–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            self.logger.info("–ù–∞—á–∞–ª–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ DataModel")

            # –û—á–∏—â–∞–µ–º –≤—Å–µ –∫—ç—à–∏
            self.clear_cache()

            # –û—á–∏—â–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            if self.time_range_service and hasattr(self.time_range_service, 'cleanup'):
                self.time_range_service.cleanup()

            if self.timestamp_service:
                self.timestamp_service = None

            if self.data_loader and hasattr(self.data_loader, 'cleanup'):
                self.data_loader.cleanup()

            self.logger.info("‚úÖ DataModel –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")

    def __str__(self):
        return f"DataModel(loaded={bool(self._cached_parameters)}, priority={self._priority_mode_active}, params={len(self._cached_parameters) if self._cached_parameters else 0})"

    def __repr__(self):
        return self.__str__()

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä"""
        try:
            if hasattr(self, 'logger'):
                self.logger.info("DataModel —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –ø–∞–º—è—Ç–∏")
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
